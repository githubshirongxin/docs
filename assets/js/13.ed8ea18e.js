(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{489:function(a,t,s){"use strict";s.r(t);var e=s(55),r=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("p",[a._v("共享存储，NFS以及DB仍旧有单点故障。Nginx也有单点故障。以后：DB可以做成集群。nginx可以做成主从。NFS换成ceph。")]),a._v(" "),s("p",[a._v("感谢原作者akiya的分享。这篇文章写得已经算是不错了。至少给了一个尝试的方案。我略加整理，并解决了一下小Bug。亲测可以push。\nhttps://juejin.im/post/5d973e246fb9a04dfa0963fb")]),a._v(" "),s("p",[a._v("下面是思路：\nnginx负责负载均衡，nginx提供https。\nnginx后面的两个harobr使用http服务。\n网页访问的时候访问最前端的nginx。\n客户端需要docker的daemon.json中加入最前端nginx的domain。")]),a._v(" "),s("p",[s("img",{attrs:{src:"/docs/images/2020-07-16-10-50-44.png",alt:""}})]),a._v(" "),s("p",[a._v("如果最终生产环境集群中服务器较多，依赖做完LB的Harbor也无法完全达到需求时，可以使用如下架构，部署下级Harbor节点从主节点同步镜像，然后再分发给生产服务器。\n"),s("img",{attrs:{src:"/docs/images/2020-07-16-10-51-12.png",alt:""}})]),a._v(" "),s("h2",{attrs:{id:"环境"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#环境"}},[a._v("#")]),a._v(" 环境")]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[a._v("IP")]),a._v(" "),s("th",[a._v("用途")]),a._v(" "),s("th",[a._v("安装的服务")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[a._v("192.168.3.120")]),a._v(" "),s("td",[a._v("NFS服务器，Nginx服务器，Harbor存储层")]),a._v(" "),s("td",[a._v("NFS、Redis、PostgressSQL、Nginx、Docker、docker-compose")])]),a._v(" "),s("tr",[s("td",[a._v("192.168.3.108")]),a._v(" "),s("td",[a._v("Harbor无状态节点")]),a._v(" "),s("td",[a._v("docker、docker-compose、harbor（http方式）")])]),a._v(" "),s("tr",[s("td",[a._v("192.168.3.109")]),a._v(" "),s("td",[a._v("Harbor无状态节点")]),a._v(" "),s("td",[a._v("docker、docker-compose、harbor（http方式）")])])])]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[a._v("软件")]),a._v(" "),s("th",[a._v("版本")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[a._v("Docker")]),a._v(" "),s("td",[a._v("19.06.3-ce")])]),a._v(" "),s("tr",[s("td",[a._v("docker-compose")]),a._v(" "),s("td",[a._v("1.25.0-rc2")])]),a._v(" "),s("tr",[s("td",[a._v("Harbor")]),a._v(" "),s("td",[a._v("1.10.0")])]),a._v(" "),s("tr",[s("td",[a._v("Nginx")]),a._v(" "),s("td",[a._v("1.16.1")])]),a._v(" "),s("tr",[s("td",[a._v("PostgreSQL")]),a._v(" "),s("td",[a._v("9.6.14")])]),a._v(" "),s("tr",[s("td",[a._v("Redis")]),a._v(" "),s("td",[a._v("4.0.14")])])])]),a._v(" "),s("p",[a._v("版本的确定，首先你下载一个Harbor，然后用下面方法确认好redis，postgress的版本。")]),a._v(" "),s("h2",{attrs:{id:"_1-192-168-3-120-部署"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-192-168-3-120-部署"}},[a._v("#")]),a._v(" 1. 192.168.3.120 部署")]),a._v(" "),s("p",[a._v("上安装registry、clair、notarysigner、notaryserver、Redis、NFS、证书")]),a._v(" "),s("h3",{attrs:{id:"怎么查看harbor用的redis版本"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#怎么查看harbor用的redis版本"}},[a._v("#")]),a._v(" 怎么查看harbor用的redis版本")]),a._v(" "),s("p",[s("code",[a._v("docker exec -it redis /bin/bash")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("redis [ ~ ]$ redis-server --version\nRedis server v=4.0.14 sha=00000000:0 malloc=jemalloc-4.0.3 bits=64 build=1e2a11bfe971a20a\n")])])]),s("h3",{attrs:{id:"怎么查看harbor用的postgress版本"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#怎么查看harbor用的postgress版本"}},[a._v("#")]),a._v(" 怎么查看harbor用的postgress版本")]),a._v(" "),s("p",[s("code",[a._v("docker exec -it harbor-db /bin/bash")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('postgres [ / ]$ psql\npsql (9.6.14)\nType "help" for help.\n\npostgres=# select version();\n PostgreSQL 9.6.14 on x86_64-pc-linux-gnu, compiled by gcc (GCC) 6.3.0, 64-bit\n(1 row)\n')])])]),s("h3",{attrs:{id:"_1-1-签发私有证书"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-签发私有证书"}},[a._v("#")]),a._v(" 1.1 签发私有证书")]),a._v(" "),s("h4",{attrs:{id:"生成私钥"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生成私钥"}},[a._v("#")]),a._v(" 生成私钥")]),a._v(" "),s("h4",{attrs:{id:"正式生产环境建议使用商业证书！"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正式生产环境建议使用商业证书！"}},[a._v("#")]),a._v(" 正式生产环境建议使用商业证书！")]),a._v(" "),s("h5",{attrs:{id:"使用openssl工具生成一个rsa私钥"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用openssl工具生成一个rsa私钥"}},[a._v("#")]),a._v(" 使用openssl工具生成一个RSA私钥")]),a._v(" "),s("p",[s("code",[a._v("# openssl genrsa -des3 -out harbor.key 2048")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("Generating RSA private key, 2048 bit long modulus\n.......................+++\n......+++\ne is 65537 (0x10001)\nEnter pass phrase for harbor.key:                   # 输入一个至少4位的密码\nVerifying - Enter pass phrase for harbor.key:       # 重复输入密码\n复制代码删除harbor.key中的密码\n# openssl rsa -in harbor.key -out harbor.key\nEnter pass phrase for harbor.key:                 # 输入刚才创建时的密码\nwriting RSA key\n")])])]),s("h5",{attrs:{id:"生成csr（证书签名请求）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生成csr（证书签名请求）"}},[a._v("#")]),a._v(" 生成CSR（证书签名请求）")]),a._v(" "),s("p",[s("code",[a._v("# openssl req -new -key harbor.key -out harbor.csr")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("You are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n-----\nCountry Name (2 letter code) [XX]:cn             # 国家\nState or Province Name (full name) []:Sichuan    # 地区 \nLocality Name (eg, city) [Default City]:Chengdu  # 城市\nOrganization Name (eg, company) [Default Company Ltd]:akiya  # 组织\nOrganizational Unit Name (eg, section) []:akiya  # 组织单位\nCommon Name (eg, your name or your server's hostname) []:akiya    # 常用名可填自己名字或域名\nEmail Address []:a@b.com                         # 邮件地址\n\nPlease enter the following 'extra' attributes\nto be sent with your certificate request      \nA challenge password []:       # 可留空\nAn optional company name []:   # 可留空\n")])])]),s("h5",{attrs:{id:"生成自签名证书"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生成自签名证书"}},[a._v("#")]),a._v(" 生成自签名证书")]),a._v(" "),s("p",[a._v("注意：在使用自签名的临时证书时，浏览器会提示证书的颁发机构是未知的。\n"),s("code",[a._v("# echo subjectAltName = IP:192.168.3.120 > extfile.cnf")]),a._v(" "),s("code",[a._v("# openssl x509 -req -days 365 -in harbor.csr -signkey harbor.key -out harbor.crt -extfile extfile.cnf")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("Signature ok\nsubject=/C=cn/ST=Sichuan/L=Chengdu/O=akiya/OU=akiya/CN=akiya/emailAddress=a@b.com\nGetting Private key\n")])])]),s("h5",{attrs:{id:"存放证书"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#存放证书"}},[a._v("#")]),a._v(" 存放证书")]),a._v(" "),s("p",[a._v("复制证书到/www/certs待用\n"),s("code",[a._v("# mkdir -p /www/certs && cp harbor.crt harbor.key /www/certs")])]),a._v(" "),s("h2",{attrs:{id:"_1-2-docker"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-docker"}},[a._v("#")]),a._v(" 1.2 Docker")]),a._v(" "),s("h5",{attrs:{id:"官方一键脚本安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#官方一键脚本安装"}},[a._v("#")]),a._v(" 官方一键脚本安装")]),a._v(" "),s("p",[s("code",[a._v("# curl -sSL https://get.docker.com/ | sh")])]),a._v(" "),s("h5",{attrs:{id:"先安装必要的依赖环境"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#先安装必要的依赖环境"}},[a._v("#")]),a._v(" 先安装必要的依赖环境")]),a._v(" "),s("p",[s("code",[a._v("# yum -y install yum-utils device-mapper-persistent-data lvm2")])]),a._v(" "),s("h5",{attrs:{id:"添加软件源信息使用阿里云源安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#添加软件源信息使用阿里云源安装"}},[a._v("#")]),a._v(" 添加软件源信息使用阿里云源安装")]),a._v(" "),s("p",[s("code",[a._v("# yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo")])]),a._v(" "),s("h5",{attrs:{id:"更新缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#更新缓存"}},[a._v("#")]),a._v(" 更新缓存")]),a._v(" "),s("p",[s("code",[a._v("# yum makecache fast")])]),a._v(" "),s("h5",{attrs:{id:"安装docker或安装指定版本docker"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装docker或安装指定版本docker"}},[a._v("#")]),a._v(" 安装Docker或安装指定版本Docker")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("# yum -y install docker\n# yum -y install docker-ce-18.06.3.ce-3.el7\n")])])]),s("h5",{attrs:{id:"查看docker版本"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查看docker版本"}},[a._v("#")]),a._v(" 查看Docker版本")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("# docker --version\nDocker version 18.06.3-ce, build d7080c1\n")])])]),s("h5",{attrs:{id:"修改docker仓库为国内镜像站"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#修改docker仓库为国内镜像站"}},[a._v("#")]),a._v(" 修改Docker仓库为国内镜像站")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("# curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://f1361db2.m.daocloud.io\n")])])]),s("h5",{attrs:{id:"启动docker服务并添加至开机自启"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#启动docker服务并添加至开机自启"}},[a._v("#")]),a._v(" 启动Docker服务并添加至开机自启")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("# systemctl start docker\n# systemctl enable docker\n")])])]),s("h2",{attrs:{id:"_1-3-compose"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-compose"}},[a._v("#")]),a._v(" 1.3 Compose")]),a._v(" "),s("p",[a._v("compose是Docker提供的一个命令行工具，用来定义和运行由多个容器组成的应用。使用compose，我们可以通过YAML文件声明式的定义应用程序的各个服务，并由单个命令完成应用的创建和启动。\n由于国内政策原因，可能在海外网站上下载文件速度较慢，建议下载本地后上传至服务器")]),a._v(" "),s("h5",{attrs:{id:"下载docker-compose并赋予可执行权限"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#下载docker-compose并赋予可执行权限"}},[a._v("#")]),a._v(" 下载docker-compose并赋予可执行权限")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("# curl -L https://github.com/docker/compose/releases/download/1.25.0-rc2/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose\n\n# chmod +x /usr/local/bin/docker-compose\n\n//查看compose本地版本\n# docker-compose -v\n\ndocker-compose version 1.25.0-rc2, build 661ac20e\n")])])]),s("h2",{attrs:{id:"_1-4-四个服务的安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-四个服务的安装"}},[a._v("#")]),a._v(" 1.4 四个服务的安装")]),a._v(" "),s("p",[a._v("由于Harbor v1.9.0使用的是PostgreSQL，我们也同样独立部署一套PostgreSQL与Redis，此次演示使用Docker部署，实际生产环境按需要选择是否部署至宿主机。")]),a._v(" "),s("h5",{attrs:{id:"postgresql"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#postgresql"}},[a._v("#")]),a._v(" PostgreSQL")]),a._v(" "),s("p",[a._v("通过查看已安装的Harbor v1.9.0单机版中运行的harbor-db容器可得知此次运行的PostgreSQL版本为9.6.14")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('# docker exec -it harbor-db /bin/bash\npostgres [ / ]$ psql\npsql (9.6.14)\nType "help" for help.\n\npostgres=# select version();\n                                    version\n-------------------------------------------------------------------------------\n PostgreSQL 9.6.14 on x86_64-pc-linux-gnu, compiled by gcc (GCC) 6.3.0, 64-bit\n(1 row)\n')])])]),s("h5",{attrs:{id:"redis"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis"}},[a._v("#")]),a._v(" Redis")]),a._v(" "),s("p",[a._v("根据官方文档描述，使用Redis需要4.0.10-1.ph2版本。同样，此次我们为了演示也使用docker-compose来部署。")]),a._v(" "),s("h5",{attrs:{id:"yaml脚本"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#yaml脚本"}},[a._v("#")]),a._v(" yaml脚本")]),a._v(" "),s("p",[a._v("那么我们使用同一版本的PostgreSQL与Redis，编写docker-compose.yml 内容如下：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('# author:akiya\nversion: "3"\n\nnetworks:\n  harbor:\n    driver: bridge\n\nservices:\n  registry:\n    image: postgres:9.6.14\n    container_name: harbor-registry\n    restart: always\n    environment:\n      POSTGRES_DB: registry\n      POSTGRES_PASSWORD: root123\n    volumes:\n      - $PWD/postgres/registry:/var/lib/postgresql/data\n    networks:\n      - harbor\n    ports:\n      - 20010:5432\n  clair:\n    image: postgres:9.6.14\n    container_name: harbor-clair\n    restart: always\n    environment:\n      POSTGRES_DB: clair\n      POSTGRES_PASSWORD: root123\n    volumes:\n      - $PWD/postgres/clair:/var/lib/postgresql/data\n    networks:\n      - harbor\n    ports:\n      - 20011:5432\n  notarysigner:\n    image: postgres:9.6.14\n    container_name: harbor-notarysigner\n    restart: always\n    environment:\n      POSTGRES_DB: notarysigner\n      POSTGRES_PASSWORD: root123\n    volumes:\n      - $PWD/postgres/notarysigner:/var/lib/postgresql/data\n    networks:\n      - harbor\n    ports:\n      - 20012:5432\n  notaryserver:\n    image: postgres:9.6.14\n    container_name: harbor-notaryserver\n    restart: always\n    environment:\n      POSTGRES_DB: notaryserver\n      POSTGRES_PASSWORD: root123\n    volumes:\n      - $PWD/postgres/notaryserver:/var/lib/postgresql/data\n    networks:\n      - harbor\n    ports:\n      - 20013:5432\n  Redis:\n    image: redis:4.0.10\n    container_name: harbor-redis\n    command: redis-server /usr/local/etc/redis/redis.conf\n    restart: always\n    volumes:\n      - $PWD/redis/data:/data\n      - $PWD/redis/redis.conf:/usr/local/etc/redis/redis.conf\n    networks:\n      - harbor\n    ports:\n      - 20000:6379\n')])])]),s("p",[a._v("保存后我们用"),s("code",[a._v("docker-compose up -d")]),a._v("命令启动相应的容器.\n并在防火墙中开放对应的端口")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("# docker-compose up -d\n# firewall-cmd --zone=public --permanent --add-port=20000/tcp\n# firewall-cmd --zone=public --permanent --add-port=20010/tcp\n# firewall-cmd --zone=public --permanent --add-port=20011/tcp\n# firewall-cmd --zone=public --permanent --add-port=20012/tcp\n# firewall-cmd --zone=public --permanent --add-port=20013/tcp\n# firewall-cmd --reload\n")])])]),s("blockquote",[s("p",[a._v("我一般推荐关闭防火墙。在内网里面开启防火墙没有任何意义。")])]),a._v(" "),s("h2",{attrs:{id:"_1-5-nfs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-nfs"}},[a._v("#")]),a._v(" 1.5 NFS")]),a._v(" "),s("h3",{attrs:{id:"_1-5-1-服务端-192-168-3-120"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-1-服务端-192-168-3-120"}},[a._v("#")]),a._v(" 1.5.1 服务端 192.168.3.120")]),a._v(" "),s("h5",{attrs:{id:"创建nfs共享文件路径"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建nfs共享文件路径"}},[a._v("#")]),a._v(" 创建NFS共享文件路径")]),a._v(" "),s("p",[s("code",[a._v("# mkdir -p /data/nfs")])]),a._v(" "),s("h5",{attrs:{id:"安装nfs（在安装完nfs-utils后，rpcbind默认是启动了的）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装nfs（在安装完nfs-utils后，rpcbind默认是启动了的）"}},[a._v("#")]),a._v(" 安装NFS（在安装完nfs-utils后，rpcbind默认是启动了的）")]),a._v(" "),s("p",[s("code",[a._v("# yum -y install nfs-utils rpcbind")])]),a._v(" "),s("h5",{attrs:{id:"启动nfs相关服务并设置开机启动"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#启动nfs相关服务并设置开机启动"}},[a._v("#")]),a._v(" 启动NFS相关服务并设置开机启动")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("# systemctl start rpcbind\n# systemctl enable rpcbind\n# systemctl start nfs-server\n# systemctl enable nfs-server\n# systemctl start nfs-lock\n# systemctl enable nfs-lock\n# systemctl start nfs-idmap\n# systemctl enable nfs-idmap\n")])])]),s("h5",{attrs:{id:"使用如下命令像-etc-exports中添加配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用如下命令像-etc-exports中添加配置"}},[a._v("#")]),a._v(" 使用如下命令像/etc/exports中添加配置")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("# echo '/data     192.168.3.0/24(rw,sync,no_root_squash,no_all_squash)' >> /etc/exports\n# exportfs -a      # 使exports的修改生效\n")])])]),s("h5",{attrs:{id:"检查nfs共享目录是否正确"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#检查nfs共享目录是否正确"}},[a._v("#")]),a._v(" 检查NFS共享目录是否正确")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("# showmount -e localhost\nExport list for localhost:\n/data 192.168.3.0/24\n")])])]),s("h5",{attrs:{id:"放行防火墙相应服务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#放行防火墙相应服务"}},[a._v("#")]),a._v(" 放行防火墙相应服务")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("# firewall-cmd --add-service=nfs --permanent --zone=public\n# firewall-cmd --add-service=mountd --permanent --zone=public\n# firewall-cmd --add-service=rpc-bind --permanent --zone=public\n# firewall-cmd --reload\n")])])]),s("h3",{attrs:{id:"_1-5-2-客户端-192-168-3-108，192-168-3-109"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-2-客户端-192-168-3-108，192-168-3-109"}},[a._v("#")]),a._v(" 1.5.2 客户端 192.168.3.108，192.168.3.109")]),a._v(" "),s("h5",{attrs:{id:"创建nfs挂载文件路径"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建nfs挂载文件路径"}},[a._v("#")]),a._v(" 创建NFS挂载文件路径")]),a._v(" "),s("p",[s("code",[a._v("# mkdir /data")])]),a._v(" "),s("h5",{attrs:{id:"安装nfs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装nfs"}},[a._v("#")]),a._v(" 安装NFS")]),a._v(" "),s("p",[s("code",[a._v("# yum -y install nfs-utils")])]),a._v(" "),s("h5",{attrs:{id:"检查nfs远程共享目录是否存在"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#检查nfs远程共享目录是否存在"}},[a._v("#")]),a._v(" 检查NFS远程共享目录是否存在")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("# showmount -e 192.168.3.120\nExport list for 192.168.3.120:\n/data 192.168.3.0/24\n")])])]),s("h5",{attrs:{id:"挂载远程nfs共享文件路径"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#挂载远程nfs共享文件路径"}},[a._v("#")]),a._v(" 挂载远程NFS共享文件路径")]),a._v(" "),s("p",[s("code",[a._v("# mount -t nfs 192.168.3.120:/data /data")])]),a._v(" "),s("h5",{attrs:{id:"添加到系统开机自动挂载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#添加到系统开机自动挂载"}},[a._v("#")]),a._v(" 添加到系统开机自动挂载")]),a._v(" "),s("p",[s("code",[a._v("# echo '192.168.3.120:/data /data nfs defaults 0 0' >> /etc/fstab")])]),a._v(" "),s("h5",{attrs:{id:"测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#测试"}},[a._v("#")]),a._v(" 测试")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("在客户端上挂载完NFS后创建一个测试文件\n# touch /data/test\n然后切换到服务器查看是否存在\n# ls /data/nfs/\ntest\n")])])]),s("h2",{attrs:{id:"_1-6-nginx"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-nginx"}},[a._v("#")]),a._v(" 1.6 Nginx")]),a._v(" "),s("h3",{attrs:{id:"安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[a._v("#")]),a._v(" 安装")]),a._v(" "),s("h5",{attrs:{id:"添加nginx源"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#添加nginx源"}},[a._v("#")]),a._v(" 添加Nginx源")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("# rpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm\n")])])]),s("h5",{attrs:{id:"yum安装nginx"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#yum安装nginx"}},[a._v("#")]),a._v(" yum安装Nginx")]),a._v(" "),s("p",[s("code",[a._v("# yum -y install nginx")])]),a._v(" "),s("h5",{attrs:{id:"启动nginx"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#启动nginx"}},[a._v("#")]),a._v(" 启动Nginx")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("# systemctl start nginx\n# systemctl enable nginx\n")])])]),s("h5",{attrs:{id:"编写配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编写配置"}},[a._v("#")]),a._v(" 编写配置")]),a._v(" "),s("p",[a._v("创建"),s("code",[a._v("/etc/nginx/conf.d/harbor.conf")]),a._v("文件，并写入如下内容")]),a._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[a._v("upstream harbor "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    ip_hash;\n    server "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("192.168")]),a._v("."),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3.108")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("80")]),a._v(";\n    server "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("192.168")]),a._v("."),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3.109")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("80")]),a._v(";\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\nserver "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n   listen       "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("80")]),a._v(";\n   # 提供访问的域名或者IP\n   server_name  harbor.ccbjb.com.cn;\n   return      "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("308")]),a._v(" https"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//$host$request_uri;")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\nserver "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    listen  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("443")]),a._v(" ssl;\n    server_name harbor.ccbjb.com.cn;\n    \n    # SSL 证书\n    ssl_certificate ./certs/harbor.crt;\n    # SSL 私钥\n    ssl_certificate_key ./certs/harbor.key;\n    client_max_body_size "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(";\n    chunked_transfer_encoding on;\n\n    location / "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $host;\n        proxy_set_header X-Forwarded-Proto https;\n        proxy_redirect off;\n        proxy_ssl_verify off;\n        proxy_ssl_session_reuse on;\n        proxy_pass http"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//harbor;")]),a._v("\n        proxy_http_version "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1.1")]),a._v(";\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    location /v"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("/ "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        proxy_pass http"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//harbor/v2/;")]),a._v("\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_ssl_verify off;\n        proxy_ssl_session_reuse on;\n        proxy_buffering off;\n        proxy_request_buffering off;\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("h4",{attrs:{id:"启动nginx-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#启动nginx-2"}},[a._v("#")]),a._v(" 启动Nginx")]),a._v(" "),s("h5",{attrs:{id:"验证nginx配置正确性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#验证nginx配置正确性"}},[a._v("#")]),a._v(" 验证Nginx配置正确性")]),a._v(" "),s("p",[s("code",[a._v("# nginx -t")])]),a._v(" "),s("h5",{attrs:{id:"平滑重启nginx"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#平滑重启nginx"}},[a._v("#")]),a._v(" 平滑重启Nginx")]),a._v(" "),s("p",[s("code",[a._v("# nginx -s reload")])]),a._v(" "),s("h5",{attrs:{id:"开放防火墙80-443端口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#开放防火墙80-443端口"}},[a._v("#")]),a._v(" 开放防火墙80/443端口")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("# firewall-cmd --zone=public --permanent --add-port=80/tcp\n# firewall-cmd --zone=public --permanent --add-port=443/tcp\n# firewall-cmd --reload\n")])])]),s("h3",{attrs:{id:"问题处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#问题处理"}},[a._v("#")]),a._v(" 问题处理")]),a._v(" "),s("p",[a._v("Nginx")]),a._v(" "),s("h5",{attrs:{id:"问题：使用自签证书时报错"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#问题：使用自签证书时报错"}},[a._v("#")]),a._v(" 问题：使用自签证书时报错")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("emerg] 31815#31815: cannot load certificate \"/www/certs/harbor.crt\": BIO_new_file() failed (SSL: error:0200100D:system library:fopen:Permission denied:fopen('/www/certs/harbor.crt','r') error:2006D002:BIO routines:BIO_new_file:system lib)\n")])])]),s("h5",{attrs:{id:"解决方法：创建-etc-nginx-certs路径，并复制证书到此路径"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解决方法：创建-etc-nginx-certs路径，并复制证书到此路径"}},[a._v("#")]),a._v(" 解决方法：创建/etc/nginx/certs路径，并复制证书到此路径")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("mkdir -p /etc/nginx/certs && cp /www/certs/ ./certs\n// 修改harbor.conf中证书相关路径\n# 刚才我们自己签发的证书\nssl_certificate ./certs/harbor.crt;\n# 证书对应的私钥\nssl_certificate_key ./certs/harbor.key;\n")])])]),s("h2",{attrs:{id:"_2-两台harbor节点安装harbor"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-两台harbor节点安装harbor"}},[a._v("#")]),a._v(" 2. 两台Harbor节点安装Harbor")]),a._v(" "),s("h3",{attrs:{id:"_2-1-修改配置文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-修改配置文件"}},[a._v("#")]),a._v(" 2.1 修改配置文件")]),a._v(" "),s("h4",{attrs:{id:"修改harbor-yml配置文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#修改harbor-yml配置文件"}},[a._v("#")]),a._v(" 修改harbor.yml配置文件")]),a._v(" "),s("p",[s("code",[a._v("# vim harbor.yml")])]),a._v(" "),s("p",[a._v("主要配置参数如下，由于我们这里使用外置PostgreSQL与Redis所以直接注释掉database相关配置改用external_database与external_redis")]),a._v(" "),s("p",[a._v("以192.168.3.108为例，192.168.3.109只需要修改hostname")]),a._v(" "),s("div",{staticClass:"language-yml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 修改为当前服务器内网IP地址即可")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("hostname")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" 192.168.3.108 "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 另一台修改为192.168.3.109")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# HTTP相关配置")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("http")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("port")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("80")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# HTTPS相关配置，这里由于我们会在前端加一个Nginx")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 所以我们直接使用HTTP，而在Nginx上做SSL")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#https:")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#  # HTTPS端口")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#  port: 443")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#  # TLS证书")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#  certificate: /www/certs/harbor.crt")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#  # TLS私钥")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#  private_key: /www/certs/harbor.key")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 默认管理员密码")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("harbor_admin_password")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" Harbor12345\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Harbor DB配置，由于使用外部数据库，所以这里我们注释掉")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# database:")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#   password: root123")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#   max_idle_conns: 50")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#   max_open_conns: 100")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("...")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 外部PostgreSQL，由于Harbor使用了4个数据库，这里我们也需要对相应数据库地址进行配置")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("external_database")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("harbor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("host")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" 192.168.3.120\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("port")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("20010")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("db_name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" registry\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("username")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" postgres\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("password")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" root123\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("ssl_mode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" disable\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("max_idle_conns")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("max_open_conns")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("clair")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("host")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" 192.168.3.120\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("port")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("20011")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("db_name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" clair\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("username")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" postgres\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("password")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" root123\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("ssl_mode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" disable\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("notary_signer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("host")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" 192.168.3.120\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("port")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("20012")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("db_name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" notarysigner\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("username")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" postgres\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("password")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" root123\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("ssl_mode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" disable\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("notary_server")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("host")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" 192.168.3.120\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("port")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("20013")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("db_name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" notaryserver\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("username")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" postgres\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("password")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" root123\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("ssl_mode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" disable\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 使用外部Redis，取消相应注释即可")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("external_redis")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("host")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" 192.168.3.120\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("port")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("20000")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("password")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("registry_db_index")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("jobservice_db_index")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("chartmuseum_db_index")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v("\n")])])]),s("h3",{attrs:{id:"_2-2-安装harbor"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-安装harbor"}},[a._v("#")]),a._v(" 2.2 安装Harbor")]),a._v(" "),s("h5",{attrs:{id:"生成harbor运行的必要文件（环境）以及docker-compose-yml文件；"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生成harbor运行的必要文件（环境）以及docker-compose-yml文件；"}},[a._v("#")]),a._v(" 生成harbor运行的必要文件（环境）以及docker-compose.yml文件；")]),a._v(" "),s("p",[a._v("执行后会通过网络获取Docker Image，建议提前修改好国内镜像站加速。\n"),s("code",[a._v("# ./prepare")])]),a._v(" "),s("p",[s("code",[a._v("# ./install.sh")])]),a._v(" "),s("h5",{attrs:{id:"开放harbor端口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#开放harbor端口"}},[a._v("#")]),a._v(" 开放Harbor端口")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("# firewall-cmd --zone=public --permanent --add-port=80/tcp\n# firewall-cmd --reload\n")])])]),s("blockquote",[s("p",[a._v("推荐关闭防火墙，就不需要这步了")])]),a._v(" "),s("h4",{attrs:{id:"以上就是原文的全部了。这里有一处漏记。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#以上就是原文的全部了。这里有一处漏记。"}},[a._v("#")]),a._v(" 以上就是原文的全部了。这里有一处漏记。")]),a._v(" "),s("p",[a._v("如果不处理，会有push镜像失败的问题。")]),a._v(" "),s("h3",{attrs:{id:"_2-3-修改harbor的nginx配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-修改harbor的nginx配置"}},[a._v("#")]),a._v(" 2.3 修改harbor的nginx配置")]),a._v(" "),s("h6",{attrs:{id:"参考："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考："}},[a._v("#")]),a._v(" 参考：")]),a._v(" "),s("p",[a._v("https://goharbor.io/docs/2.0.0/install-config/troubleshoot-installation/")]),a._v(" "),s("blockquote",[s("p",[a._v("使用nginx或负载平衡\n如果Harbor在nginx代理或弹性负载平衡之后运行，请打开文件common/config/nginx/nginx.conf并搜索以下行。\nproxy_set_header X-Forwarded-Proto $scheme;\n如果代理已经有类似的设置，从部分删除\nlocation /，\nlocation /v2/\nlocation /service/\n和重新部署港湾。有关如何重新部署Harbor的说明，请参阅 重新配置Harbor和管理Harbor生命周期。")])]),a._v(" "),s("h5",{attrs:{id:"首先，修改两个nginx节点的nginx配置文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#首先，修改两个nginx节点的nginx配置文件"}},[a._v("#")]),a._v(" 首先，修改两个nginx节点的nginx配置文件")]),a._v(" "),s("p",[a._v("harbor安装目录（harbor.xml同级目录）"),s("code",[a._v("/root/harbor")]),a._v("，修改nginx的配置文件\n"),s("code",[a._v("/root/harbor/common/config/nginx/nginx.conf")]),a._v(" 三处，注意只改三处。\n否则，push的时候会一直retring！！！！！！！！\n"),s("font",{attrs:{color:"red"}},[a._v("该配置文件的注释会有误导，导致你都注释掉，就怎么也push不成功,  注意只改三处!")])],1),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v(" location / {\n      proxy_pass http://portal/;\n      proxy_set_header Host $host;\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\n      # When setting up Harbor behind other proxy, such as an Nginx instance, remove the below line if the proxy already has similar settings.\n      # proxy_set_header X-Forwarded-Proto $scheme;\n\n      proxy_buffering off;\n      proxy_request_buffering off;\n    }\nlocation /v2/ {\n      proxy_pass http://core/v2/;\n      proxy_set_header Host $http_host;\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\n      # When setting up Harbor behind other proxy, such as an Nginx instance, remove the below line if the proxy already has similar settings.\n      # proxy_set_header X-Forwarded-Proto $scheme;\n      proxy_buffering off;\n      proxy_request_buffering off;\n\n      proxy_send_timeout 900;\n      proxy_read_timeout 900;\n    }\n location /service/ {\n      proxy_pass http://core/service/;\n      proxy_set_header Host $host;\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\n      # When setting up Harbor behind other proxy, such as an Nginx instance, remove the below line if the proxy already has similar settings.\n      # proxy_set_header X-Forwarded-Proto $scheme;\n\n      proxy_buffering off;\n      proxy_request_buffering off;\n    }\n")])])]),s("h5",{attrs:{id:"然后，重启harbor服务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#然后，重启harbor服务"}},[a._v("#")]),a._v(" 然后，重启harbor服务")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker-compose down\ndocker-compose up -d\n")])])]),s("h2",{attrs:{id:"_3-dockers客户端测试push"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-dockers客户端测试push"}},[a._v("#")]),a._v(" 3. dockers客户端测试push")]),a._v(" "),s("h5",{attrs:{id:"_192-168-3-107-上测试push"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_192-168-3-107-上测试push"}},[a._v("#")]),a._v(" 192.168.3.107 上测试push")]),a._v(" "),s("h6",{attrs:{id:"客户端上修改docker配置文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#客户端上修改docker配置文件"}},[a._v("#")]),a._v(" 客户端上修改docker配置文件")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('# vi /etc/docker/daemon.json\n{\n "insecure-registries": ["harbor.ccbjb.com.cn"]\n}\n\n// 修改/etc/docker/daemon.json完成后reload配置文件\n# sudo systemctl daemon-reload\n\n// 重启docker服务\n# sudo systemctl restart docker.service\n\n')])])]),s("p",[a._v("不修改login不进去，push不让")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("# docker login -u admin harbor.ccbjb.com.cn\npassword:\n输入harbor.xml里Harbor12345（当然我已经改成别的了，输入你自己的密码）\nLogin Succeeded\n\n# docker tag node harbor.ccbjb.com.cn/library/vue/js\n\n# docker push harbor.ccbjb.com.cn/library/vue/js\nThe push refers to a repository [harbor.ccbjb.com.cn/library/vuejs/ci]\n3cb56e88501e: Pushed\n5fe5f08a709e: Pushed\n99ad6967cf69: Pushed\n2aa1c54ebc66: Pushed\n89cb25530034: Pushed\nc4b55423085b: Pushed\nb5e9932b9936: Pushed\nd5644f4d8741: Pushed\n4a03ae8d3bee: Pushed\na9286fedbd63: Pushed\nd50e7be1e737: Pushed\n6b114a2dd6de: Pushed\nbb9315db9240: Pushed\nlatest: digest: sha256:3b766dda613fcd2dce50e4e2ba6ef9ae0e322a52ca1fff6d9e466a06e2a8a0e6 size: 3063\n")])])]),s("h5",{attrs:{id:"同一个网段192-168-3-随便哪台机器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#同一个网段192-168-3-随便哪台机器"}},[a._v("#")]),a._v(" 同一个网段192.168.3.*随便哪台机器")]),a._v(" "),s("p",[a._v("https://harbor.ccbjb.com.cn/\nadmin\nHarbor12345\n都能够看到已经上传的镜像文件。")]),a._v(" "),s("hr"),a._v(" "),s("h1",{attrs:{id:"以下：一次失败的把-harbor安装在samba挂载上的经历（不要尝试）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#以下：一次失败的把-harbor安装在samba挂载上的经历（不要尝试）"}},[a._v("#")]),a._v(" 以下：一次失败的把 Harbor安装在samba挂载上的经历（不要尝试）")]),a._v(" "),s("p",[a._v("修改docker卷位置\n首先把公司分给我的raid盘挂载过来。\n然后把harbor默认的dockers卷修改在这块磁盘上。这样至少存储上提高了点安全性。")]),a._v(" "),s("h2",{attrs:{id:"_1，作为samba的客户端挂载服务端的磁盘"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1，作为samba的客户端挂载服务端的磁盘"}},[a._v("#")]),a._v(" 1，作为samba的客户端挂载服务端的磁盘")]),a._v(" "),s("p",[s("a",{attrs:{href:"https://githubshirongxin.github.io/Smba%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E7%A3%81%E7%9B%98/",target:"_blank",rel:"noopener noreferrer"}},[a._v("samba实现分布式磁盘"),s("OutboundLink")],1)]),a._v(" "),s("p",[a._v("已经挂完 /data_cjb/")]),a._v(" "),s("ul",[s("li",[a._v("确认一下挂载情况：")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("mount | grep data_cjb\n或者\ndf -hT | grep data_cjb\n或者\ncat /etc/fstab\n")])])]),s("h2",{attrs:{id:"_2，修改harbor-docker-compose-yml-harbor-yml"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2，修改harbor-docker-compose-yml-harbor-yml"}},[a._v("#")]),a._v(" 2，修改harbor/docker-compose.yml , harbor.yml")]),a._v(" "),s("h3",{attrs:{id:"harbor-yml"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#harbor-yml"}},[a._v("#")]),a._v(" harbor.yml")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v(" # Log configurations\n   location: /var/log/harbor # 不改了，这块丢就丢了。\n # The default data volume\n #  data_volume: /data #这得改成mount好的raid盘目录\n data_volume: /data_cjb/harbordata\n")])])]),s("h3",{attrs:{id:"docker-compose-yml"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose-yml"}},[a._v("#")]),a._v(" docker-compose.yml")]),a._v(" "),s("p",[a._v("所有/data/ 都改成/data_cjb/harbordata/")]),a._v(" "),s("h2",{attrs:{id:"_3，执行-install-sh"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3，执行-install-sh"}},[a._v("#")]),a._v(" 3，执行"),s("code",[a._v("./install.sh")])]),a._v(" "),s("p",[a._v("最后/root/harbor/prepare 执行的时候报错。\n说容器内没有/data/secret/cert/目录没有permission denied")]),a._v(" "),s("h2",{attrs:{id:"结论：samba共享目录上无法安装harbor"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#结论：samba共享目录上无法安装harbor"}},[a._v("#")]),a._v(" 结论：samba共享目录上无法安装harbor")]),a._v(" "),s("p",[a._v("另外，我在nfs上共享目录上就能安装harbor。")]),a._v(" "),s("hr")])}),[],!1,null,null,null);t.default=r.exports}}]);