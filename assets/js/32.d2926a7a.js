(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{506:function(e,t,s){"use strict";s.r(t);var a=s(55),v=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("p",[e._v("讲的还行，我记下来留着动手实验。")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://www.bilibili.com/video/BV1mE411u7dR?p=10",target:"_blank",rel:"noopener noreferrer"}},[e._v("资料来源"),s("OutboundLink")],1)]),e._v(" "),s("h2",{attrs:{id:"_1，概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1，概念"}},[e._v("#")]),e._v(" 1，概念")]),e._v(" "),s("p",[e._v("master节点")]),e._v(" "),s("ul",[s("li",[e._v("apiserver：接受客户端指令")]),e._v(" "),s("li",[e._v("scheduler：选哪个node启动服务")]),e._v(" "),s("li",[e._v("controller manager：想node的kubelet发送指令")])]),e._v(" "),s("p",[e._v("node节点")]),e._v(" "),s("ul",[s("li",[e._v("kubelet ：管理docker容器")]),e._v(" "),s("li",[e._v("kubeproxy：管理docker容器的网络")])]),e._v(" "),s("p",[e._v("etcd就是做存储")]),e._v(" "),s("ul",[s("li",[e._v("记录node信息（ip，是否可用）")]),e._v(" "),s("li",[e._v("检查client是否是合法用户")]),e._v(" "),s("li",[e._v("用apiserver与etcd交互")])]),e._v(" "),s("p",[e._v("pod")]),e._v(" "),s("ul",[s("li",[e._v("一组容器")]),e._v(" "),s("li",[e._v("最小的部署单元，k8s只能启动pod，而不能往下直接启动容器")]),e._v(" "),s("li",[e._v("pod是短暂的，运行完就消失")]),e._v(" "),s("li",[e._v("有地址，不对外")])]),e._v(" "),s("p",[e._v("controller")]),e._v(" "),s("ul",[s("li",[e._v("控制pod，启动，删除")]),e._v(" "),s("li",[e._v("Deployment")]),e._v(" "),s("li",[e._v("Job")]),e._v(" "),s("li",[e._v("DaemonList")])]),e._v(" "),s("p",[e._v("service ：提供一个同一的入口，即使pod改变，这个入口不变，保证用户访问不变")]),e._v(" "),s("ul",[s("li",[e._v("pod的集合（nginx多个pod，php多个pod，mysql多个pod）")]),e._v(" "),s("li",[e._v("有地址，对外")]),e._v(" "),s("li",[e._v("pod的地址死后新创建会和原来不同，为了外部和k8s通讯，引入service")]),e._v(" "),s("li",[e._v("创建pod之后，会在service里注册。\n"),s("img",{attrs:{src:"/docs/images/2020-06-30-10-19-12.png",alt:""}})])]),e._v(" "),s("p",[e._v("label : 我怎么知道service关联哪个pod呢？")]),e._v(" "),s("ul",[s("li",[e._v("用标签，表明pod属于nginx，还是php，还是mysql")]),e._v(" "),s("li",[e._v("用来给pod打标签的，service通过标签来关联一组pod")])]),e._v(" "),s("p",[e._v("Namespace：分离pod不让他们互相访问。业务隔离。")]),e._v(" "),s("ul",[s("li",[e._v("使用场景：为不同公司提供隔离的pod运行环境")]),e._v(" "),s("li",[e._v("使用场景：同一个公司，为测试，开发，生产分为三个名字空间，来隔离。")]),e._v(" "),s("li",[e._v("默认pod可以互相访问的。这就不安全。")])]),e._v(" "),s("h2",{attrs:{id:"_2，搭建部署k8s"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2，搭建部署k8s"}},[e._v("#")]),e._v(" 2，搭建部署k8s")]),e._v(" "),s("p",[s("img",{attrs:{src:"/docs/images/2020-06-30-10-35-15.png",alt:""}})]),e._v(" "),s("h3",{attrs:{id:"_2-1-计划"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-计划"}},[e._v("#")]),e._v(" 2.1 计划")]),e._v(" "),s("ul",[s("li",[e._v("用"),s("strong",[e._v("离线")]),e._v("部署：下载所有安装包，然后不用上网，公司内部部署")]),e._v(" "),s("li",[s("strong",[e._v("生产环境")]),e._v("：不适用单master，而是"),s("strong",[e._v("多master")]),e._v("集群（HA）master3台，node多多益善。node不直接与master通讯，而是通过LB。"),s("strong",[e._v("LB也是两个")]),e._v("，防止故障。etcd也需要有三台节点。 master,etcd的台数必须是"),s("strong",[e._v("单数")]),e._v("。\n"),s("img",{attrs:{src:"/docs/images/2020-06-30-10-44-00.png",alt:""}})]),e._v(" "),s("li",[e._v("学习环境：没用LB。单个master，三个etcd。\n"),s("img",{attrs:{src:"/docs/images/2020-06-30-10-43-13.png",alt:""}})])]),e._v(" "),s("p",[e._v("实验环境最终按生产环境来规划，需要六台虚拟机\n"),s("img",{attrs:{src:"/docs/images/2020-06-30-10-48-04.png",alt:""}}),e._v(" "),s("img",{attrs:{src:"/docs/images/2020-06-30-10-49-45.png",alt:""}})]),e._v(" "),s("ul",[s("li",[e._v("实验环境规划\n"),s("ul",[s("li",[e._v("2G内存，2核CPU")]),e._v(" "),s("li",[e._v("6台虚拟机")])])])]),e._v(" "),s("h3",{attrs:{id:"_2-2-三种部署方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-三种部署方式"}},[e._v("#")]),e._v(" 2.2 三种部署方式")]),e._v(" "),s("p",[s("img",{attrs:{src:"/docs/images/2020-06-30-10-51-25.png",alt:""}})]),e._v(" "),s("p",[e._v("采用二进制的方式。能更了解各个组件。")]),e._v(" "),s("h3",{attrs:{id:"_2-3-部署单master集群。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-部署单master集群。"}},[e._v("#")]),e._v(" 2.3 部署单master集群。")]),e._v(" "),s("h4",{attrs:{id:"一、集群规划："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、集群规划："}},[e._v("#")]),e._v(" 一、集群规划：")]),e._v(" "),s("p",[e._v("master\n主机名：centos1，192.168.3.105\nworker\n主机名：centos2，192.168.3.106\n主机名：centos3，192.168.3.107\nk8s版本： 1.16\n安装方式：离线二进制\n操作系统版本：centos7.1")]),e._v(" "),s("h4",{attrs:{id:"二、所有服务器都初始化（先后顺序无所为）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、所有服务器都初始化（先后顺序无所为）"}},[e._v("#")]),e._v(" 二、所有服务器都初始化（先后顺序无所为）")]),e._v(" "),s("p",[e._v("1，关闭防火墙\n2，关闭selinux\n3，配置主机名\n"),s("code",[e._v("hostnamectl set-hostname xxxxx")]),e._v("\n4，名称解析\n/etc/hosts配置三个虚拟机的名字\n5，配置时间同步\n"),s("strong",[e._v("master：")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("  yum install chrony -y\n  vim /etc/chrony.config\n  修改三项\n     server 127.127.1.0  iburst\n     allow 192.168.3.0/24\n     local stratum 10 \n  systemctl start chronyd\n  systemctl enable chronyd\n  ss -unl | grep 123\n")])])]),s("p",[s("strong",[e._v("node1，node2")]),e._v(":")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("  yum install chrony -y\n  vim /etc/chrony.config\n  修改一项\n     server 192.168.3.105 iburst\n  systemctl restart chronyd\n  systemctl enable chronyd\n")])])]),s("p",[e._v("确认一下\n"),s("code",[e._v("chronyc sources")])]),e._v(" "),s("p",[e._v("6，关闭交换分区")]),e._v(" "),s("h5",{attrs:{id:"插入知识点：-证书用来组件之间通讯https"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#插入知识点：-证书用来组件之间通讯https"}},[e._v("#")]),e._v(" 插入知识点： "),s("strong",[e._v("证书用来组件之间通讯https")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" **加密形式：**\n   + 对称加密：加密解密同一个密钥（非常不安全）\n   + 非对称加密：公私钥，公钥加密，私钥解密。私钥保存在淘宝服务器那，公钥下载到自己那。然后自己发给淘宝的都是用公钥加密的，淘宝能解开。\n   + 单向加密：只能加密不能解密。MD5，只能校验文件被篡改过。\n\n ![](/docs/images/2020-06-30-11-19-49.png)\n + 谁颁发的\n + 发给谁的\n + 加密算法\n + 过期日\n\n你们公司做的电商网站。客户访问你用https。你网站的ssl证书哪来的？\n1. 从网络第三方机构购买,通常用外部用户来访问\n2. 自己给自己发证书，外部客户访问时会出现不受信任的。\n\n证书办法机构（CA）\n\n自建CA\n  openssl\n  cfssl（推荐，因为更简单）\n\n通过这个CA来颁发证书\n\n通过证书来进行https通讯\n")])])]),s("h4",{attrs:{id:"三，部署etcd"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三，部署etcd"}},[e._v("#")]),e._v(" 三，部署ETCD")]),e._v(" "),s("p",[e._v("etcd需要三台虚拟机，给etc的颁发证书。master基于https访问etcd\n"),s("img",{attrs:{src:"/docs/images/2020-06-30-11-33-42.png",alt:""}})]),e._v(" "),s("ol",[s("li",[e._v("解压缩/root/tar TLS.tar.gz\nTLS/")])]),e._v(" "),s("ul",[s("li",[e._v("etcd")]),e._v(" "),s("li",[e._v("k8s")]),e._v(" "),s("li",[e._v("sh cfssl.sh //执行该脚本")])]),e._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[e._v("填写表单--写名etcd所在节点的IP")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('cd TLS/etcd // 为ETCD颁发证书\nvim server-scr.json\n 当前证书是发给哪个主机的。下面IP写etcd虚拟机的IP\n   hosts： \n     "192.168.3.108",\n     "192.168.3.109",\n     "192.168.3.110"\n   别的不用该\n')])])]),s("ol",{attrs:{start:"3"}},[s("li",[e._v("创建CA(master→etcd) 给tecd颁发证书\n"),s("code",[e._v("TLS/etcd/generate_etcd_cert.sh")])])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" 生成\n ca.pem\n ca-key.pem\n (调用server-scr.json颁发证书)\n server-key.pem\n server.pem\n")])])]),s("p",[e._v("4）在虚拟机上安装etcd\n/root/k8sFiles/etcd.tar.gz")]),e._v(" "),s("ul",[s("li",[s("p",[s("code",[e._v("tar xvf etcd.tar.gz")]),e._v("\n拷贝过来就能用。\n注意：解压后生成一个文件和目录usr/lib/systemd/system/。")]),e._v(" "),s("ul",[s("li",[e._v("etcd.service //执行/opt/etcd/bin/etcd")]),e._v(" "),s("li",[e._v("etcd/"),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("* 把etcd.service放到/usr/lib/systemd/system/\n* 把etcd/放到/opt下\n")])])]),s("blockquote",[s("p",[e._v("centos7 systemd 服务管理脚本在哪个目录？\n/usr/lib/systemd/system/")])])])])]),e._v(" "),s("li",[s("p",[s("code",[e._v("vim /opt/etcd/cfg/etcd.conf")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("**[Memeber]**\n+ ETCD_NAME #ETCD的唯一名字,三个节点分别不同即可Cluster.\n+ ETCD_DATA_DIR #数据库的位置\n+ ETCD_LISTEN_PEER_URLS #ETCD接收其它ETCD通讯的端口\n+ ETCD_LISTEN_CLIENT_URLS #ETCD接收master通讯的端口\n\n**[Cluster]**\n+ ETCD_INITIAL_ADVERTISE_PEER_URLS\n+ ETCD_ADVERTISE_CLIENT_URLS\n+ ETCD_INITIAL_CLUSTER\n")])])]),s("p",[e._v("etcd1的虚拟机上的配置:\n"),s("img",{attrs:{src:"/docs/images/2020-06-30-11-57-36.png",alt:""}}),e._v("\netcd2,etcd3,注意修改ip")])]),e._v(" "),s("li",[s("p",[e._v("etcd1上证书文件拷贝到etcd/ssl")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("cp /root/TLS/etcd/{ca,server,server-key}.pem /opt/etcd/ssl/\n")])])]),s("blockquote",[s("p",[s("strong",[e._v("补充知识")]),e._v(":\n"),s("strong",[e._v("alias")]),e._v('回车,看到系统命令的别名\ncp = cp -i\n如果不想使用别名的cp就"\\cp"')])])]),e._v(" "),s("li",[s("p",[e._v("etcd2,etcd3同etcd1,拷贝到etcd/ssl/")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("cp /root/TLS/etcd/{ca,server,server-key}.pem /opt/etcd/ssl/\n")])])])]),e._v(" "),s("li",[s("p",[e._v("etcd1的/opt/etcd拷贝到ectd2,etcd3")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("scp /opt/etcd root@etcd2:/opt/etcd  \n")])])]),s("p",[e._v("修改etcd2 /opt/etcd/etcd.conf\n(假设etcd2的ip是31.66,你根据你自己的实际ip改改)\n"),s("img",{attrs:{src:"/docs/images/2020-06-30-13-20-59.png",alt:""}})])]),e._v(" "),s("li",[s("p",[e._v("etcd1,etcd2,etcd3上都启动etcd\n"),s("code",[e._v("systemctl start etcd")])])]),e._v(" "),s("li",[s("p",[e._v("验证一下(在etcd三个节点哪个都行)\n"),s("img",{attrs:{src:"/docs/images/2020-06-30-13-22-34.png",alt:""}})])])]),e._v(" "),s("h4",{attrs:{id:"四-部署master服务-三个：apiserver、controller-manager、scheduler"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四-部署master服务-三个：apiserver、controller-manager、scheduler"}},[e._v("#")]),e._v(" 四,部署master服务 (三个：apiserver、controller-manager、scheduler)")]),e._v(" "),s("ol",{attrs:{start:"0"}},[s("li",[s("p",[e._v("给apiserver颁发证书\n谁使用apiserver就颁发给谁,颁发给node\n在apiserver上运行")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("cd /root/TLS/k8s\nsh ./generate_k8s_cert.sh\n")])])])]),e._v(" "),s("li",[s("p",[e._v("先进入master节点")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("cd /root/k8sFiles/\ntar xvf k8s-service.tar.gz\n+ kube-apiservice.service\n+ kube-controller-manager.service\n+ kube-scheduler.service\n+ /kubernetes/\nmv *.service /usr/lib/systemd/system/\nmv ./kubernetes/ /opt/\n\ncp /root/TLS/k8s/{ca*pem,server.pem,server-key.pem} /opt/kubernetes/ssl -rvf\n")])])])]),e._v(" "),s("li",[s("p",[s("strong",[e._v("master")]),e._v("上修改apiserver的配置信息\n/opt/kubernetes/cfg/"),s("strong",[e._v("kube-apiserver.conf")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("vim /opt/kubernetes/cfg/kube-apiserver.conf\n    --etcd-servers=https://etcd1 ip:port,https://etcd2 ip:port,https://etcd2 ip:port\n    --bind-address=apiserver ip //也就是master的ip\n    --advertise-address = 同上\n\n")])])])]),e._v(" "),s("li",[s("p",[e._v("不用修改master上kube-controller-manager.conf\n"),s("code",[e._v("cat /opt/kubernetes/cfg/kube-controller-manager.conf")])])]),e._v(" "),s("li",[s("p",[e._v("启动master服务")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("systemctl start kube-apiserver\nsystemctl start kube-scheduler\nsystemctl start kube-controller-manager\nsystemctl enable kube-apiserver\nsystemctl enable kube-scheduler\nsystemctl enable kube-controller-manager\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("做一个验证：\n+ ps aux | grep kube \n+ tail -f /opt/kubernetes/logs/kube-apiserver.\n")])])])]),e._v(" "),s("li",[s("p",[e._v("ls /opt/kubernetes/bin/kubectl")]),e._v(" "),s("ul",[s("li",[e._v("kubectl get pods")]),e._v(" "),s("li",[e._v("kubectl get pods -n kube-system")]),e._v(" "),s("li",[e._v("kubectl get cs")])])]),e._v(" "),s("li",[s("p",[e._v("配置tls 基于bootstrap\n"),s("img",{attrs:{src:"/docs/images/2020-06-30-13-47-27.png",alt:""}})]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("cat /opt/kubernetes/cfg/token.csv\n")])])]),s("p",[s("img",{attrs:{src:"/docs/images/2020-06-30-13-51-25.png",alt:""}})]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("kubectl create clusterrolebinding kubelet-bootstrap \\\n--clusterrole=system:node-bootstrapper \\\n--user=kubelet-bootstrap\n结果：\nclusterrolebinding.rbac.authorization.k8s.io/kubelet-bootstrap created.\n")])])])])]),e._v(" "),s("p",[e._v("这样部署master就彻底完成了。")]),e._v(" "),s("h4",{attrs:{id:"五，部署node（docker、kubelet、kube-proxy）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五，部署node（docker、kubelet、kube-proxy）"}},[e._v("#")]),e._v(" 五，部署Node（docker、kubelet、kube-proxy）")]),e._v(" "),s("h5",{attrs:{id:"_1-安装docker"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-安装docker"}},[e._v("#")]),e._v(" 1. 安装docker")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("cd /root/k8sFiles/\n有三个文件：docker-18.9.0.tgz , daemon.json,docker.service\n\n\ntar xv docker-18.09.6.tgz\nmv docker.service /usr/lib/systemd/system\ncp daemon.json /etc/docker\nmv docker/* /bin/\nsystemctl start docker\nsystemctl enable docker\n")])])]),s("p",[e._v("注意支持docker版本， k8s支持的docker版本是有限制的。")]),e._v(" "),s("h5",{attrs:{id:"_2-安装kubelet（接收master发来的指令）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-安装kubelet（接收master发来的指令）"}},[e._v("#")]),e._v(" 2. 安装kubelet（接收master发来的指令）")]),e._v(" "),s("p",[e._v("安装kube-proxy（为node上的容器配置网络）\nmaster:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("scp k8s-node.tar.gz root@node1:/root/\nscp k8s-node.tar.gz root@node2:/root/\n")])])]),s("p",[e._v("node1:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("tar xvf k8s-node.tar.gz\nmv kubelet.service kube-proxy.service /user/lib/systemd/system/\nmv kubernetes /opt/\n")])])]),s("h5",{attrs:{id:"_3-修改配置文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-修改配置文件"}},[e._v("#")]),e._v(" 3. 修改配置文件")]),e._v(" "),s("p",[e._v("node1:")]),e._v(" "),s("ul",[s("li",[e._v("vim /opt/kubernets/cfg/kube-proxy.kubeconfig")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("    server: 就是master的ip\n    别的不用动\n")])])]),s("ul",[s("li",[e._v("vi /opt/kubernets/cfg/kube-proxy-config.yml")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("    hostaname = 当前节点的主机名(node)\n")])])]),s("blockquote",[s("p",[e._v("vi /opt/kubernets/cfg/kube-proxy.conf\n不需要改\nvi /opt/kubernets/cfg/kubelet-config.yml\n不需要改")])]),e._v(" "),s("ul",[s("li",[s("p",[e._v("vi /opt/kubernets/cfg/kubelete.conf\n"),s("code",[e._v("hostname-override = node1")]),e._v(" //当前node的名称")])]),e._v(" "),s("li",[s("p",[e._v("vi /opt/kubernets/cfg/bootstrap.kubeconfig\n"),s("code",[e._v("server=")]),e._v("master ip")])])]),e._v(" "),s("h5",{attrs:{id:"_4-把master上生成的apiserver证书，拷贝到node1，node2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-把master上生成的apiserver证书，拷贝到node1，node2"}},[e._v("#")]),e._v(" 4. 把master上生成的apiserver证书，拷贝到node1，node2")]),e._v(" "),s("h6",{attrs:{id:"_4-1-master1→node1"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-master1→node1"}},[e._v("#")]),e._v(" 4.1 "),s("strong",[e._v("master1→node1")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("cd /opt/kubernetes/ssl 或 /root/TLS/k8s/\nscp ca.pem kube-proxy.pem kube-proxy-key.pem root@node1:/opt/kubenetes/ssl/\n")])])]),s("h6",{attrs:{id:"_4-2-node1：-启动kubelet和kube-proxy"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-node1：-启动kubelet和kube-proxy"}},[e._v("#")]),e._v(" 4.2 "),s("strong",[e._v("node1：")]),e._v(" 启动kubelet和kube-proxy")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("systemctl start kube-proxy\nsystemctl enable kube-proxy\nsystemctl start kubelet\nsystemctl enable kubelet\n\ntail -f /opt/kubernetes/logs/kubelete.INFO //阻塞在等待证书\n")])])]),s("p",[s("img",{attrs:{src:"/docs/images/2020-06-30-15-13-40.png",alt:""}}),e._v("\nERROR没找到key和证书！！")]),e._v(" "),s("h6",{attrs:{id:"_4-3-master1为node1颁发证书"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-master1为node1颁发证书"}},[e._v("#")]),e._v(" 4.3 master1为node1颁发证书")]),e._v(" "),s("p",[e._v("master:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("kubectl get csr //node向master申请请求\n//给node1颁发证书\nkubectl certificated approve nodepcsr-xxxxx(上一个命令取得的Name)\n")])])]),s("p",[e._v("master:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("kubectl get node //就能看到node1了<not Ready>\n")])])]),s("p",[e._v("node1:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("tail -f /opt/kubernetes/logs/kubelete.INFO正常完成\n")])])]),s("h5",{attrs:{id:"_4-4-node2的设置；4-1-4-3再在node2做一遍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-node2的设置；4-1-4-3再在node2做一遍"}},[e._v("#")]),e._v(" 4.4 node2的设置；4.1~4.3再在node2做一遍")]),e._v(" "),s("ul",[s("li",[e._v("[Problem1：]\n"),s("img",{attrs:{src:"/docs/images/2020-06-30-15-40-40.png",alt:""}}),e._v(" "),s("blockquote",[s("p",[e._v("Unable to update cni config: no networks found in /etc/cni.net.d\n【原因：】没有安装网络插件。\n【解决：】")])])])]),e._v(" "),s("h5",{attrs:{id:"_5-安装网络插件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-安装网络插件"}},[e._v("#")]),e._v(" 5 安装网络插件")]),e._v(" "),s("ul",[s("li",[s("p",[e._v('确认启动cni插件\nnode1、node2：\nvim /opt/kubenets/cfg/kubelete.conf\ngrep "cni" opt/kubenets/cfg/kubelete.conf //能看到一行--network-plugin=cni')])]),e._v(" "),s("li",[s("p",[e._v("如果已经启动，那就安装\nnode1、node2：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("mkdir -pv /opt/cni/bin  /etc/cni/net.d\n离线安装 /root/k8sFiles/cni-plugin-linux-amd64-v0.8.2.tgz\ntar xvf k8s-node.tar.gz\ntar xvf cni-plugin-linux-amd64-v0.8.2.tgz -C /opt/cni/bin\n")])])])]),e._v(" "),s("li",[s("p",[e._v("在master上执行yaml脚本实现worker安装和启动网络插件功能\nmaster：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("kubectl apply -f kube-flannel.yaml //下载镜像启动容器\n//可以把镜像下来，传到阿里的镜像库里。这样比较快\n//会在node1，node2下载镜像启动容器，这样网络就配置好了。\n// ※，网络太慢会导致超时！！！！！！\n\nkubectl get pods -n kube-system //名字空间 flaneel是Running\nkubectl get nodes //node1，node2会变成Ready\n")])])])])]),e._v(" "),s("h5",{attrs:{id:"_6，授权apiserver可以访问kubelete"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6，授权apiserver可以访问kubelete"}},[e._v("#")]),e._v(" 6，授权apiserver可以访问kubelete")]),e._v(" "),s("ul",[s("li",[e._v("master:\n"),s("code",[e._v("kubectl apply -f apiserver-to-kubelete-rbac.yaml")])])]),e._v(" "),s("p",[e._v("目前为止，这个集群可以用了。")]),e._v(" "),s("hr"),e._v(" "),s("h4",{attrs:{id:"六，-用一下这个1master，2node集群。-单master"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#六，-用一下这个1master，2node集群。-单master"}},[e._v("#")]),e._v(" 六， 用一下这个1master，2node集群。(单master)")]),e._v(" "),s("p",[e._v("nginx-1.8.tar.gz nginx-1.7.9.tar.gz\n版本更新")]),e._v(" "),s("p",[e._v("先用1.7.9后面实现滚动更新。")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("【Q：】怎么导入docker image？\n【A：】\nmaster:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("docker image ls\ndocker save imageId>./nginx-1.7.9.tar.gz\nscp ./nginx-1.7.9.tar.gz root@node1:/root/\n")])])]),s("p",[e._v("node1:\n"),s("code",[e._v("docker load -i nginx-1.7.9.tar.gz")]),e._v(" //很快吗？1秒")])]),e._v(" "),s("li",[s("p",[e._v("【Q：】怎么加速docker？\n【A:】加速 /etc/docker/daemon.json\n修改registry-mirror，增加阿里云加速镜像库\nsystemctl daemon-reload\nsystemctl restart docker")])]),e._v(" "),s("li",[s("p",[e._v("启动nginx容器\n修改node1，node2的docker配置文件，")])]),e._v(" "),s("li",[s("p",[e._v("【Q：】如何在阿里上申请自己的加速镜像？\n【A：】")])])]),e._v(" "),s("hr"),e._v(" "),s("h2",{attrs:{id:"启动nginx练习："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#启动nginx练习："}},[e._v("#")]),e._v(" 启动nginx练习：")]),e._v(" "),s("p",[s("strong",[e._v("master")]),e._v(":\n"),s("code",[e._v("kubectl create deployment myweb --image=nginx:1.8")]),e._v(" // 通过deployment创建和管理nginx容器\n"),s("code",[e._v("kubectl get deployment")]),e._v(" //查看deployment。myweb ready=0/1等一会就1/1\n"),s("code",[e._v("kubectl get pods")]),e._v(" //查看pod状态 myweb pod Running\n"),s("code",[e._v("kubectl create deployment myweb1 --image=nginx:1.6")]),e._v(" "),s("code",[e._v("kubectl describe pod podName")]),e._v(" // 能看到具体每步情况，用来查看错误内容。排除故障用。")]),e._v(" "),s("p",[e._v("【Q：】myweb工作在Node1，还是Node2？\n"),s("code",[e._v("kubectl describe pod podName")]),e._v(" // 去看Node：=node2（随机）")]),e._v(" "),s("p",[e._v("【Q：】master启动一个nginx，")]),e._v(" "),s("p",[s("code",[e._v("kubectl create deployment newweb --image=nginx:1.8")]),e._v(" "),s("code",[e._v("kubectl get pods")]),e._v(" "),s("code",[e._v("kubectl describe pod podName")]),e._v(" // 看Node=Node1（随机）")]),e._v(" "),s("p",[e._v("【Q：】几个nginx，如何访问nginx网址呢？newweb，myweb\n【A：】把容器的nginx的端口，映射到物理机（node）的端口。端口转发。\n"),s("strong",[e._v("master")]),e._v(":\n"),s("code",[e._v("kubectl expose deployment myweb --port=80 --type=NodePort")]),e._v("\n容器的80暴露到物理机的随机端口\n"),s("code",[e._v("kubectl get svc")]),e._v(" //service。可看到物理机的哪个端口")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("访问 http://node1:刚刚的随机端口 //任意一个节点口能够访问\n访问 http://node2:刚刚的随机端口 //任意一个节点口能够访问\n")])])]),s("hr"),e._v(" "),s("h2",{attrs:{id:"dashboard插件-配置web界面"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dashboard插件-配置web界面"}},[e._v("#")]),e._v(" dashboard插件 配置web界面")]),e._v(" "),s("ol",[s("li",[s("p",[e._v("kubernetes dashboard //官方")])]),e._v(" "),s("li",[s("p",[e._v("kuboard //第三方（更好用）")]),e._v(" "),s("p",[e._v("都是辅助，功能都不完善")])])]),e._v(" "),s("p",[e._v("1.kubernetes dashboard\n安装，\n官方下载一个yml文件 dashborad.yaml\n"),s("code",[e._v("kubectl apply -f dashborad.yaml")]),e._v("\n这就安装完了，可以会慢。\n"),s("code",[e._v("kubectl get pods -n kubernetes-dashboard")]),e._v(" "),s("code",[e._v("kubectl get svc -n kubernetes-dashborad //名字空间")]),e._v("\n能看到端口\n"),s("code",[e._v("默认只能是https。https://集群任意节点：上一个命令的随机端口")]),e._v("\n火狐才行")]),e._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[e._v("kuboard")])]),e._v(" "),s("ul",[s("li",[s("p",[e._v("安装；\n安装包上传kuboard-1.tar.gz 传到master或node1 //docker镜像\nnode1,node2:\n"),s("code",[e._v("docker load -i kuboard-1.tar.gz")])]),e._v(" "),s("p",[e._v("master:\n"),s("code",[e._v("vi start_kuboard.yaml")]),e._v(" "),s("code",[e._v("nodeName:node1 //希望执行在哪个节点")]),e._v(" "),s("code",[e._v("kubectl apply -f start_kuboard.yaml")]),e._v(" "),s("code",[e._v("kubectl get pods -n kube-system")]),e._v(" //kuboard在Running")])]),e._v(" "),s("li",[s("p",[e._v("查看\n"),s("code",[e._v("kubectl get svc -n kube-system")]),e._v("\n//kuboard 32567端口\nhttps://node1:32567 //让输入token\n//生成token\nkubectl -n kube-system describe secret default| awk '$1==\"token:\"{print $2}'")])]),e._v(" "),s("li",[s("p",[e._v("通过它能自动生成yml文件，提高效率")])])]),e._v(" "),s("h3",{attrs:{id:"名称解析dns组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#名称解析dns组件"}},[e._v("#")]),e._v(" 名称解析DNS组件")]),e._v(" "),s("p",[e._v("CoreDNS//K8s集群的DNS组件")]),e._v(" "),s("p",[e._v("【Q】为什么要使用这个组件？\n【A】pod互相访问，用ip但是ip可能会变，灾难恢复重建。这就需要名称固定，ip随便变，变了记录到dns服务里。这样程序就不用写ip改来改去了，直接写name即可。")]),e._v(" "),s("p",[e._v("master：")]),e._v(" "),s("p",[e._v("cat coredns.yaml //也可以到官方下载\ncoredns:1.2.2\n"),s("code",[e._v("kubectl apply -f coredns.yaml")]),e._v(" "),s("code",[e._v("kubectl get pods -n kube-system | grep coredns")]),e._v(" //这样dns就完事\n※ "),s("strong",[e._v("用法以后详细讲")])]),e._v(" "),s("h3",{attrs:{id:"远程管理k8s集群-目标：让node1-node2也能执行kubectl"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#远程管理k8s集群-目标：让node1-node2也能执行kubectl"}},[e._v("#")]),e._v(" 远程管理k8s集群 ,目标：让node1,node2也能执行kubectl")]),e._v(" "),s("p",[e._v("默认：k8s仅仅可以在master节点管理，例如kubectl get pods只能在master上执行")]),e._v(" "),s("p",[e._v("master\n"),s("code",[e._v("scp /bin/kubectl root@node2:/bin")]),e._v("\nnode2\n"),s("code",[e._v("kubectl get nodes")]),e._v("\n//connect to the server localhost:80 refused!")]),e._v(" "),s("p",[e._v("结论：node上有kubectl也不行，管理不了集群。\n【Q】node如何实现能管理集群呢？\n【A】")]),e._v(" "),s("ol",[s("li",[s("p",[e._v("生成管理员证书\nmaster:\n/root/TLS/k8s/admin-csr.json\n除了hosts没有任何需要改")])]),e._v(" "),s("li",[s("p",[e._v("/颁发admin证书")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes admin-csr.json | cfssljson -bareadmin\n")])])]),s("p",[e._v("//"),s("strong",[e._v("生成 admin.pem")]),e._v("\n创建kubeconfig文件")])]),e._v(" "),s("li",[s("p",[e._v("设置集群参数")])])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("      kubectl config set-cluster kubernetes \\\n      --server=https://192.168.31.63:6443 \\  //HA 写VIP 60？\n      --certificates-authority=ca.pem \\\n      --embed-certs=true \\\n      --kubeconfig=config\n")])])]),s("ol",{attrs:{start:"4"}},[s("li",[e._v("设置客户端认证参数")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("kubectl config set-credentials cluster-admin \\\n --certificate-authority=ca.pem \\\n --embed-certs=true \\\n --client-key=admin-key.pem \\\n --client-certificate=admin.pem \\\n --kubeconfig=config\n")])])]),s("ol",{attrs:{start:"5"}},[s("li",[e._v("设置上下文")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("   kubectl config set-context default \\\n    --cluster=kubernetes \\\n    --user=cluster-admin \\\n    --kubeconfig=config\n")])])]),s("ol",{attrs:{start:"6"}},[s("li",[s("p",[e._v("设置默认上下文\n"),s("code",[e._v("kubectl config use-context default --kubeconfig=config")]),e._v("\n// "),s("strong",[e._v("即生成config文件")])])]),e._v(" "),s("li",[s("p",[e._v("将kubeconfig文件发送到worker各节点\nmaster:\n"),s("code",[e._v("scp config root@node1:/root/")]),e._v(" "),s("code",[e._v("scp config root@node1:/root/")])])]),e._v(" "),s("li",[s("p",[e._v("worker节点基于config实现kubectl\nnode2:\n/root/config文件已经有了\nkubectl get nodes --kubeconfig=config\n//这样node2就能用kubectl了。")])]),e._v(" "),s("li",[s("p",[e._v("改进\nnode2:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("mkdir ~/.kube\nmv /root/config ~/.kubu\nkubectl get nodes //就不需要加 --kubeconfig=config了。\n\n\n")])])])])]),e._v(" "),s("h2",{attrs:{id:"平时运维的常用操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#平时运维的常用操作"}},[e._v("#")]),e._v(" 平时运维的常用操作")]),e._v(" "),s("ul",[s("li",[e._v("DevOps\n"),s("ul",[s("li",[e._v("python")]),e._v(" "),s("li",[e._v("docker+k8s")]),e._v(" "),s("li",[e._v("git+jenkins")])])]),e._v(" "),s("li",[e._v("k8s\n"),s("ul",[s("li",[e._v("docker")]),e._v(" "),s("li",[e._v("k8s >= docker三剑客（compose,swarm,docker-machine）")])])]),e._v(" "),s("li",[e._v("lamp\n"),s("ul",[s("li",[e._v("apache")]),e._v(" "),s("li",[e._v("mysql")]),e._v(" "),s("li",[e._v("php")])])]),e._v(" "),s("li",[e._v("pod\n"),s("ul",[s("li",[e._v("一个或多个容器")])])]),e._v(" "),s("li",[e._v("pod控制器\n"),s("ul",[s("li",[e._v("用来控制和管理pod的数量和状态，pod是通过pod控制器来启动的")]),e._v(" "),s("li",[e._v("常用的有一系列")])])]),e._v(" "),s("li",[e._v("service\n"),s("ul",[s("li",[e._v("把pod提供一个同一的入口。前端直接访问的是service而不是pod")]),e._v(" "),s("li",[e._v("一个service只能包含一个label的pod？（nginx1，nginx2...nginxn）")]),e._v(" "),s("li",[e._v("service（php1，php2...phpn）")]),e._v(" "),s("li",[e._v("service（mysql1，mysql2...mysqln）")]),e._v(" "),s("li",[e._v("一类pod就得有一个service！！同一类，一样\n"),s("img",{attrs:{src:"/docs/images/2020-06-30-18-38-16.png",alt:""}})])])]),e._v(" "),s("li",[e._v("k8s怎么使用\n"),s("ul",[s("li",[e._v("就是学kubectl -h就是帮助")]),e._v(" "),s("li",[s("img",{attrs:{src:"/docs/images/2020-06-30-18-39-46.png",alt:""}})]),e._v(" "),s("li",[s("img",{attrs:{src:"/docs/images/2020-06-30-18-40-24.png",alt:""}})]),e._v(" "),s("li",[e._v("kubectl create -h //create 命令的帮助信息")]),e._v(" "),s("li",[s("strong",[e._v("创建deployment 指定pod数量，检查pod健康状态")]),e._v(" "),s("ul",[s("li",[s("strong",[e._v("创建方法1：（基于命令）")]),e._v(" "),s("ul",[s("li",[e._v("kubectl run nginx-dep1 --image=nginx:1.8 --replicas=1 //创建deployment")]),e._v(" "),s("li",[e._v("kubectl get deployment //看结果")]),e._v(" "),s("li",[e._v("kubectl get pods -o wide")]),e._v(" "),s("li",[e._v("free -m //保证还有空间")]),e._v(" "),s("li",[e._v("只生成一个副本的方法\n+** 创建方法2：（GUI）**")]),e._v(" "),s("li",[e._v("kuboard里GUI来创建")]),e._v(" "),s("li",[s("img",{attrs:{src:"/docs/images/2020-06-30-18-50-57.png",alt:""}})]),e._v(" "),s("li",[e._v("进入某个名字空间，例如默认名字空间")]),e._v(" "),s("li",[e._v("创建服务类型=deployment")]),e._v(" "),s("li",[e._v("镜像=nginx：1.8")]),e._v(" "),s("li",[e._v("副本数量=2")]),e._v(" "),s("li",[e._v("kubectl get deployment //")]),e._v(" "),s("li",[e._v("kubectl get pods")])])]),e._v(" "),s("li",[s("strong",[e._v("创建方法3：（基于yml）")]),e._v(" "),s("ul",[s("li",[e._v("写yml文件")]),e._v(" "),s("li",[e._v("master: cd /tmp/")]),e._v(" "),s("li",[e._v("vim nginx-dep.yml"),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" // yml必须得会,api版本更新很快\n apiVersion: apps/v1\n //创建类型\n kind: Deployment\n metadata:  //这是deployment的元数据\n   name: nginx-dep3\n   labels:  // 可以不止一个，标签名，标签值    \n     app: nginx  // 都随便写\n     type: webService // 随便写\n spec: //设置deployment的详细信息，创建出来pod的信息\n   replicas: 3 //3个副本\n   selector: //对pod过滤选择\n     matchLabels: //标签选择器\n       app: nginx //选择app=nginx的pod\n   template: //创建pod时基于什么模板\n     metadata: // pod的元数据这些模板都会加入到pod里\n       labels: //可以和deployment不一样\n         app:nginx\n         type:webService\n       spec: // pod的详细信息，每个pod跑的容器\n         containers://一个pod可能有多个容器\n         - name: nginx //容器名字\n           image: nginx:1.8 //镜像名字\n")])])])]),e._v(" "),s("li",[e._v("kubectl apply -f ngin-dep.yml  //创建好deployment了")]),e._v(" "),s("li",[e._v("kubectl get deployment")]),e._v(" "),s("li",[e._v("kubectl get pods")])])])])])])])]),e._v(" "),s("p",[e._v("https://www.bilibili.com/video/BV1mE411u7dR?p=18\n今天先到这")]),e._v(" "),s("p",[e._v("k8s日常：")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("先创建deployment")])]),e._v(" "),s("li",[s("p",[e._v("通过deployment创建pod")])]),e._v(" "),s("li",[s("p",[e._v("通过pod为用户提供业务")])]),e._v(" "),s("li",[s("p",[e._v("访问pod需要暴露pod的端口")])]),e._v(" "),s("li",[s("p",[e._v("发布服务")])]),e._v(" "),s("li",[s("p",[e._v("发现pod不够了需要做横向扩展")])]),e._v(" "),s("li",[s("p",[e._v("pod太多了需要删除")])]),e._v(" "),s("li",[s("p",[e._v("pod内容有更新的话需要做个动态更新")])]),e._v(" "),s("li",[s("p",[s("strong",[e._v("查看资源信息")])]),e._v(" "),s("ul",[s("li",[s("code",[e._v("kubectl get 资源类型 [-o wide] [-n 名称空间] [-A 所有名称空间]")]),e._v(" "),s("ul",[s("li",[e._v("资源类型：\n"),s("ul",[s("li",[e._v("service 或svc")]),e._v(" "),s("li",[e._v("pod")]),e._v(" "),s("li",[e._v("node")]),e._v(" "),s("li",[e._v("deployment")]),e._v(" "),s("li",[e._v("namespace 或ns")])])]),e._v(" "),s("li",[e._v("-n 显示某个名字空间里的资源")]),e._v(" "),s("li",[e._v("-A 显示所有名字空间里的资源")]),e._v(" "),s("li",[e._v("-h 获取帮助")])])]),e._v(" "),s("li",[s("code",[e._v("kubectl describe 资源类型 资源唯一Name")]),e._v(" //看更详细信息\n"),s("ul",[s("li",[e._v("资源类型：同上")]),e._v(" "),s("li",[e._v("-n 同上")])])]),e._v(" "),s("li",[s("code",[e._v("kubectl logs 资源唯一Name")]),e._v("//查看该资源日志\n"),s("ul",[s("li",[e._v("资源类型：同上")])])]),e._v(" "),s("li",[s("code",[e._v("kubectl run bx --image=busybox")])]),e._v(" "),s("li",[s("code",[e._v("kubectl exec -it podName /bin/sh")]),e._v(" "),s("ul",[s("li",[e._v("进入pod中的容器？")]),e._v(" "),s("li",[e._v("pod里有多个容器的话进入哪个？")])])])])]),e._v(" "),s("li",[s("p",[s("strong",[e._v("如何发布pod创建Service")])]),e._v(" "),s("ul",[s("li",[e._v("用service把pod服务发布出来（让外部访问）\n"),s("ul",[s("li",[e._v("参考deployment的yml")]),e._v(" "),s("li",[s("img",{attrs:{src:"/docs/images/2020-07-01-09-18-27.png",alt:""}})]),e._v(" "),s("li",[s("strong",[e._v("方法1：用yml的方法创建service（通过标签让两个yml关联）")])]),e._v(" "),s("li",[s("code",[e._v("vi ngx_svc.yml")]),e._v(" "),s("ul",[s("li",[e._v("apiVersion: v1  //注意每一类服务版本不一样")]),e._v(" "),s("li",[e._v("kind: Service")]),e._v(" "),s("li",[e._v("metadata:\n"),s("ul",[s("li",[e._v("name: ngx-svc")]),e._v(" "),s("li",[e._v("labels:")]),e._v(" "),s("li",[e._v("app: ngx")]),e._v(" "),s("li",[e._v("type: webService")])])]),e._v(" "),s("li",[e._v("spec: //service具体信息\n"),s("ul",[s("li",[e._v("selector: //管理的pod是哪个Label（去看deployment的yaml）里初始化了标签\n"),s("ul",[s("li",[e._v("matchLabels:\n"),s("ul",[s("li",[e._v("app: ngx")])])])])]),e._v(" "),s("li",[e._v("ports:\n"),s("ul",[s("li",[e._v("- name: nginx-ports\n"),s("ul",[s("li",[e._v("protocol: TCP")]),e._v(" "),s("li",[e._v("port: 80 // pod和service通讯端口")]),e._v(" "),s("li",[e._v("nodePort: 32002 //客户端访问的端口")]),e._v(" "),s("li",[e._v("targetPort:80 //暴露到宿主机node端口")])])]),e._v(" "),s("li",[e._v("type: NodePort //后面会讲")])])])])])])]),e._v(" "),s("li",[s("code",[e._v("kubectl apply -f ngx_svc.yml")]),e._v(" //发布pod（创建service）")]),e._v(" "),s("li",[s("code",[e._v("kubectl get svc")])]),e._v(" "),s("li",[s("code",[e._v("ss -tnl")]),e._v(" //查看端口")]),e._v(" "),s("li",[s("code",[e._v("curl https://node1IP:32002")]),e._v("   //ok 能看 任意一个worker节点")]),e._v(" "),s("li",[s("code",[e._v("curl https://node2IP:32002")]),e._v(" // OK 能看")]),e._v(" "),s("li",[s("strong",[e._v("方法2：通过kuboard实现pod发布")]),e._v(" "),s("ul",[s("li",[e._v("点名字空间，找到某pod")]),e._v(" "),s("li",[e._v("选择【编辑】")]),e._v(" "),s("li",[e._v("【访问Service】")]),e._v(" "),s("li",[e._v("选NodePort")]),e._v(" "),s("li",[e._v("填写【服务端口】【节点端口】【容器端口】")]),e._v(" "),s("li",[e._v("点添加，保存")]),e._v(" "),s("li",[e._v("自动生成的yaml，还可以预览yaml，点【完成】")])])])])])])]),e._v(" "),s("li",[s("p",[s("strong",[e._v("服务伸缩（Scaling）")])]),e._v(" "),s("ul",[s("li",[e._v("就是根据流量修改副本数量")]),e._v(" "),s("li",[e._v("方法1：yml\n"),s("ul",[s("li",[e._v("master上")]),e._v(" "),s("li",[e._v("创建deployment的yml文件，修改副本1→3")]),e._v(" "),s("li",[e._v("重新apply "),s("code",[e._v("kubectl apply -f ngx-dep.yml")])]),e._v(" "),s("li",[e._v("(现在是手工管理，还可以实现自动管理)")])])]),e._v(" "),s("li",[e._v("方法2：kuboard\n"),s("ul",[s("li",[e._v("略")])])])])]),e._v(" "),s("li",[s("p",[s("strong",[e._v("滚动更新")])]),e._v(" "),s("ul",[s("li",[e._v("容器依次更新，更新过程中始终提供服务")]),e._v(" "),s("li",[e._v("修改镜像的版本")]),e._v(" "),s("li",[e._v("方法1：deployment的yml\n"),s("ul",[s("li",[e._v("改ngx-dep.yml 里面nginx镜像的版本")]),e._v(" "),s("li",[e._v("重新apply "),s("code",[e._v("kubectl apply -f ngx-dep.yml")])]),e._v(" "),s("li",[e._v("这就是滚动更新去了，滚动更新是默认的")]),e._v(" "),s("li",[e._v("查看某写pods "),s("code",[e._v("watch kubectl get pods -l app=ngx")])]),e._v(" "),s("li",[e._v("查看pod的信息 "),s("code",[e._v("kubectl describe pod podName")])])])]),e._v(" "),s("li",[e._v("方法2：kuboard的GUI也可以")])])]),e._v(" "),s("li",[s("p",[s("strong",[e._v("工作当中运维工作流")])]),e._v(" "),s("ul",[s("li",[e._v("写Dockerfile制作镜像 （K8s的80%工作都是在制作镜像）")]),e._v(" "),s("li",[e._v("本地镜像habor")]),e._v(" "),s("li",[e._v("k8s从habor拉取镜像")])])])]),e._v(" "),s("hr"),e._v(" "),s("ul",[s("li",[s("strong",[e._v("镜像")]),e._v(" "),s("ul",[s("li",[e._v("基础镜像（CentOS） pull即可")]),e._v(" "),s("li",[e._v("运行环境镜像：在基础镜像上面（Java，Redis，Mysql）")]),e._v(" "),s("li",[e._v("项目镜像：在运行环境镜像上安装项目包")]),e._v(" "),s("li",[e._v("项目镜像放到k8s里面就可以发布业务了。")])])]),e._v(" "),s("li",[s("strong",[e._v("规划")]),e._v(" "),s("ul",[s("li",[e._v("k8s\n"),s("ul",[s("li",[e._v("master 192.168.31.63")]),e._v(" "),s("li",[e._v("worker 192.168.31.63,192.168.31.64,192.168.31.65")])])]),e._v(" "),s("li",[e._v("mysql\n"),s("ul",[s("li",[e._v("192.168.31.67")])])])])])]),e._v(" "),s("p",[e._v("2020-7-1 memo 看到这了\nhttps://www.bilibili.com/video/BV1mE411u7dR?p=22")]),e._v(" "),s("ul",[s("li",[s("strong",[e._v("常用命令")])]),e._v(" "),s("li",[s("strong",[e._v("部署Java程序")])]),e._v(" "),s("li",[s("strong",[e._v("深入讲pod")])]),e._v(" "),s("li",[s("strong",[e._v("深入讲service")]),e._v(" "),s("strong",[e._v("ingress")])]),e._v(" "),s("li",[s("strong",[e._v("k8s监控")])]),e._v(" "),s("li",[s("strong",[e._v("CICD实现")]),e._v(" "),s("ul",[s("li",[e._v("jenkins+gitlab+ansible+docker+harbor+maven+dockefile")]),e._v(" "),s("li",[e._v("项目打包docker→harbor")]),e._v(" "),s("li",[e._v("k8s从harbor取镜像")]),e._v(" "),s("li",[e._v("k8s自动发布")])])]),e._v(" "),s("li",[s("strong",[e._v("项目迁移到K8s")]),e._v(" "),s("ul",[s("li",[s("p",[s("strong",[e._v("迁移流程：")])]),e._v(" "),s("ol",[s("li",[s("p",[e._v("制作镜像 用Dockerfile  (主要工作)")]),e._v(" "),s("ul",[s("li",[s("strong",[e._v("运行镜像导入每个节点的docker")]),e._v(" "),s("ul",[s("li",[e._v("tomcat-base-image.tar.gz 在各个worker节点都传一下。")]),e._v(" "),s("li",[e._v("docker load -i tomcat-base-image.tar.gz 各个节点执行")])])]),e._v(" "),s("li",[s("strong",[e._v("master上放源码")]),e._v(" "),s("ul",[s("li",[e._v("java-demo.tar.gz → master节点")]),e._v(" "),s("li",[e._v("master： tar xvf  java-demo.tar.gz")]),e._v(" "),s("li",[e._v("master: tomcat-java-demo-master/\n"),s("ul",[s("li",[s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("      src/\n")])])])]),e._v(" "),s("li",[s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("      Dockerfile\n")])])])]),e._v(" "),s("li",[s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("      pom.xml \n")])])])]),e._v(" "),s("li",[s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("      db/\n")])])])]),e._v(" "),s("li",[s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("   修改src/main/resource/application.xml\n")])])]),s("ul",[s("li",[e._v("database url:jdbc:mysql://192.168.31.67:3306/mydb?")])])])])])])]),e._v(" "),s("li",[s("strong",[e._v("在31.67安装mysql并导入数据")]),e._v(" "),s("ul",[s("li",[e._v("db/tables_ly_mysql.sql")]),e._v(" "),s("li",[e._v("scp  tables_ly_mysql.sql  root@192.168.31.67：/oot")]),e._v(" "),s("li",[e._v("31.67 : yum install mariadb-server -y\n"),s("ul",[s("li",[e._v("systemctl start mariadb")]),e._v(" "),s("li",[e._v("systemctl enalbe mariadb")]),e._v(" "),s("li",[e._v("mysql")]),e._v(" "),s("li",[s("blockquote",[s("p",[e._v("create database  mydb;")])])]),e._v(" "),s("li",[s("blockquote",[s("p",[e._v("use mydb;")])])]),e._v(" "),s("li",[s("blockquote",[s("p",[e._v("show tables;")])])]),e._v(" "),s("li",[s("blockquote",[s("p",[e._v("source /root/table_ly_tomcat.sql;")])])])])]),e._v(" "),s("li",[e._v("master: yum install mysql\n"),s("ul",[s("li",[e._v("mysql -utest -p123 -h192.168.31.67 //登陆不了")])])]),e._v(" "),s("li",[e._v('31:67 : mysql //去授权给其它机器 （"test"@"%" →允许所有主机访问mysql）\n'),s("ul",[s("li",[s("blockquote",[s("p",[e._v('grant all on mydb.* to "test"@"192.168.31.%" identified by "123";')])])]),e._v(" "),s("li",[s("blockquote",[s("p",[e._v("fluash privileges;")])])])])]),e._v(" "),s("li",[e._v("master ：mysql -utest -p123 -h192.168.31.67 //登陆成功")])])]),e._v(" "),s("li",[s("strong",[e._v("编译源代码")]),e._v(" "),s("ul",[s("li",[e._v("master:\n"),s("ul",[s("li",[e._v("安装jdk、maven 。yum install maven java-1.8.0-openjdk -y")]),e._v(" "),s("li",[e._v("java version")]),e._v(" "),s("li",[e._v("cd tomcat-java-demo-master/")]),e._v(" "),s("li",[e._v("mvn clean package -Dmaven.test-skip=true //编译src，需要从网络下载很多资源")]),e._v(" "),s("li",[e._v("cat ./Dockerfile")]),e._v(" "),s("li",[s("img",{attrs:{src:"/docs/images/2020-07-02-09-36-05.png",alt:""}})]),e._v(" "),s("li",[e._v("docker build -t javapro . //构建镜像")]),e._v(" "),s("li",[e._v("docker image ls // "),s("strong",[e._v("master上构建了镜像")])]),e._v(" "),s("li",[e._v("docker save javapro>./javapro.tar.gz")]),e._v(" "),s("li",[e._v("scp ./javapro.tar.gz root@node1:/root/ //其它节点也复制了项目镜像，有harbor导入harbor就行了。不用这么麻烦")]),e._v(" "),s("li",[e._v("scp ./javapro.tar.gz root@node2:/root/")])])]),e._v(" "),s("li",[e._v("把项目镜像→所有其它节点 //以后用harbor\n"),s("ul",[s("li",[e._v("node1：\n"),s("ul",[s("li",[e._v("docker load -i javapro.tar.gz")])])]),e._v(" "),s("li",[e._v("node2：\n"),s("ul",[s("li",[e._v("同上")])])])])])])])])]),e._v(" "),s("li",[s("p",[e._v("运行镜像生成pod 用K8s")]),e._v(" "),s("ul",[s("li",[e._v("启动项目镜像pod")]),e._v(" "),s("li",[e._v("kubectl create deployment javapro1 --image=javapro")]),e._v(" "),s("li",[e._v("或快速启动yaml文件")]),e._v(" "),s("li",[e._v("kubectl create deplyment javapro1 --image=javapro --dry-run -o yaml//不是真正执行,只生成yaml")]),e._v(" "),s("li",[e._v("生成 .javapro.yaml，在它基础上改就行\n"),s("ul",[s("li",[e._v("修改副本数 replicas: 2")]),e._v(" "),s("li",[e._v("修改镜像拉取策略 imagePullPolicy: Never //不去远程拉取镜像")])])]),e._v(" "),s("li",[e._v("kubectl apply -f javapro.yaml")]),e._v(" "),s("li",[e._v("kubectl get deployment")]),e._v(" "),s("li",[e._v("kubectl get pods -o wide")])])]),e._v(" "),s("li",[s("p",[e._v("暴露应用（让集群内部访问）")]),e._v(" "),s("ul",[s("li",[e._v("暴露mysql给php用")]),e._v(" "),s("li",[e._v("暴露php给nginx用")]),e._v(" "),s("li",[e._v("暴露nginx给客户用")]),e._v(" "),s("li",[e._v("kubectl expose deployment javapro1 --port=80 --type=NodePort --targetPort=8080 --dry-run -o yaml>javasvc.yaml")]),e._v(" "),s("li",[s("img",{attrs:{src:"/docs/images/2020-07-02-10-02-08.png",alt:""}})]),e._v(" "),s("li",[e._v("kubectl get svc //看到暴露给client的端口，然后在任意worker节点上都可以访问到该端口")]),e._v(" "),s("li",[e._v("https://192.168.1.66:31043")])])]),e._v(" "),s("li",[s("p",[e._v("对外发布服务（让集群外部用户访问）")])]),e._v(" "),s("li",[s("p",[e._v("监控和日志收集")]),e._v(" "),s("ul",[s("li",[s("img",{attrs:{src:"/docs/images/2020-07-01-15-31-35.png",alt:""}})])])])])]),e._v(" "),s("li",[s("p",[s("strong",[e._v("实现迁移java项目")])]),e._v(" "),s("ul",[s("li",[e._v("k8s需要的开发交付镜像（容器）而不是源代码")]),e._v(" "),s("li",[s("img",{attrs:{src:"/docs/images/2020-07-01-15-39-29.png",alt:""}})]),e._v(" "),s("li",[s("img",{attrs:{src:"/docs/images/2020-07-01-15-39-58.png",alt:""}})])])])])])])])}),[],!1,null,null,null);t.default=v.exports}}]);