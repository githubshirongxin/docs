(window.webpackJsonp=window.webpackJsonp||[]).push([[180],{663:function(s,e,a){"use strict";a.r(e);var n=a(59),t=Object(n.a)({},(function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"typescript-的原始类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#typescript-的原始类型"}},[s._v("#")]),s._v(" Typescript 的原始类型")]),s._v(" "),a("p",[s._v("如果你了解 JavaScript 的基础类型，那么这一节你会很好理解。")]),s._v(" "),a("p",[s._v("TypeScript的原始类型包括: boolean、number、string、void、undefined、null、symbol、bigint。")]),s._v(" "),a("h2",{attrs:{id:"布尔类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#布尔类型"}},[s._v("#")]),s._v(" 布尔类型")]),s._v(" "),a("p",[s._v("我们用 "),a("code",[s._v("boolean")]),s._v(" 来表示布尔类型，注意开头是小写的，如果你在Typescript文件中写成 "),a("code",[s._v("Boolean")]),s._v(" 那代表是 JavaScript 中的布尔对象，这是新手常犯的错误。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const isLoading: boolean = false\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("blockquote",[a("p",[s._v("这里需要提示一下，很多 TypeScript 的原始类型比如 boolean、number、string等等，在JavaScript中都有类似的关键字 Boolean、Number、String，后者是 JavaScript 的构造函数，比如我们用 Number 用于数字类型转化或者构造 Number 对象用的，而 TypeScript 中的 number 类型仅仅是表示类型，两者完全不同。")])]),s._v(" "),a("h2",{attrs:{id:"数字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数字"}},[s._v("#")]),s._v(" 数字")]),s._v(" "),a("p",[s._v("JavaScript中的二进制、十进制、十六进制等数都可以用 "),a("code",[s._v("number")]),s._v(" 类型表示。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const decLiteral: number = 6\nconst hexLiteral: number = 0xf00d\nconst binaryLiteral: number = 0b1010\nconst octalLiteral: number = 0o744\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h2",{attrs:{id:"字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串"}},[s._v("#")]),s._v(" 字符串")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const book: string = '深入浅出 Typescript'\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h2",{attrs:{id:"空值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#空值"}},[s._v("#")]),s._v(" 空值")]),s._v(" "),a("p",[s._v("表示没有任何类型，当一个函数没有返回值时，你通常会见到其返回值类型是 void：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('function warnUser(): void {\n    alert("This is my warning message");\n}\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("实际上只有"),a("code",[s._v("null")]),s._v("和"),a("code",[s._v("undefined")]),s._v("可以赋给"),a("code",[s._v("void")]),s._v(":")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const a: void = undefined\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h2",{attrs:{id:"null-和-undefined"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#null-和-undefined"}},[s._v("#")]),s._v(" Null 和 Undefined")]),s._v(" "),a("p",[s._v("TypeScript 里，undefined 和 null 两者各自有自己的类型分别叫做 undefined 和 null，和void相似，它们的本身的类型用处不是很大：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let u: undefined = undefined;\nlet n: null = null;\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("默认情况下 null 和 undefined 是所有类型的子类型，就是说你可以把 null 和 undefined 赋值给 number 类型的变量。")]),s._v(" "),a("p",[s._v("但是在正式项目中一般都是开启 "),a("code",[s._v("--strictNullChecks")]),s._v(" 检测的，即 null 和 undefined 只能赋值给 void 和它们各自，可以规避非常多的问题。")]),s._v(" "),a("h2",{attrs:{id:"symbol"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#symbol"}},[s._v("#")]),s._v(" Symbol")]),s._v(" "),a("p",[s._v("Symbol 是在ES2015之后成为新的原始类型,它通过 "),a("code",[s._v("Symbol")]),s._v(" 构造函数创建:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const sym1 = Symbol('key1');\nconst sym2 = Symbol('key2');\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("而且 Symbol 的值是唯一不变的：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Symbol('key1') === Symbol('key1') // false\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h2",{attrs:{id:"bigint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bigint"}},[s._v("#")]),s._v(" BigInt")]),s._v(" "),a("p",[a("code",[s._v("BigInt")]),s._v(" 类型在 TypeScript3.2 版本被内置，使用 "),a("code",[s._v("BigInt")]),s._v(" 可以安全地存储和操作大整数，即使这个数已经超出了JavaScript构造函数 "),a("code",[s._v("Number")]),s._v(" 能够表示的安全整数范围。")]),s._v(" "),a("p",[s._v("在 JavaScript 中采用双精度浮点数,这导致精度有限，比如 "),a("code",[s._v("Number.MAX_SAFE_INTEGER")]),s._v(" 给出了可以安全递增的最大可能整数，即"),a("code",[s._v("2**53-1")]),s._v(",我们看一下案例:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const max = Number.MAX_SAFE_INTEGER;\n\nconst max1 = max + 1\nconst max2 = max + 2\n\nmax1 === max2 //true\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[a("code",[s._v("max1")]),s._v("与"),a("code",[s._v("max2")]),s._v("居然相等？这就是超过精读范围造成的问题，而"),a("code",[s._v("BigInt")]),s._v("正是解决这类问题而生的:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const max = BigInt(Number.MAX_SAFE_INTEGER);\n\nconst max1 = max + 1n\nconst max2 = max + 2n\n\nmax1 === max2 // false\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("这是在 Chrome 浏览器 console 的结果:")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/10/16db4069694bc53a?w=443&h=116&f=png&s=14625",alt:"2019-10-07-22-22-48"}})]),s._v(" "),a("p",[s._v("值得注意的是我们需要用 "),a("code",[s._v("BigInt(number)")]),s._v(" 把 Number 转化为 "),a("code",[s._v("BigInt")]),s._v(",同时如果类型是 "),a("code",[s._v("BigInt")]),s._v(" ,那么数字后面需要加 "),a("code",[s._v("n")]),s._v(" ,就如同上面例子的 "),a("code",[s._v("const max1 = max + 1n")]),s._v(" 中的 "),a("code",[s._v("1n")]),s._v("。")]),s._v(" "),a("p",[s._v("在TypeScript中，"),a("code",[s._v("number")]),s._v(" 类型虽然和 "),a("code",[s._v("BigInt")]),s._v(" 都是有表示数字的意思，但是实际上两者类型是不同的:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("declare let foo: number;\ndeclare let bar: bigint;\n\nfoo = bar; // error: Type 'bigint' is not assignable to type 'number'.\nbar = foo; // error: Type 'number' is not assignable to type 'bigint'.\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h2",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[s._v("#")]),s._v(" 小结")]),s._v(" "),a("p",[s._v("我们总结一下 TypeScript 中的原始类型：")]),s._v(" "),a("ul",[a("li",[s._v("布尔类型："),a("code",[s._v("boolean")])]),s._v(" "),a("li",[s._v("数字类型："),a("code",[s._v("number")])]),s._v(" "),a("li",[s._v("字符串类型："),a("code",[s._v("string")])]),s._v(" "),a("li",[s._v("空值："),a("code",[s._v("void")])]),s._v(" "),a("li",[s._v("Null 和 Undefined："),a("code",[s._v("null")]),s._v(" 和 "),a("code",[s._v("undefined")])]),s._v(" "),a("li",[s._v("Symbol 类型："),a("code",[s._v("symbol")])]),s._v(" "),a("li",[s._v("BigInt 大数整数类型："),a("code",[s._v("bigint")])])]),s._v(" "),a("p",[s._v("本节我们介绍了几个基本类型，难度并不大，通过简单了解我们可以读懂一些很基础的TS代码了。")])])}),[],!1,null,null,null);e.default=t.exports}}]);