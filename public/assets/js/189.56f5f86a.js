(window.webpackJsonp=window.webpackJsonp||[]).push([[189],{671:function(s,a,n){"use strict";n.r(a);var e=n(59),t=Object(e.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"类-class"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类-class"}},[s._v("#")]),s._v(" 类(Class)")]),s._v(" "),n("p",[s._v("传统的面向对象语言基本都是基于类的，JavaScript 基于原型的方式让开发者多了很多理解成本，在 ES6 之后，JavaScript 拥有了 class 关键字，虽然本质依然是构造函数，但是开发者已经可以比较舒服地使用 class了。")]),s._v(" "),n("p",[s._v("但是 JavaScript 的 class 依然有一些特性还没有加入，比如修饰符和抽象类等。")]),s._v(" "),n("p",[s._v("之于一些继承、静态属性这些在 JavaScript 本来就存在的特性，我们就不过多讨论了。")]),s._v(" "),n("h2",{attrs:{id:"抽象类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#抽象类"}},[s._v("#")]),s._v(" 抽象类")]),s._v(" "),n("p",[s._v("抽象类做为其它派生类的基类使用,它们一般不会直接被实例化,不同于接口,抽象类可以包含成员的实现细节。")]),s._v(" "),n("p",[s._v("abstract 关键字是用于定义抽象类和在抽象类内部定义抽象方法。")]),s._v(" "),n("p",[s._v("比如我们创建一个 "),n("code",[s._v("Animal")]),s._v(" 抽象类:")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("abstract class Animal {\n    abstract makeSound(): void;\n    move(): void {\n        console.log('roaming the earch...');\n    }\n}\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("我在实例化此抽象类会报错：")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/11/16dbb116f92b95a0?w=438&h=133&f=png&s=21274",alt:"2019-06-25-07-50-23"}})]),s._v(" "),n("p",[s._v("我们不能直接实例化抽象类，通常需要我们创建子类继承基类,然后可以实例化子类。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Cat extends Animal {\n\n    makeSound() {\n        console.log('miao miao')\n    }\n}\n\nconst cat = new Cat()\n\ncat.makeSound() // miao miao\ncat.move() // roaming the earch...\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("h2",{attrs:{id:"访问限定符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#访问限定符"}},[s._v("#")]),s._v(" 访问限定符")]),s._v(" "),n("p",[s._v("传统面向对象语言通常都有访问限定符，TypeScript 中有三类访问限定符，分别是: public、private、protected。")]),s._v(" "),n("h3",{attrs:{id:"public"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#public"}},[s._v("#")]),s._v(" public")]),s._v(" "),n("p",[s._v("在 TypeScript 的类中，成员都默认为 public, 被此限定符修饰的成员是可以被外部访问。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Car {\n    public run() {\n        console.log('启动...')\n    }\n}\n\nconst car = new Car()\n\ncar.run() // 启动...\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("h3",{attrs:{id:"private"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#private"}},[s._v("#")]),s._v(" private")]),s._v(" "),n("p",[s._v("当成员被设置为 private 之后, 被此限定符修饰的成员是只可以被类的内部访问。")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/11/16dbb116f9c298d7?w=456&h=243&f=png&s=30116",alt:"2019-06-25-08-14-12"}})]),s._v(" "),n("h3",{attrs:{id:"protected"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#protected"}},[s._v("#")]),s._v(" protected")]),s._v(" "),n("p",[s._v("当成员被设置为 protected 之后, 被此限定符修饰的成员是只可以被类的内部以及类的子类访问。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Car {\n    protected run() {\n        console.log('启动...')\n    }\n}\n\nclass GTR extends Car {\n    init() {\n        this.run()\n    }\n}\n\nconst car = new Car()\nconst gtr = new GTR()\n\ncar.run() // [ts] 属性“run”受保护，只能在类“Car”及其子类中访问。\ngtr.init() // 启动...\ngtr.run() // [ts] 属性“run”受保护，只能在类“Car”及其子类中访问。\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br")])]),n("h2",{attrs:{id:"class-可以作为接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#class-可以作为接口"}},[s._v("#")]),s._v(" class 可以作为接口")]),s._v(" "),n("p",[s._v("上一节我们讲到接口（interface），实际上类（class）也可以作为接口。")]),s._v(" "),n("p",[s._v("而把 class 作为 interface 使用，在 React 工程中是很常用的。")]),s._v(" "),n("p",[s._v("比如我之前写过一个轮播组件"),n("a",{attrs:{href:"https://github.com/xiaomuzhu/rc-carousel/blob/master/src/props.ts",target:"_blank",rel:"noopener noreferrer"}},[s._v("rc-carousel"),n("OutboundLink")],1),s._v("。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("export default class Carousel extends React.Component<Props, State> {}\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("由于组件需要传入 "),n("code",[s._v("props")]),s._v(" 的类型 "),n("code",[s._v("Props")]),s._v(" ，同时有需要设置默认 "),n("code",[s._v("props")]),s._v(" 即 "),n("code",[s._v("defaultProps")]),s._v("。")]),s._v(" "),n("p",[s._v("这个时候 class 作为接口的优势就体现出来了。")]),s._v(" "),n("p",[s._v("我们先声明一个类，这个类包含组件 "),n("code",[s._v("props")]),s._v(" 所需的类型和初始值：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// props的类型\nexport default class Props {\n  public children: Array<React.ReactElement<any>> | React.ReactElement<any> | never[] = []\n  public speed: number = 500\n  public height: number = 160\n  public animation: string = 'easeInOutQuad'\n  public isAuto: boolean = true\n  public autoPlayInterval: number = 4500\n  public afterChange: () => {}\n  public beforeChange: () => {}\n  public selesctedColor: string\n  public showDots: boolean = true\n}\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("p",[s._v("当我们需要传入 "),n("code",[s._v("props")]),s._v(" 类型的时候直接将 "),n("code",[s._v("Props")]),s._v(" 作为接口传入，此时 "),n("code",[s._v("Props")]),s._v(" 的作用就是接口，而当需要我们设置"),n("code",[s._v("defaultProps")]),s._v("初始值的时候，我们只需要:")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("public static defaultProps = new Props()\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[n("code",[s._v("Props")]),s._v(" 的实例就是 "),n("code",[s._v("defaultProps")]),s._v(" 的初始值，这就是 class 作为接口的实际应用，我们用一个 class 起到了接口和设置初始值两个作用，方便统一管理，减少了代码量。")]),s._v(" "),n("h2",{attrs:{id:"小结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[s._v("#")]),s._v(" 小结")]),s._v(" "),n("p",[s._v("我们学习了 TypeScript 类特有的知识点，包括三个访问限定符public、protected、private，抽象类，以及实际应用中的class作为接口的优势，这些都是只后我们会反复用到的知识。")])])}),[],!1,null,null,null);a.default=t.exports}}]);