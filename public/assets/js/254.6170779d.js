(window.webpackJsonp=window.webpackJsonp||[]).push([[254],{736:function(e,r,o){"use strict";o.r(r);var n=o(59),t=Object(n.a)({},(function(){var e=this,r=e.$createElement,o=e._self._c||r;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"一步步学会用docker部署应用"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#一步步学会用docker部署应用"}},[e._v("#")]),e._v(" 一步步学会用docker部署应用")]),e._v(" "),o("p",[e._v("docker是一种虚拟化技术，可以在内核层隔离资源。因此对于上层应用而言，采用docker技术可以达到类似于虚拟机的沙盒环境。这大大简化了应用部署，让运维人员无需陷入无止境繁琐的依赖环境及系统配置中；另一方面，容器技术也可以充分利用硬件资源，做到资源共享。")]),e._v(" "),o("p",[e._v("本文将采用docker技术部署一个简单的nodejs应用，它包括一个简单的前置网关nginx、redis服务器以及业务服务器。同时使用dockerfile配置特定镜像，采用docker-compose进行容器编排，解决依赖、网络等问题。")]),e._v(" "),o("h2",{attrs:{id:"docker基础"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#docker基础"}},[e._v("#")]),e._v(" docker基础")]),e._v(" "),o("p",[e._v("本文默认机器已安装docker环境，即可以使用docker和docker-compose服务，如果本地没有安装，则参考：")]),e._v(" "),o("ol",[o("li",[e._v("安装docker及docker-compose，可参考 "),o("a",{attrs:{href:"https://docs.docker.com/compose/install/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Install Docker Compose"),o("OutboundLink")],1)]),e._v(" "),o("li",[e._v("docker compose 技术可以查看官方文档 "),o("a",{attrs:{href:"https://github.com/nodejs/docker-node/blob/master/README.md#how-to-use-this-image",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker Compose"),o("OutboundLink")],1)])]),e._v(" "),o("h3",{attrs:{id:"docker源"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#docker源"}},[e._v("#")]),e._v(" docker源")]),e._v(" "),o("p",[e._v("默认docker采用官方镜像，国内用户下载镜像速度较慢，为了更好的体验，建议切换源。 OSX系统通过添加 ~/.docker/daemon.json文件，")]),e._v(" "),o("p",[e._v('{\n"registry-mirrors": ["http://f1361db2.m.daocloud.io/"]\n}')]),e._v(" "),o("p",[e._v("即可，镜像源地址可替换，随后重启docker服务即可。")]),e._v(" "),o("p",[e._v("linux系统通过修改 /etc/docker/daemon.josn文件，一样可以替换源。")]),e._v(" "),o("h3",{attrs:{id:"docker简单操作"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#docker简单操作"}},[e._v("#")]),e._v(" docker简单操作")]),e._v(" "),o("p",[e._v("源切换完毕之后，就可以尝试简单的容器操作。 首先，运行一个简单的容器：")]),e._v(" "),o("p",[e._v("docker run -it node:8-slim node")]),e._v(" "),o("p",[e._v("run命令，根据某个版本的node镜像运行容器，同时执行 “node”命令，进入node命令行交互模式。")]),e._v(" "),o("p",[e._v("docker run -d node:8-slim node")]),e._v(" "),o("p",[e._v("执行 -d 选项，让容器以daemon进程运行，同时返回容器的hash值。根据该hash值，我们可以通过命令行进入运行的容器查看相关状态：")]),e._v(" "),o("p",[e._v("docker exec -it hashcode bash")]),e._v(" "),o("p",[e._v("hashcode可以通过")]),e._v(" "),o("p",[e._v("docker ps -l")]),e._v(" "),o("p",[e._v("找到对应容器的hashcode")]),e._v(" "),o("p",[e._v("关于镜像的选择以及版本的确定，可以通过访问官方 "),o("code",[e._v("https://hub.docker.com/")]),e._v(" 搜索，根据结果寻找 _official image_使用，当然也可根据下载量和star数量进行选择。")]),e._v(" "),o("p",[e._v("对于镜像的tag，则根据业务需求进行判断是否需要完整版的系统。如nodejs镜像，仅仅需要node基础环境而不需要其他的系统预装命令，因此选择了 node:-slim 版本。")]),e._v(" "),o("h2",{attrs:{id:"dockerfile"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile"}},[e._v("#")]),e._v(" Dockerfile")]),e._v(" "),o("p",[e._v("从源下载的镜像大多数不满足实际的使用需求，因此需要定制镜像。镜像定制可以通过运行容器安装环境，最后提交为镜像：")]),e._v(" "),o("p",[e._v("docker run -it node:8-slim bash\nroot@ff05391b4cf8:/# echo helloworld > /home/text\nroot@ff05391b4cf8:/# exit\ndocker commit ff05391b4cf8 node-hello")]),e._v(" "),o("p",[e._v("然后运行该镜像即可。")]),e._v(" "),o("p",[e._v("另一种镜像定制可以通过Dockerfile的形式完成。Dockerfile是容器运行的配置文件，每次执行命令都会生成一个镜像，直到所有环境都已设置完毕。")]),e._v(" "),o("p",[e._v("Dockerfile文件中可以执行命令定制化镜像，如 “FROM、COPY、ADD、ENV、EXPOSE、RUN、CMD”等，具体dockerfile的配置可参考相关文档。")]),e._v(" "),o("p",[e._v("Dockerfile完成后，进行构建镜像:")]),e._v(" "),o("p",[e._v("docker build -t node:custom:v1 .")]),e._v(" "),o("p",[e._v("镜像构建成功后即可运行容器。")]),e._v(" "),o("h2",{attrs:{id:"docker-compose"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose"}},[e._v("#")]),e._v(" docker-compose")]),e._v(" "),o("p",[e._v("关于docker-compose，将在下文示例中进行说明。")]),e._v(" "),o("h2",{attrs:{id:"示例：搭建nodejs应用"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#示例：搭建nodejs应用"}},[e._v("#")]),e._v(" 示例：搭建nodejs应用")]),e._v(" "),o("blockquote",[o("p",[e._v("本文所有代码已开源至"),o("a",{attrs:{href:"https://github.com/royalrover/docker-web-examples",target:"_blank",rel:"noopener noreferrer"}},[e._v("github"),o("OutboundLink")],1)])]),e._v(" "),o("h3",{attrs:{id:"docker-compose-yml"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose-yml"}},[e._v("#")]),e._v(" docker-compose.yml")]),e._v(" "),o("p",[e._v("在docker-compose.yml中配置相关服务节点，同时在每个服务节点中配置相关的镜像、网络、环境、磁盘映射等元信息，也可指定具体Dockerfile文件构建镜像使用。")]),e._v(" "),o("p",[e._v("version: '3'\nservices:\nnginx:\nimage: nginx:latest\nports:\n- 80:80\nrestart: always"),o("br"),e._v("\nvolumes:\n- ./nginx/conf.d:/etc/nginx/conf.d\n- /tmp/logs:/var/log/nginx")]),e._v(" "),o("p",[e._v("redis-server:\nimage: redis:latest\nports:\n- 6479:6379\nrestart: always")]),e._v(" "),o("p",[e._v("app:\nbuild: ./\nvolumes:\n- ./:/usr/local/app\nrestart: always"),o("br"),e._v("\nworking_dir: /usr/local/app\nports:\n- 8090:8090\ncommand: node server/server.js\ndepends_on:\n- redis-server\nlinks:\n- redis-server:rd")]),e._v(" "),o("h3",{attrs:{id:"redis服务器"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#redis服务器"}},[e._v("#")]),e._v(" redis服务器")]),e._v(" "),o("p",[e._v("首先搭建一个单节点缓存服务，采用官方提供的redis最新版镜像，无需构建。")]),e._v(" "),o("p",[e._v("version: '3'\nservices:\nredis-server:\nimage: redis:latest\nports:\n- 6479:6379\nrestart: always")]),e._v(" "),o("p",[e._v("关于version具体信息，可参考"),o("a",{attrs:{href:"https://docs.docker.com/compose/compose-file/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Compose and Docker compatibility matrix"),o("OutboundLink")],1),e._v("找到对应docker引擎匹配的版本格式。 在services下，创建了一个名为 "),o("strong",[e._v("redis-server")]),e._v(" 的服务，它采用最新的redis官方镜像，并通过"),o("a",{attrs:{href:"https://cloud.tencent.com/product/cdh?from=10680",target:"_blank",rel:"noopener noreferrer"}},[e._v("宿主机"),o("OutboundLink")],1),e._v("的6479端口向外提供服务。并设置自动重启功能。")]),e._v(" "),o("p",[e._v("此时，在宿主机上可以通过6479端口使用该缓存服务。")]),e._v(" "),o("h3",{attrs:{id:"web应用"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#web应用"}},[e._v("#")]),e._v(" web应用")]),e._v(" "),o("p",[e._v("使用node.js的koa、koa-router可快速搭建web服务器。在本节中，创建一个8090端口的服务器，同时提供两个功能：1. 简单查询单个key的缓存 2. 流水线查询多个key的缓存")]),e._v(" "),o("p",[e._v("docker-compose.yml")]),e._v(" "),o("p",[e._v("services:\napp:\nbuild: ./\nvolumes:\n- ./:/usr/local/app\nrestart: always"),o("br"),e._v("\nworking_dir: /usr/local/app\nports:\n- 8090:8090\ncommand: node server/server.js\ndepends_on:\n- redis-server\nlinks:\n- redis-server:rd")]),e._v(" "),o("p",[e._v("此处创建一个app服务，它使用当前目录下的Dockerfile构建后的镜像，同时通过 volumes 配置磁盘映射，将当前目录下所有文件映射至容器的/usr/local/app，并制定为运行时目录；同时映射宿主机的8090端口，最后执行"),o("code",[e._v("node server/server.js")]),e._v("命令运行服务器。")]),e._v(" "),o("p",[e._v("通过"),o("strong",[e._v("depends_on")]),e._v("设置app服务的依赖，等待 redis-server 服务启动后再启动app服务；通过"),o("strong",[e._v("links")]),e._v("设置容器间网络连接，在app服务中，可通过别名 "),o("strong",[e._v("rd")]),e._v(" 访问redis-server。")]),e._v(" "),o("p",[e._v("Dockerfile")]),e._v(" "),o("p",[e._v("FROM node:8-slim\nCOPY ./ /usr/local/app\nWORKDIR /usr/local/app\nRUN npm i --registry=https://registry.npm.taobao.org\nENV NODE_ENV dev\nEXPOSE 8090")]),e._v(" "),o("p",[e._v("指定的Dockerfile则做了初始化npm的操作。")]),e._v(" "),o("p",[e._v("web-server sourcecode")]),e._v(" "),o("p",[e._v("const Koa = require('koa');\nconst Router = require('koa-router');\nconst redis = require('redis');\nconst { promisify } = require('util');")]),e._v(" "),o("p",[e._v("let app = new Koa();\nlet router = new Router();\nlet redisClient = createRedisClient({\n// ip为docker-compose.yml配置的redis-server别名 rd，可在应用所在容器查看dns配置\nip: 'rd',\nport: 6379,\nprefix: '',\ndb: 1,\npassword: null\n});")]),e._v(" "),o("p",[e._v("function createRedisClient({port, ip, prefix, db}) {\nlet client = redis.createClient(port, ip, {\nprefix,\ndb,\nno_ready_check: true\n});")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",[o("code",[e._v("client.on\\('reconnecting', \\(err\\)\\=>\\{\n    console.warn\\(\\`redis client reconnecting, delay \\$\\{err.delay\\}ms and attempt \\$\\{err.attempt\\}\\`\\);\n\\}\\);\n\nclient.on\\('error', function \\(err\\) \\{\n    console.error\\('Redis error\\!',err\\);\n\\}\\);\n\nclient.on\\('ready', function\\(\\) \\{\n    console.info\\(\\`redis初始化完成,就绪: \\$\\{ip\\}:\\$\\{port\\}/\\$\\{db\\}\\`\\);\n\\}\\);\nreturn client;\n")])])]),o("p",[e._v("}")]),e._v(" "),o("p",[e._v("function execReturnPromise(cmd, args) {\nreturn new Promise((res,rej)=>{\nredisClient.send_command(cmd, args, (e,reply)=>{\nif(e){\nrej(e);\n}else{\nres(reply);\n}\n});\n});\n}")]),e._v(" "),o("p",[e._v("function batchReturnPromise() {\nreturn new Promise((res,rej)=>{\nlet b = redisClient.batch();\nb.exec = promisify(b.exec);\nres(b);\n});\n}")]),e._v(" "),o("p",[e._v("router.get('/', async (ctx, next) => {\nawait execReturnPromise('set',['testkey','helloworld']);\nlet ret = await execReturnPromise('get',['testkey']);\nctx.body = {\nstatus: 'ok',\nresult: ret,\n};\n});")]),e._v(" "),o("p",[e._v("router.get('/batch', async (ctx, next) => {\nawait execReturnPromise('set',['testkey','helloworld, batch!']);\nlet batch = await batchReturnPromise();\nfor(let i=0;i < 10;i++){\nbatch.get('testkey');\n}\nlet ret = await batch.exec();\nctx.body = {\nstatus: 'ok',\nresult: ret,\n};\n});")]),e._v(" "),o("p",[e._v("app\n.use(router.routes())\n.use(router.allowedMethods())\n.listen(8090);")]),e._v(" "),o("p",[e._v("需要注意的是，在web服务所在的容器中，通过别名 "),o("strong",[e._v("rd")]),e._v(" 访问缓存服务。")]),e._v(" "),o("p",[e._v("此时，运行命令 "),o("code",[e._v("docker-compose up")]),e._v("后，即可通过 http://127.0.0.1:8090/ http://127.0.0.1:8090/batch 访问这两个缓存服务。")]),e._v(" "),o("h3",{attrs:{id:"转发"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#转发"}},[e._v("#")]),e._v(" 转发")]),e._v(" "),o("p",[e._v("目前可以通过宿主机的8090端口访问服务，为了此后web服务的可扩展性，需要在前端加入转发层。实例中使用nginx进行转发：")]),e._v(" "),o("p",[e._v("services:\nnginx:\nimage: nginx:latest\nports:\n- 80:80\nrestart: always"),o("br"),e._v("\nvolumes:\n- ./nginx/conf.d:/etc/nginx/conf.d\n- /tmp/logs:/var/log/nginx")]),e._v(" "),o("p",[e._v("采用最新版的nginx官方镜像，向宿主机暴露80端口，通过在本地配置nginx的抓发规则文件，映射至容器的nginx配置目录下实现快速高效的测试。")]),e._v(" "),o("h2",{attrs:{id:"运行与扩展"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#运行与扩展"}},[e._v("#")]),e._v(" 运行与扩展")]),e._v(" "),o("p",[e._v("默认单节点下，直接运行")]),e._v(" "),o("p",[e._v("docker-compose up -d")]),e._v(" "),o("p",[e._v("即可运行服务。")]),e._v(" "),o("p",[e._v("如果服务节点需要扩展，可通过")]),e._v(" "),o("p",[e._v("docker-compose up -d --scale app=3")]),e._v(" "),o("p",[e._v("扩展为3个web服务器，同时nginx转发规则需要修改：")]),e._v(" "),o("p",[e._v("upstream app_server { # 设置server集群,负载均衡关键指令\nserver docker-web-examples_app_1:8090; # 设置具体server,\nserver docker-web-examples_app_2:8090;\nserver docker-web-examples_app_3:8090;\n}")]),e._v(" "),o("p",[e._v("server {\nlisten 80;\ncharset utf-8;")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",[o("code",[e._v("location / \\{\n    proxy\\_pass http://app\\_server;\n    proxy\\_set\\_header Host \\$host:\\$server\\_port;\n    proxy\\_set\\_header X\\-Forwarded\\-Host \\$server\\_name;\n    proxy\\_set\\_header X\\-Real\\-IP \\$remote\\_addr;\n    proxy\\_set\\_header X\\-Forwarded\\-For \\$proxy\\_add\\_x\\_forwarded\\_for;\n\\}\n")])])]),o("p",[e._v("}")]),e._v(" "),o("p",[e._v("app_server内部的各个服务器名称为"),o("strong",[e._v("docker-web-examples_app_1")]),e._v("，format为“\\({path}_\\){service}_${number}”,")]),e._v(" "),o("p",[e._v("即第一部分为 docker-compose.yml所在目录名称，如果在根目录则为应用名称； 第二部分为扩展的服务名； 第三部分为扩展序号")]),e._v(" "),o("p",[e._v("通过设置nginx的配置的log_format中upstream_addr变量，可观察到"),o("a",{attrs:{href:"https://cloud.tencent.com/product/clb?from=10680",target:"_blank",rel:"noopener noreferrer"}},[e._v("负载均衡"),o("OutboundLink")],1),e._v("已生效。")]),e._v(" "),o("p",[e._v('http{\nlog_format  main  \'$remote_addr:$upstream_addr - $remote_user [$time_local] "$request" \'\n\'$status $body_bytes_sent "$http_referer" \'\n\'"$http_user_agent" "$http_x_forwarded_for"\';\n}')]),e._v(" "),o("h2",{attrs:{id:"参考"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[e._v("#")]),e._v(" 参考")]),e._v(" "),o("p",[o("a",{attrs:{href:"https://docs.docker.com/compose/compose-file/",target:"_blank",rel:"noopener noreferrer"}},[e._v("docker官方文档"),o("OutboundLink")],1)]),e._v(" "),o("p",[o("a",{attrs:{href:"https://blog.csdn.net/qq_36148847/article/details/79427878",target:"_blank",rel:"noopener noreferrer"}},[e._v("docker-compose.yml 配置文件编写详解"),o("OutboundLink")],1)]),e._v(" "),o("p",[o("a",{attrs:{href:"http://www.cnblogs.com/jsonhc/p/7767669.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Dockerfile实践"),o("OutboundLink")],1)])])}),[],!1,null,null,null);r.default=t.exports}}]);