(window.webpackJsonp=window.webpackJsonp||[]).push([[190],{673:function(s,n,a){"use strict";a.r(n);var e=a(59),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"函数-function"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数-function"}},[s._v("#")]),s._v(" 函数(Function)")]),s._v(" "),a("p",[s._v("函数是 JavaScript 应用程序的基础,它帮助你实现抽象层、模拟类、信息隐藏和模块。")]),s._v(" "),a("p",[s._v("在 TypeScript 里,虽然已经支持类、命名空间和模块,但函数仍然是主要的定义行为的地方,TypeScript 为 JavaScript 函数添加了额外的功能，让我们可以更容易地使用。")]),s._v(" "),a("h2",{attrs:{id:"定义函数类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义函数类型"}},[s._v("#")]),s._v(" 定义函数类型")]),s._v(" "),a("p",[s._v("\b我们在 TypeScript 中的函数并不需要刻意去定义，比如我们实现一个加法函数:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const add = (a: number, b: number) => a + b\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("实际上我们只定义了函数的两个参数类型，这个时候整个函数虽然没有被显式定义，但是实际上 TypeScript 编译器是能『感知』到这个函数的类型的:")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/11/16dbb1194a11bb4c?w=518&h=71&f=png&s=18043",alt:"2019-06-25-10-43-43"}})]),s._v(" "),a("p",[s._v("我们通过 VS Code 的类型提示看到，TypeScript 已经推断出了整个函数的类型，虽然我们并没有显式定义出来，这就是所谓的『类型推断』。")]),s._v(" "),a("p",[s._v("那么我应该如何显式定义一个函数的类型呢？")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/11/16dbb1194a4d9eff?w=711&h=190&f=png&s=26351",alt:"2019-06-25-10-47-16"}})]),s._v(" "),a("p",[s._v("括号里的 "),a("code",[s._v("(a: number, b: number)")]),s._v(" 为参数类型,而通过 "),a("code",[s._v("=>")]),s._v(" 来连接参数与返回值, 最后则是返回值的类型。")]),s._v(" "),a("h2",{attrs:{id:"函数的参数详解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数的参数详解"}},[s._v("#")]),s._v(" 函数的参数详解")]),s._v(" "),a("h3",{attrs:{id:"可选参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可选参数"}},[s._v("#")]),s._v(" 可选参数")]),s._v(" "),a("p",[s._v("一个函数的参数可能是不存在的，这就需要我们使\\用可选参数来定义.")]),s._v(" "),a("p",[s._v("我们只需要在参数后面加上 "),a("code",[s._v("?")]),s._v(" 即代表参数可能不存在。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const add = (a: number, b?: number) => a + (b ? b : 0)\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("参数b有"),a("code",[s._v("number")]),s._v("与"),a("code",[s._v("undefined")]),s._v("两种可能。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/11/16dbb1194a559f31?w=576&h=74&f=png&s=18717",alt:"2019-06-25-10-53-47"}})]),s._v(" "),a("h3",{attrs:{id:"默认参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#默认参数"}},[s._v("#")]),s._v(" 默认参数")]),s._v(" "),a("p",[s._v("默认参数在 JavaScript 同样存在，即在参数后赋值即可。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const add = (a: number, b = 10) => a + b\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h3",{attrs:{id:"剩余参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#剩余参数"}},[s._v("#")]),s._v(" 剩余参数")]),s._v(" "),a("p",[s._v("剩余参数与JavaScript种的语法类似，需要用 "),a("code",[s._v("...")]),s._v(" 来表示剩余参数，而剩余参数 "),a("code",[s._v("rest")]),s._v(" 则是一个由number组成的数组，在本函数中用 reduce 进行了累加求和。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const add = (a: number, ...rest: number[]) => rest.reduce(((a, b) => a + b), a)\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h2",{attrs:{id:"重载（overload）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重载（overload）"}},[s._v("#")]),s._v(" 重载（Overload）")]),s._v(" "),a("p",[s._v("重载这个概念在很多传统编译语言中都存在，如果你有类似 Java 的经验静很容易理解。")]),s._v(" "),a("p",[s._v("那么在 TypeScript 中它的作用是什么呢？")]),s._v(" "),a("p",[s._v("先看一下例子：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function assigned (a: number, b?: number, c?: number, d?: any) {\n    if (b === undefined && c === undefined && d === undefined) {\n      b = c = d = a\n    } else if (c === undefined && d === undefined) {\n      c = a\n      d = b\n    }\n    return {\n      top: a,\n      right: b,\n      bottom: c,\n      left: d\n    }\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("如果上述代码是我的同事写的，我只负责调用这个函数，那么我如果不看具体实现，只通过代码提示能搞清楚需要传几个参数吗？传不同的参数其返回值是一样的吗？")]),s._v(" "),a("p",[s._v("对于我而言，我只能去看这个函数的实现，来决定我如何传参，那么上述函数实现算是比较简单的，如果是个复杂函数呢？这增加了协作的成本也造成了类型的不安全。")]),s._v(" "),a("p",[s._v("比如上面的函数实际上只接受1、2、4个参数，但是如果我传入三个，是不会报错的，这就是类型的不安全。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/11/16dbb1194a6633b1?w=553&h=211&f=png&s=33465",alt:"2019-06-25-11-38-38"}})]),s._v(" "),a("p",[s._v("为了解决上述问题，因此函数重载出现了。")]),s._v(" "),a("p",[s._v("我们用同样的函数名声明参数分别为1、2、4情况下")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 重载\ninterface Direction {\n    top: number\n    right: number\n    bottom: number\n    left: number\n}\n\nfunction assigned(all: number): Direction\nfunction assigned(topAndBottom: number, leftAndRight: number): Direction\nfunction assigned(top: number, right: number, bottom: number, left: number): Direction\n\n// 代码实现函数不可被调用\nfunction assigned (a: number, b?: number, c?: number, d?: any) {\n    if (b === undefined && c === undefined && d === undefined) {\n      b = c = d = a\n    } else if (c === undefined && d === undefined) {\n      c = a\n      d = b\n    }\n    return {\n      top: a,\n      right: b,\n      bottom: c,\n      left: d\n    }\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br")])]),a("p",[s._v("最后我们分别传入不同数量的参数，发现只有三个参数的情况下报错了.")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/11/16dbb1194a792df6?w=299&h=128&f=png&s=11392",alt:"2019-06-25-13-04-12"}})]),s._v(" "),a("p",[s._v("函数重载在多人协作项目或者开源库中使用非常频繁，因为一个函数可能会被大量的开发者调用，如果不使用函数重载，那么会造成额外的麻烦。")]),s._v(" "),a("h2",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[s._v("#")]),s._v(" 小结")]),s._v(" "),a("p",[s._v("这一节我们学习了函数类型相关的知识，其中最重要的莫过于函数重载，虽然在普通的开发中使用到这个功能的几率并不大，但是一旦涉及多人使用的库相关开发，函数重载可谓是必不可少的利器。")]),s._v(" "),a("p",[s._v("值得一提的是,著名的全局状态管理库 "),a("code",[s._v("Redux")]),s._v(" 的"),a("a",{attrs:{href:"https://github.com/reduxjs/redux/blob/26f216e066a2a679d3cae4fb1a5c4e5d15e9fac6/src/compose.ts#L16",target:"_blank",rel:"noopener noreferrer"}},[s._v("compose"),a("OutboundLink")],1),s._v("就是运用大量函数重载的典型案例,感兴趣的同学可以阅读一下 Redux 用 TypeScript 重写后的源码:")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/11/16dbb1194a7ec2fd?w=632&h=801&f=png&s=114299",alt:"2019-10-07-23-36-08"}})])])}),[],!1,null,null,null);n.default=t.exports}}]);