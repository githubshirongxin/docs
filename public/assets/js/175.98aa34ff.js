(window.webpackJsonp=window.webpackJsonp||[]).push([[175],{658:function(s,e,a){"use strict";a.r(e);var t=a(59),n=Object(t.a)({},(function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"typescript-工程化：单元测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#typescript-工程化：单元测试"}},[s._v("#")]),s._v(" TypeScript 工程化：单元测试")]),s._v(" "),a("p",[s._v("单元测试是现代软件工程中必备的环节之一，通常一定规模的团队会有专门的测试人员，但是一些精悍的团队也会选择开发人员自行测试。")]),s._v(" "),a("p",[s._v("虽然 TypeScript 的类型检查和 ESLint 的代码检测已经让我们的代码足够强大，但是这仅仅停留在类型和语法层面，我们无法保证逻辑的正确性，这就需要单元测试来保证我们的逻辑的健壮性了。")]),s._v(" "),a("h2",{attrs:{id:"单元测试工具的选择"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单元测试工具的选择"}},[s._v("#")]),s._v(" 单元测试工具的选择")]),s._v(" "),a("p",[s._v("在 JS/TS 的世界里有太多的单元测试框架可供选择了，我们逐一进行对比，来选出一个适合我们的框架。")]),s._v(" "),a("h3",{attrs:{id:"mocha"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mocha"}},[s._v("#")]),s._v(" Mocha")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/21/16ded068ecf8ed8a?w=800&h=240&f=png&s=51923",alt:"2019-10-20-00-03-16"}})]),s._v(" "),a("p",[s._v("Mocha 可能是当前被使用最多的单元测试工具，他最大的优点就是灵活，它只提供给开发者的只有一个基础测试结构。")]),s._v(" "),a("p",[s._v("然后其它功能性的功能如 assertions， spies，mocks，和像它们一样的其它功能需要引用添加其它库/插件来完成。")]),s._v(" "),a("p",[s._v("它的缺点也是他的优点，我们需要额外的引入众多辅助库和插件，这无形中增加了我们的学习成本和配置成本。")]),s._v(" "),a("p",[s._v("除此之外， Mocha 的另一大亮点是对异步的强大支持，Mocha 毕竟是从一开始为 Node.js 而生的单元测试框架，对浏览器的支持并不如其对服务器做的那么好。")]),s._v(" "),a("p",[s._v("如果你需要一个高度定制的测试框架，Mocha 是非常好的选择。")]),s._v(" "),a("h3",{attrs:{id:"jasmine"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jasmine"}},[s._v("#")]),s._v(" Jasmine")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/21/16ded068ece95f09?w=800&h=240&f=png&s=123876",alt:"2019-10-20-00-00-19"}})]),s._v(" "),a("p",[s._v("相比于 Mocha 需要进行额外配置，另一个比较老牌的测试框架 Jasmine 主打的则是开箱即用，它内置了一些断言库和 mocks 工具，并提供了全局变量非常方便我们的测试。")]),s._v(" "),a("h3",{attrs:{id:"jest"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jest"}},[s._v("#")]),s._v(" Jest")]),s._v(" "),a("p",[s._v("Jest 是一个真正意义上开箱即用的测试框架，它集成了几乎单元测试中我们需要的所有功能，比如：断言、测试覆盖率统计、快照等等一系列功能。")]),s._v(" "),a("p",[s._v("比较友好地支持各种环境，目前前端三大框架都采用了 Jest 作为测试工具，它的优点如下：")]),s._v(" "),a("ul",[a("li",[s._v("性能 - 首先 Jest 基于并行测试多文件，所以在大项目中的运行速度相当快（我们在这一点上深有体会，你可以访问这里、这里、这里和这里了解更多）。")]),s._v(" "),a("li",[s._v("UI - 清晰且操作简单")]),s._v(" "),a("li",[s._v("Ready-To-Go - 有断言、spies、mocks，和 Sinon 能做的事差不多。和其他库的结合使用也很方便。")]),s._v(" "),a("li",[s._v("Globals - 和 Jasmine 一样，默认创建全局环境。但这一个特性确实会降低代码灵活性和健壮性，但是非常方便测试者调用。")]),s._v(" "),a("li",[s._v("快照测试 - Jest 快照功能由 FB 开发和维护，它还可以平移到别的框架上作为插件使用。 更强大的模块级 mocking 功能 - Jest 允许开发者用非常简单的方法 mock 很重的库，达到提高测试效率的目的。比如可以模拟一个 promise 的 resolve，而不是真的进行网络请求。")]),s._v(" "),a("li",[s._v("代码覆盖检查 - 内置了一个基于 Istanbul 的代码覆盖工具，功能强大且性能高。")]),s._v(" "),a("li",[s._v("支持性 - Jest 在2016年末2017年初发布了大版本，各方面都有了很大提升。大部分主流 IDE 和工具都已支持")]),s._v(" "),a("li",[s._v("开发 - Jest 仅仅更新被修改的文件，所以在监控模式 (watch mode) 下它的运行速度非常快")])]),s._v(" "),a("p",[s._v("Jest 正是基于 Jasmine 开发而来，如果你喜欢 Jasmine，那么为什么不用 Jest，他比 Jasmine 更加大而全，更加开箱即用。")]),s._v(" "),a("h3",{attrs:{id:"我们的选择"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#我们的选择"}},[s._v("#")]),s._v(" 我们的选择")]),s._v(" "),a("p",[s._v("其实在我们面前有两条路，一条是灵活配置但是学习成本陡峭的 Mocha，另一条是大而全开箱即用，却没那么灵活的 Jest，多数没有特殊要求的情况下我认为 Jest 会更适合我们，测试框架到底是一个工具，我们选择一个几乎不需要配置、开箱即用的框架是可以大大提高我们生产效率的选择。")]),s._v(" "),a("h2",{attrs:{id:"jest-配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jest-配置"}},[s._v("#")]),s._v(" Jest 配置")]),s._v(" "),a("h3",{attrs:{id:"安装-jest"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装-jest"}},[s._v("#")]),s._v(" 安装 Jest")]),s._v(" "),a("p",[s._v("全局安装 Jest：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("npm i jest -g\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("在项目中安装 Jest：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("npm i -D jest @types/jest\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h3",{attrs:{id:"初始化-jest"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初始化-jest"}},[s._v("#")]),s._v(" 初始化 Jest")]),s._v(" "),a("p",[s._v("我们在项目的根目录下初始化 jest：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("jest --init\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("我们会被问到三个问题，我的选择如下：")]),s._v(" "),a("ul",[a("li",[s._v("Choose the test environment that will be used for testing? "),a("strong",[s._v("node")])]),s._v(" "),a("li",[s._v("Do you want Jest to add coverage reports? "),a("strong",[s._v("y")])]),s._v(" "),a("li",[s._v("Automatically clear mock calls and instances between every test? "),a("strong",[s._v("y")])])]),s._v(" "),a("p",[s._v("第一个问题需要我们选择测试执行环境，有浏览器和 Node 两个选项，我们这次在简单的 Node 环境下测试，所以选择了 node。")]),s._v(" "),a("p",[s._v("第二个问题问我们是否需要测试覆盖率报告，通常情况下这个报告很重要，使我们整体测试情况的写一个报告，我选择了“是”。")]),s._v(" "),a("p",[s._v("第三个问题问我们是否在测试结束后帮我们自动清除一些模拟的实例等等，我选择了“是”，避免这些东西影响我们的下次测试。")]),s._v(" "),a("h3",{attrs:{id:"配置项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置项"}},[s._v("#")]),s._v(" 配置项")]),s._v(" "),a("p",[s._v("这个时候我们的根目录下已经生成了一个叫 "),a("code",[s._v("jest.config.js")]),s._v(" 的配置文件，我们看到里面有非常多的配置项。")]),s._v(" "),a("p",[s._v("比如 "),a("code",[s._v("clearMocks: true")]),s._v(" 就是我们刚才的问题中用于清除模拟残留的配置，"),a("code",[s._v("coverageDirectory: 'coverage'")]),s._v(" 就是我们刚才选择的测试覆盖率报告的配置，"),a("code",[s._v("testEnvironment: 'node'")]),s._v(" 是我们刚才选择的测试环境。")]),s._v(" "),a("p",[s._v("以上只是基础配置，我们如果想要在 TypeScript 中使用，需要进一步的配置。")]),s._v(" "),a("p",[s._v("我们需要在配置中加入以下选项：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("{\n  moduleFileExtensions: [\n    'ts',\n    'tsx',\n    'js',\n    'json',\n    'jsx',\n    'node',\n  ],\n  transform: {\n    '^.+\\\\.tsx?$': 'ts-jest',\n  },\n  testMatch: [\n    '**/__tests__/**/*.[jt]s?(x)',\n    '**/?(*.)+(spec|test).[tj]s?(x)',\n  ],\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("ul",[a("li",[a("code",[s._v("moduleFileExtensions")]),s._v(": 模块文件扩展名，当你去引入一个模块并没有指定拓展名的时候，它会依次尝试去添加这些扩展名去拟引入模块文件")]),s._v(" "),a("li",[a("code",[s._v("transform")]),s._v(": 一种转换器配置, 由于 Jest 默认的转换器不支持 TypeScript，因此需要 ts-jest 工具把 "),a("code",[s._v(".ts")]),s._v(" 和 "),a("code",[s._v(".tsx")]),s._v(" 文件内容转换成 js，因为我们现在基本上也都是用 ts 去编写测试代码，所以要配置转换器")]),s._v(" "),a("li",[a("code",[s._v("testMatch")]),s._v("： 设置识别哪些文件是测试文件（glob形式）")])]),s._v(" "),a("p",[s._v("以上就是我们需要配置的配置项，当然还有一些配置项我们并没有涉及，由于篇幅所限，且其重要性也有限，感兴趣的可以移步官方的"),a("a",{attrs:{href:"https://doc.ebichu.cc/jest/docs/zh-Hans/configuration.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("配置 Jest"),a("OutboundLink")],1),s._v("进一步学习。")]),s._v(" "),a("h2",{attrs:{id:"jest-的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jest-的使用"}},[s._v("#")]),s._v(" Jest 的使用")]),s._v(" "),a("p",[s._v("Jest 其实有很多强大的功能，我们并不是专门讲解 Jest 的书，因此只会讲解一下重点内容，更多的资料可以移步"),a("a",{attrs:{href:"https://doc.ebichu.cc/jest/docs/zh-Hans/getting-started.html#content",target:"_blank",rel:"noopener noreferrer"}},[s._v("Jest 官网"),a("OutboundLink")],1),s._v("。")]),s._v(" "),a("h3",{attrs:{id:"匹配器的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#匹配器的使用"}},[s._v("#")]),s._v(" 匹配器的使用")]),s._v(" "),a("p",[s._v("我们在新建一个目录 "),a("code",[s._v("src/")]),s._v("，如何在此目录下新建一个文件 "),a("code",[s._v("add.ts")]),s._v("，开始进行编码如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("export function add(item: number, ...rest: number[]) {\n    return rest.reduce((a: number, b: number) => a + b, item)\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("我们实现一个非常简单的累加函数，然后开始进行测试。")]),s._v(" "),a("p",[s._v("我们先创建一个文件 "),a("code",[s._v("add.test.ts")]),s._v(",我们使用一个最简单的匹配器:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import { add } from './add'\n\ntest('two plus two is four', () => {\n    expect(add(2,2)).toBe(4)\n})\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("在此代码中，"),a("code",[s._v("expect(add(2,2))")]),s._v(' 返回一个"期望"的对象，'),a("code",[s._v(".toBe(4)")]),s._v(" 则是匹配器，我们期望这个函数运行的结果是 "),a("code",[s._v("4")]),s._v("，如果匹配失败，Jest运行时，它会跟踪所有失败的匹配器，以便它可以为你打印出很好的错误消息。")]),s._v(" "),a("p",[s._v("那么如果我们想测试相反的匹配那么可以：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("test('two plus two is not six', () => {\n    expect(add(2,2)).not.toBe(6)\n})\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("我们运行一下 "),a("code",[s._v("npm run test")]),s._v("，如下：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/21/16ded068ecc66838?w=300&h=176&f=png&s=19237",alt:"2019-10-20-03-21-47"}})]),s._v(" "),a("p",[s._v("在编写代码的过程中你会发现 TypeScript 的提示会显示非常多的匹配器，这也是 TypeScript 的优势之一，我们通常根本记不住如此繁多的 API，但是优秀的代码提示会帮助我们快速使用，而不必去一个个查阅官方的文档。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/21/16ded068ecd021da?w=834&h=340&f=png&s=79075",alt:"2019-10-20-03-23-20"}})]),s._v(" "),a("p",[s._v("我们匹配完了简单的数字，接下来可以匹配对象了。")]),s._v(" "),a("p",[s._v("我们新建一个文件 "),a("code",[s._v("src/person.ts")]),s._v("，如下;")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("export class Person {\n    public name: string\n    public age: number\n    constructor(name: string, age: number) {\n        this.age = age\n        this.name = name\n    }\n\n    public say() {\n        return 'hello'\n    }\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("同样的我们新建一个测试文件 "),a("code",[s._v("person.test.ts")]),s._v(":")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("test('test person', () => {\n    const person = new Person('xiaomuzhu', 11)\n\n    expect(person).toBeInstanceOf(Person)\n    expect(person).not.toEqual({\n        name: 'cxk',\n    })\n})\n\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[a("code",[s._v("toBeInstanceOf")]),s._v(" 用于匹配实例 "),a("code",[s._v("person")]),s._v(" 是否是由 "),a("code",[s._v("Person")]),s._v(" 构造的，"),a("code",[s._v("toEqual")]),s._v(" 是比较两个对象是否相同。")]),s._v(" "),a("h3",{attrs:{id:"异步测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异步测试"}},[s._v("#")]),s._v(" 异步测试")]),s._v(" "),a("p",[s._v("新建一个文件 "),a("code",[s._v("src/getTopics.ts")]),s._v("，我们就声明一个函数，用于读取 Cnode 论坛的首页主题帖：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import axios from 'axios'\n\nconst url = 'https://cnodejs.org/api/v1/topics'\n\nexport async function getTopics() {\n    const res = await axios.get(url)\n    return res\n}\n\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("我们新建一个测试文件 "),a("code",[s._v("src/getTopics.test.ts")]),s._v("，若要编写 async 测试，只要在函数前面使用 async 关键字传递到 test :")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import { getTopics } from \"./getTopics\";\n\ntest('should ', async () => {\n    const { data } = await getTopics()\n\n    expect(data).not.toBeUndefined()\n    expect(data.success).toBeTruthy()\n});\n\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("异步测试在 Node 服务端的测试场景中非常常用。")]),s._v(" "),a("h3",{attrs:{id:"模拟函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模拟函数"}},[s._v("#")]),s._v(" 模拟函数")]),s._v(" "),a("p",[s._v("我们再新建一个文件 "),a("code",[s._v("src/myForEach.ts")]),s._v("，在这里我们创建一个遍历函数：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("export function myForEach(items: number[], callback: (a: number) => void) {\n  for (let index = 0; index < items.length; index++) {\n    callback(items[index]);\n  }\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("为了测试此函数，我们可以使用一个模拟函数，然后检查模拟函数的状态来确保回调函数如期调用。")]),s._v(" "),a("p",[s._v("在 "),a("code",[s._v("src/myForEach.test.ts")]),s._v(" 中，我们可以用 "),a("code",[s._v("jest.fn()")]),s._v(" 模拟函数，来测试调用情况：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import { myForEach } from './myForEach';\n\ntest('should call two', () => {\n    const mockCallback = jest.fn();\n    myForEach([0, 1], mockCallback);\n\n    // 此模拟函数被调用了两次\n    expect(mockCallback.mock.calls.length).toBe(2);\n\n    // 第一次调用函数时的第一个参数是 0\n    expect(mockCallback.mock.calls[0][0]).toBe(0);\n\n    // 第二次调用函数时的第一个参数是 1\n    expect(mockCallback.mock.calls[1][0]).toBe(1);\n});\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("p",[s._v("除此之外我们上面的测试中的模拟函数 "),a("code",[s._v("mockCallback")]),s._v(" 还有一个 "),a("code",[s._v("mock")]),s._v(" 属性，它它保存了此函数被调用的一系列信息，我们把它打印出来: "),a("code",[s._v("console.log(mockCallback.mock)")]),s._v("。")]),s._v(" "),a("p",[s._v("结果如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("      {\n        calls: [ [ 0 ], [ 1 ] ],\n        instances: [ undefined, undefined ],\n        invocationCallOrder: [ 1, 2 ],\n        results: [\n          { type: 'return', value: undefined },\n          { type: 'return', value: undefined }\n        ]\n      }\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("h2",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[s._v("#")]),s._v(" 小结")]),s._v(" "),a("p",[s._v("我们通过 Jest 的安装、配置、使用 学习了在 TypeScript 下进行简单单元测试的内容，严格的代码检测、静态类型检查配合上充分的单元测试，这是保证项目健壮性、可维护性的根本。")]),s._v(" "),a("p",[s._v("参考：")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/32702421",target:"_blank",rel:"noopener noreferrer"}},[s._v("展望 2018 年 JavaScript Testing"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=n.exports}}]);