(window.webpackJsonp=window.webpackJsonp||[]).push([[156],{638:function(s,n,a){"use strict";a.r(n);var e=a(59),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"赋值断言、is-关键字、可调用类型注解和类型推导"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#赋值断言、is-关键字、可调用类型注解和类型推导"}},[s._v("#")]),s._v(" 赋值断言、is 关键字、可调用类型注解和类型推导")]),s._v(" "),a("p",[s._v("到本节为止，我们可以说已经把 TypeScript 的基础知识阶段的内容大致学完了，但是依然有几个零碎的知识点我们没有提到，这里做一个补充。")]),s._v(" "),a("p",[s._v("然后我们会有一个小小的实战环节，之后我们就可以在生产环境中使用 TypeScript，也就是说在 TypeScript 的业务代码编写层面是不会有太多问题了。")]),s._v(" "),a("h2",{attrs:{id:"明确赋值断言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#明确赋值断言"}},[s._v("#")]),s._v(" 明确赋值断言")]),s._v(" "),a("p",[s._v("TypeScript 2.7 引入了一个新的控制严格性的标记: "),a("code",[s._v("--strictPropertyInitialization")])]),s._v(" "),a("p",[s._v("它的作用就是保证变量声明和实例属性都会有初始值:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class StrictClass {\n    foo: number;\n    bar = 'hello';\n    baz: boolean; // 属性“baz”没有初始化表达式，且未在构造函数中明确赋值\n    constructor() {\n        this.foo = 42;\n    }\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("这个功能本来是帮助开发者写出更严格的代码的，但是有的时候它并不是开发者的错误，而是不可避免的情况:")]),s._v(" "),a("ul",[a("li",[s._v("该属性本来就可以是 "),a("code",[s._v("undefined")]),s._v("，这种情况下添加类型undefined")]),s._v(" "),a("li",[s._v("属性被间接初始化了（例如构造函数中调用一个方法，更改了属性的值）")])]),s._v(" "),a("p",[s._v("显然编译器没有开发者聪明，我们需要提醒编译器这里并不需要一个初始值，这就需要「明确赋值断言」。")]),s._v(" "),a("p",[s._v("明确赋值断言是一项功能，它允许将"),a("code",[s._v("!")]),s._v("放置在实例属性和变量声明之后，来表明此属性已经确定它已经被赋值了:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let x: number;\ninitialize();\nconsole.log(x + x); // 在赋值前使用了变量“x”。ts(2454)\nfunction initialize() {\n    x = 10;\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("上面的例子就很棘手,我们明明已经间接地赋值了，但是它依然报错，因此我们 "),a("code",[s._v("let x!: number")]),s._v(" 来修复此问题，同样也可以在表达式中直接使用:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let x: number;\ninitialize();\nconsole.log(x! + x!); //ok\n\nfunction initialize() {\n    x = 10;\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h2",{attrs:{id:"is-关键字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-关键字"}},[s._v("#")]),s._v(" is 关键字")]),s._v(" "),a("p",[s._v("如果你阅读过一些 TypeScript 代码，可能会看到类似于下面这种情况:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("export function foo(arg: string): arg is MyType {\n    return ...\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("你会好奇 "),a("code",[s._v("arg is MyType")]),s._v(" 的 "),a("code",[s._v("is")]),s._v(" 关键字是干什么的?然而 TypeScript 文档中几乎没有体现它的用法.")]),s._v(" "),a("p",[s._v("看下面的例子:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function isString(test: any): test is string{\n    return typeof test === 'string';\n}\n\nfunction example(foo: number | string){\n    if(isString(foo)){\n        console.log('it is a string' + foo);\n        console.log(foo.length); // string function\n    }\n}\nexample('hello world');\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("其实他的作用就是判断 "),a("code",[s._v("test")]),s._v(" 是不是 "),a("code",[s._v("string")]),s._v(" 类型，并根据结果返回 "),a("code",[s._v("boolean")]),s._v(" 相关类型.")]),s._v(" "),a("p",[s._v("看到这里肯定有人有疑问了，这不是多此一举吗?直接返回 "),a("code",[s._v("boolean")]),s._v(" 跟这个有什么区别?")]),s._v(" "),a("p",[s._v("把我们把 "),a("code",[s._v("test is string")]),s._v(" 换成 "),a("code",[s._v("boolean")]),s._v(" 看看效果:")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/11/16dbb1378749a2c3?w=656&h=271&f=png&s=54337",alt:"2019-10-08-16-00-55"}})]),s._v(" "),a("p",[s._v("我们看到直接报错，这是为什么?")]),s._v(" "),a("p",[s._v("因为 "),a("code",[s._v("is")]),s._v(" 为关键字的「类型谓语」把参数的类型范围缩小了,当使用了 "),a("code",[s._v("test is string")]),s._v(" 之后,我们通过 "),a("code",[s._v("isString(foo) === true")]),s._v(" 明确知道其中的参数是 "),a("code",[s._v("string")]),s._v(",而 "),a("code",[s._v("boolean")]),s._v(" 并没有这个能力,这就是 "),a("code",[s._v("is")]),s._v(" 关键字存在的意义.")]),s._v(" "),a("h2",{attrs:{id:"可调用类型注解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可调用类型注解"}},[s._v("#")]),s._v(" 可调用类型注解")]),s._v(" "),a("p",[s._v("我们已经可以用静态类型注解我们的函数、参数等等，但是假设我们有一个接口，我们如何操作才能让它被注解为可执行的:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("interface ToString {\n  \n}\n\ndeclare const sometingToString: ToString;\n\nsometingToString() // This expression is not callable. Type 'ToString' has no call signatures.ts(2349)\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("上述代码会报错，因为表达式是不可调用的。")]),s._v(" "),a("p",[s._v("我们必须用一种方法让编译器知道这个是可调用的，我们可以这样：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("interface ToString {\n  (): string\n}\n\ndeclare const sometingToString: ToString;\n\nsometingToString() // ok\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("那么，当我们想实例化它呢？")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('interface ToString {\n  (): string\n}\n\ndeclare const sometingToString: ToString;\n\nnew sometingToString() // 其目标缺少构造签名的 "new" 表达式隐式具有 "any" 类型\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("上述方法就失灵了，我们可以加上 "),a("code",[s._v("new")]),s._v(" 来表示此接口可以实例化。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("interface ToString {\n  new (): string\n}\n\ndeclare const sometingToString: ToString;\n\nnew sometingToString() // ok\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h2",{attrs:{id:"类型推导"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型推导"}},[s._v("#")]),s._v(" 类型推导")]),s._v(" "),a("h3",{attrs:{id:"函数返回类型推导"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数返回类型推导"}},[s._v("#")]),s._v(" 函数返回类型推导")]),s._v(" "),a("p",[s._v("我们在小册子的一开始就见识了「类型推导」的魅力：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('function greeter(person: string) {\n    return "Hello, " + person\n}\n\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("此时我们可以看到，"),a("code",[s._v("greeter")]),s._v("函数自动加上了返回值类型，这是 TypeScript 自带的_类型推导_。")]),s._v(" "),a("h3",{attrs:{id:"多类型联合推导"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多类型联合推导"}},[s._v("#")]),s._v(" 多类型联合推导")]),s._v(" "),a("p",[s._v("我们假设这样一个数组：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let arr1 = [1, 'one', 1n]\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("我们看看它的类型推导结果:")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/11/16dbb137881d5426?w=424&h=70&f=png&s=10757",alt:"2019-10-10-21-19-58"}})]),s._v(" "),a("p",[s._v("编译器把它推导成了一个联合类型："),a("code",[s._v("string | number | bigint")])]),s._v(" "),a("h3",{attrs:{id:"解构推导"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解构推导"}},[s._v("#")]),s._v(" 解构推导")]),s._v(" "),a("p",[s._v("在解构赋值过程中，也会有类型推导")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const bar = [1, 2];\nlet [a, b] = bar;\n\na = 'hello'; // Error：不能把 'string' 类型赋值给 'number' 类型\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h3",{attrs:{id:"类型推导的不足"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型推导的不足"}},[s._v("#")]),s._v(" 类型推导的不足")]),s._v(" "),a("p",[s._v("类型推导似乎无处不在，我们也享受这类型推导的好处，但是类型推导也有其力所不及之处，比如下面代码：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const action = {\n  type: 'update',\n  payload: {\n    id: 10\n  }\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("类型推导的结果是这样的：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/11/16dbb13788437699?w=170&h=134&f=png&s=10697",alt:"2019-10-10-21-26-20"}})]),s._v(" "),a("p",[s._v("这似乎没什么不对，但是我们需要的 "),a("code",[s._v("type")]),s._v(" 属性的类型是「字符串字面量」类型，而不是 string，这就是类型推导的无法做到的了。")]),s._v(" "),a("p",[s._v("这个时候或者我们用类型断言帮助编译器，或者声明一个接口，类型推导就难有用武之地了。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("interface Action {\n  type: 'update',\n  payload: {\n    id: number\n  }\n}\n\nconst action: Action = {\n  type: 'update',\n  payload: {\n    id: 10\n  }\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("h2",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[s._v("#")]),s._v(" 小结")]),s._v(" "),a("p",[s._v("除了上面的知识点之外还有非常多的知识点，但是由于并不常用我们就不一一介绍，这些知识点在官方文档中体现的也不多,建议去阅读"),a("a",{attrs:{href:"https://www.typescriptlang.org/docs/handbook/release-notes/overview.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("TypeScript的版本概要"),a("OutboundLink")],1),s._v("，在每个更新内容中都会有一些新的信息提供给我们。")])])}),[],!1,null,null,null);n.default=t.exports}}]);