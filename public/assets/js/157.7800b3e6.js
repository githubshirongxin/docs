(window.webpackJsonp=window.webpackJsonp||[]).push([[157],{640:function(s,a,t){"use strict";t.r(a);var e=t(59),n=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"typescript-与-react-实战-组件篇上"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#typescript-与-react-实战-组件篇上"}},[s._v("#")]),s._v(" TypeScript 与 React 实战(组件篇上)")]),s._v(" "),t("p",[s._v("我们虽然已经通过前几节了解了 TypeScript 相关的基础知识，但是这不足以保证我们在实际项目中可以灵活运用，比如现在绝大部分前端开发者的项目都是依赖于框架的，因此我们需要几节来讲一下React与TypeScript应该如何结合运用。")]),s._v(" "),t("p",[s._v("如果你仅仅了解了一下 TypeScript 的基础知识就上手框架会碰到非常多的坑（比如笔者自己），如果你是 React 开发者一定要看过本节之后再进行实践。")]),s._v(" "),t("h2",{attrs:{id:"快速启动-typescript-版-react"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#快速启动-typescript-版-react"}},[s._v("#")]),s._v(" 快速启动 TypeScript 版 react")]),s._v(" "),t("p",[s._v("使用 TypeScript 编写 react 代码，除了需要 "),t("code",[s._v("typescript")]),s._v(" 这个库之外，还至少需要额外的两个库:")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("yarn add -D @types/{react,react-dom}\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("可能有人好奇"),t("code",[s._v("@types")]),s._v("开头的这种库是什么？")]),s._v(" "),t("p",[s._v("由于非常多的 JavaScript 库并没有提供自己关于 TypeScript 的声明文件，导致 TypeScript 的使用者无法享受这种库带来的类型，因此社区中就出现了一个项目 "),t("a",{attrs:{href:"https://github.com/DefinitelyTyped/DefinitelyTyped",target:"_blank",rel:"noopener noreferrer"}},[s._v("DefinitelyTyped"),t("OutboundLink")],1),s._v("，他定义了目前市面上绝大多数的 JavaScript 库的声明，当人们下载 JavaScript 库相关的 "),t("code",[s._v("@types")]),s._v(" 声明时，就可以享受此库相关的类型定义了。")]),s._v(" "),t("p",[s._v("当然，为了方便我们选择直接用 TypeScript 官方提供的 react 启动模板。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("create-react-app react-ts-app --scripts-version=react-scripts-ts\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h2",{attrs:{id:"无状态组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#无状态组件"}},[s._v("#")]),s._v(" 无状态组件")]),s._v(" "),t("p",[s._v("我们初始化好了上述模板之后就需要进行正式编写代码了。")]),s._v(" "),t("p",[s._v("无状态组件是一种非常常见的 react 组件，主要用于展示 UI，初始的模板中就有一个 logo 图，我们就可以把它封装成一个 "),t("code",[s._v("Logo")]),s._v(" 组件。")]),s._v(" "),t("p",[s._v("在 JavaScript 中我们往往是这样封装组件的：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("import * as React from 'react'\n\nexport const Logo = props => {\n    const { logo, className, alt } = props\n\n    return (\n        <img src={logo} className={className} alt={alt} />\n    )\n}\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("p",[s._v("但是在TypeScript中会报错:")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/11/16dbb1393d2e9036?w=570&h=211&f=png&s=32809",alt:"2019-07-02-11-35-57"}})]),s._v(" "),t("p",[s._v("原因就是我们没有定义 "),t("code",[s._v("props")]),s._v(" 的类型,我们用 "),t("code",[s._v("interface")]),s._v(" 定义一下 props 的类型，那么是不是这样就行了：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("import * as React from 'react'\n\ninterface IProps {\n    logo?: string\n    className?: string\n    alt?: string\n}\n\nexport const Logo = (props: IProps) => {\n    const { logo, className, alt } = props\n\n    return (\n        <img src={logo} className={className} alt={alt} />\n    )\n}\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br")])]),t("p",[s._v("这样做在这个例子中看似没问题，但是当我们要用到 "),t("code",[s._v("children")]),s._v(" 的时候是不是又要去定于 "),t("code",[s._v("children")]),s._v(" 类型？")]),s._v(" "),t("p",[s._v("比如这样:")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("interface IProps {\n    logo?: string\n    className?: string\n    alt?: string\n    children?: ReactNode\n}\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("其实有一种更规范更简单的办法，"),t("code",[s._v("type SFC<P>")]),s._v(" 其中已经定义了 "),t("code",[s._v("children")]),s._v(" 类型。")]),s._v(" "),t("p",[s._v("我们只需要这样使用:")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("export const Logo: React.SFC<IProps> = props => {\n    const { logo, className, alt } = props\n\n    return (\n        <img src={logo} className={className} alt={alt} />\n    )\n}\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("我们现在就可以替换 "),t("code",[s._v("App.tsx")]),s._v(" 中的 "),t("code",[s._v("logo")]),s._v(" 组件，可以看到相关的props都会有代码提示：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/11/16dbb1393d464f07?w=820&h=349&f=png&s=63788",alt:"2019-07-02-11-46-59"}})]),s._v(" "),t("p",[s._v("如果我们这个组件是业务中的通用组件的话，甚至可以加上注释:")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("interface IProps {\n    /**\n     * logo的地址\n     */\n    logo?: string\n    className?: string\n    alt?: string\n}\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[s._v("这样在其他同事调用此组件的时候，除了代码提示外甚至会有注释的说明:")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/11/16dbb1393d53eeaf?w=848&h=309&f=png&s=67044",alt:"2019-07-02-11-50-33"}})]),s._v(" "),t("h2",{attrs:{id:"有状态组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#有状态组件"}},[s._v("#")]),s._v(" 有状态组件")]),s._v(" "),t("p",[s._v("现在我们开始编写一个Todo应用:")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/11/16dbb1393d7f04ed?w=741&h=413&f=png&s=36001",alt:"2019-07-02-12-30-32"}})]),s._v(" "),t("p",[s._v("首先需要编写一个 "),t("code",[s._v("todoInput")]),s._v(" 组件:")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/11/16dbb1393d9ec4fc?w=554&h=63&f=png&s=9629",alt:"2019-07-02-12-52-55"}})]),s._v(" "),t("p",[s._v("如果我们按照 JavaScript 的写法，只要写一个开头就会碰到一堆报错")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/11/16dbb1393daf4a41?w=488&h=243&f=png&s=30000",alt:"2019-07-04-15-03-54"}})]),s._v(" "),t("p",[s._v("有状态组件除了 props 之外还需要 state ，对于 class 写法的组件要泛型的支持，即 "),t("code",[s._v("Component<P, S>")]),s._v(" ，因此需要传入传入 state 和 props 的类型，这样我们就可以正常使用 props 和 state 了。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("import * as React from 'react'\n\ninterface Props {\n    handleSubmit: (value: string) => void\n}\n\ninterface State {\n    itemText: string\n}\n\nexport class TodoInput extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props)\n        this.state = {\n            itemText: ''\n        }\n    }\n}\n\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br")])]),t("p",[s._v("细心的人会问，这个时候需不需要给 "),t("code",[s._v("Props")]),s._v(" 和 "),t("code",[s._v("State")]),s._v(" 加上 "),t("code",[s._v("Readonly")]),s._v("，因为我们的数据都是不可变的，这样会不会更严谨？")]),s._v(" "),t("p",[s._v("其实是不用的，因为React的声明文件已经自动帮我们包装过上述类型了，已经标记为 "),t("code",[s._v("readonly")]),s._v("。")]),s._v(" "),t("p",[s._v("如下：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/11/16dbb1395f63a38a?w=664&h=233&f=png&s=35318",alt:"2019-07-04-15-08-06"}})]),s._v(" "),t("p",[s._v("接下来我们需要添加组件方法，大多数情况下这个方法是本组件的私有方法，这个时候需要加入访问控制符 "),t("code",[s._v("private")]),s._v("。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("    private updateValue(value: string) {\n        this.setState({ itemText: value })\n    }\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("接下来也是大家经常会碰到的一个不太好处理的类型，如果我们想取某个组件的 "),t("code",[s._v("ref")]),s._v("，那么应该如何操作？")]),s._v(" "),t("p",[s._v("比如我们需要在组件更新完毕之后，使得 "),t("code",[s._v("input")]),s._v(" 组件 "),t("code",[s._v("focus")]),s._v("。")]),s._v(" "),t("p",[s._v("首先，我们需要用"),t("code",[s._v("React.createRef")]),s._v("创建一个ref，然后在对应的组件上引入即可。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('private inputRef = React.createRef<HTMLInputElement>()\n...\n\n<input\n    ref={this.inputRef}\n    className="edit"\n    value={this.state.itemText}\n/>\n\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[s._v("需要注意的是，在 "),t("code",[s._v("createRef")]),s._v(" 这里需要一个泛型，这个泛型就是需要 "),t("code",[s._v("ref")]),s._v(" 组件的类型，因为这个是 input 组件，所以类型是 "),t("code",[s._v("HTMLInputElement")]),s._v("，当然如果是 "),t("code",[s._v("div")]),s._v(" 组件的话那么这个类型就是 "),t("code",[s._v("HTMLDivElement")]),s._v("。")]),s._v(" "),t("h2",{attrs:{id:"受控组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#受控组件"}},[s._v("#")]),s._v(" 受控组件")]),s._v(" "),t("p",[s._v("再接着讲 "),t("code",[s._v("TodoInput")]),s._v(" 组件，其实此组件也是一个受控组件，当我们改变 "),t("code",[s._v("input")]),s._v(" 的 "),t("code",[s._v("value")]),s._v(" 的时候需要调用 "),t("code",[s._v("this.setState")]),s._v(" 来不断更新状态，这个时候就会用到『事件』类型。")]),s._v(" "),t("p",[s._v("由于 React 内部的事件其实都是合成事件，也就是说都是经过 React 处理过的，所以并不原生事件，因此通常情况下我们这个时候需要定义 React 中的事件类型。")]),s._v(" "),t("p",[s._v("对于 "),t("code",[s._v("input")]),s._v(" 组件 "),t("code",[s._v("onChange")]),s._v(" 中的事件，我们一般是这样声明的:")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("private updateValue(e: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({ itemText: e.target.value })\n}\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("当我们需要提交表单的时候，需要这样定义事件类型:")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("    private handleSubmit(e: React.FormEvent<HTMLFormElement>) {\n        e.preventDefault()\n        if (!this.state.itemText.trim()) {\n            return\n        }\n\n        this.props.handleSubmit(this.state.itemText)\n        this.setState({itemText: ''})\n    }\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("p",[s._v("那么这么多类型的定义，我们怎么记得住呢？遇到其它没见过的事件，难道要去各种搜索才能定义类型吗？其实这里有一个小技巧,当我们在组件中输入事件对应的名称时，会有相关的定义提示，我们只要用这个提示中的类型就可以了。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/11/16dbb139655b4419?w=776&h=191&f=png&s=39589",alt:"2019-07-04-18-55-13"}})]),s._v(" "),t("h2",{attrs:{id:"默认属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#默认属性"}},[s._v("#")]),s._v(" 默认属性")]),s._v(" "),t("p",[s._v("React 中有时候会运用很多默认属性，尤其是在我们编写通用组件的时候，之前我们介绍过一个关于默认属性的小技巧，就是利用 class 来同时声明类型和创建初始值。")]),s._v(" "),t("p",[s._v("再回到我们这个项目中，假设我们需要通过 props 来给 "),t("code",[s._v("input")]),s._v(" 组件传递属性，而且需要初始值，我们这个时候完全可以通过 class 来进行代码简化。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("// props.type.ts\n\ninterface InputSetting {\n    placeholder?: string\n    maxlength?: number\n}\n\nexport class TodoInputProps {\n    public handleSubmit: (value: string) => void\n    public inputSetting?: InputSetting = {\n        maxlength: 20,\n        placeholder: '请输入todo',\n    }\n}\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("p",[s._v("再回到 "),t("code",[s._v("TodoInput")]),s._v(" 组件中，我们直接用 class 作为类型传入组件，同时实例化类，作为默认属性。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/11/16dbb13966297992?w=710&h=101&f=png&s=29871",alt:"2019-07-04-19-45-53"}})]),s._v(" "),t("p",[s._v("用 class 作为 props 类型以及生产默认属性实例有以下好处：")]),s._v(" "),t("ul",[t("li",[s._v("代码量少：一次编写，既可以作为类型也可以实例化作为值使用")]),s._v(" "),t("li",[s._v("避免错误：分开编写一旦有一方造成书写错误不易察觉")])]),s._v(" "),t("p",[s._v("这种方法虽然不错，但是之后我们会发现问题了，虽然我们已经声明了默认属性，但是在使用的时候，依然显示 "),t("code",[s._v("inputSetting")]),s._v(" 可能未定义。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/11/16dbb13966f57ae1?w=754&h=290&f=png&s=61998",alt:"2019-07-04-19-46-39"}})]),s._v(" "),t("p",[s._v("在这种情况下有一种最快速的解决办法，就是加"),t("code",[s._v("!")]),s._v(",它的作用就是告诉编译器这里不是undefined，从而避免报错。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/11/16dbb13968984b2c?w=562&h=105&f=png&s=31394",alt:"2019-07-04-19-51-17"}})]),s._v(" "),t("p",[s._v("如果你觉得这个方法过于粗暴，那么可以选择三目运算符做一个简单的判断:")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/11/16dbb1396bc01bff?w=626&h=47&f=png&s=20685",alt:"2019-07-04-19-53-27"}})]),s._v(" "),t("p",[s._v("如果你还觉得这个方法有点繁琐，因为如果这种情况过多，我们需要额外写非常多的条件判断，而更重要的是，我们明明已经声明了值，就不应该再做条件判断了，应该有一种方法让编译器自己推导出这里的类型不是undefined，这就涉及到一些高级类型了，我们下节再讲。")]),s._v(" "),t("h2",{attrs:{id:"小结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[s._v("#")]),s._v(" 小结")]),s._v(" "),t("p",[s._v("本节我们总结了最常见的几种组件在 TypeScript 下的编写方式，有了本节的知识储备，你可以比较轻松得编写一些常见的 TypeScript 组件了，但是这还不够，一些较复杂的组件依然需要一些高级类型的帮助，我们下一节会详细讲解。")])])}),[],!1,null,null,null);a.default=n.exports}}]);