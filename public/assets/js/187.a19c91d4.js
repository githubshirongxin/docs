(window.webpackJsonp=window.webpackJsonp||[]).push([[187],{670:function(s,n,a){"use strict";a.r(n);var e=a(59),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"深入理解枚举类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#深入理解枚举类型"}},[s._v("#")]),s._v(" 深入理解枚举类型")]),s._v(" "),a("p",[s._v("枚举类型是很多语言都拥有的类型,它用于声明一组命名的常数,当一个变量有几种可能的取值时,可以将它定义为枚举类型。")]),s._v(" "),a("h2",{attrs:{id:"数字枚举"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数字枚举"}},[s._v("#")]),s._v(" 数字枚举")]),s._v(" "),a("p",[s._v("当我们声明一个枚举类型是,虽然没有给它们赋值,但是它们的值其实是默认的数字类型,而且默认从0开始依次累加:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("enum Direction {\n    Up,\n    Down,\n    Left,\n    Right\n}\n\nconsole.log(Direction.Up === 0); // true\nconsole.log(Direction.Down === 1); // true\nconsole.log(Direction.Left === 2); // true\nconsole.log(Direction.Right === 3); // true\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("因此当我们把第一个值赋值后,后面也会根据第一个值进行累加:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("enum Direction {\n    Up = 10,\n    Down,\n    Left,\n    Right\n}\n\nconsole.log(Direction.Up, Direction.Down, Direction.Left, Direction.Right); // 10 11 12 13\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h2",{attrs:{id:"字符串枚举"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串枚举"}},[s._v("#")]),s._v(" 字符串枚举")]),s._v(" "),a("p",[s._v("枚举类型的值其实也可以是字符串类型：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("enum Direction {\n    Up = 'Up',\n    Down = 'Down',\n    Left = 'Left',\n    Right = 'Right'\n}\n\nconsole.log(Direction['Right'], Direction.Up); // Right Up\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h2",{attrs:{id:"异构枚举"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异构枚举"}},[s._v("#")]),s._v(" 异构枚举")]),s._v(" "),a("p",[s._v("既然我们已经有了字符串枚举和数字枚举，那么这两个枚举是不是可以混合使用呢？")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('\nenum BooleanLikeHeterogeneousEnum {\n    No = 0,\n    Yes = "YES",\n}\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("是的，这样也是没问题的，通常情况下我们很少会这样使用枚举，但是从技术的角度来说，它是可行的。")]),s._v(" "),a("h2",{attrs:{id:"反向映射"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#反向映射"}},[s._v("#")]),s._v(" 反向映射")]),s._v(" "),a("p",[s._v("我们看一个例子：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("enum Direction {\n    Up,\n    Down,\n    Left,\n    Right\n}\n\nconsole.log(Direction.Up === 0); // true\nconsole.log(Direction.Down === 1); // true\nconsole.log(Direction.Left === 2); // true\nconsole.log(Direction.Right === 3); // true\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("这就是我们数字枚举那一部分的例子，我们可以通过枚举名字获取枚举值，这当然看起来没问题，那么能不能通过枚举值获取枚举名字呢？")]),s._v(" "),a("p",[s._v("是可以的：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("enum Direction {\n    Up,\n    Down,\n    Left,\n    Right\n}\n\nconsole.log(Direction['Up']); // 0\n\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("这就很奇怪了，我们印象中一个 JavaScript 对象一般都是正向映射的，即 "),a("code",[s._v("name => value")]),s._v("，为什么在枚举中是可以正反向同时映射的？即 "),a("code",[s._v("name <=> value")]),s._v("。")]),s._v(" "),a("p",[s._v("我们往下看，通过了解枚举的本质，我们就可以理解这种正反向同时映射的特性了。")]),s._v(" "),a("h2",{attrs:{id:"枚举的本质"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#枚举的本质"}},[s._v("#")]),s._v(" 枚举的本质")]),s._v(" "),a("p",[s._v("以上面的 "),a("code",[s._v("Direction")]),s._v(" 枚举类型为例,我们不妨看一下枚举类型被编译为 JavaScript 后是什么样子:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var Direction;\n(function (Direction) {\n    Direction[Direction["Up"] = 10] = "Up";\n    Direction[Direction["Down"] = 11] = "Down";\n    Direction[Direction["Left"] = 12] = "Left";\n    Direction[Direction["Right"] = 13] = "Right";\n})(Direction || (Direction = {}));\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("这个编译后的代码可能看起来比较复杂,不过我们可以把"),a("code",[s._v("Direction")]),s._v("看成一个对象,比如我们在 TypeScript 中做几个小实验:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("enum Direction {\n    Up = 10,\n    Down,\n    Left,\n    Right\n}\n\nconsole.log(Direction[10], Direction['Right']); // Up 13\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("原因就在编译后的 JavaScript 中体现出来了,因为 "),a("code",[s._v('Direction[Direction["Up"] = 10] = "Up"')]),s._v(" 也就是 "),a("code",[s._v('Direction[10] = "Up"')]),s._v(" ,所以我们可以把枚举类型看成一个JavaScript对象，而由于其特殊的构造，导致其拥有正反向同时映射的特性。")]),s._v(" "),a("h2",{attrs:{id:"常量枚举"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常量枚举"}},[s._v("#")]),s._v(" 常量枚举")]),s._v(" "),a("p",[s._v("枚举其实可以被 "),a("code",[s._v("const")]),s._v(" 声明为常量的,这样有什么好处?我们看以下例子:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const enum Direction {\n    Up = 'Up',\n    Down = 'Down',\n    Left = 'Left',\n    Right = 'Right'\n}\n\nconst a = Direction.Up;\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("大家猜一下它被编译为 JavaScript 后是怎样的?")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var a = "Up";\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("我们在上面看到枚举类型会被编译为 JavaScript 对象,怎么这里没有了?")]),s._v(" "),a("p",[s._v("这就是常量枚举的作用,因为下面的变量 "),a("code",[s._v("a")]),s._v(" 已经使用过了枚举类型,之后就没有用了,也没有必要存在与 JavaScript 中了, TypeScript 在这一步就把 "),a("code",[s._v("Direction")]),s._v(" 去掉了,我们直接使用 "),a("code",[s._v("Direction")]),s._v(" 的值即可,这是性能提升的一个方案。")]),s._v(" "),a("blockquote",[a("p",[s._v("如果你非要 TypeScript 保留对象 Direction ,那么可以添加编译选项 "),a("code",[s._v("--preserveConstEnums")])])]),s._v(" "),a("h2",{attrs:{id:"联合枚举与枚举成员的类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#联合枚举与枚举成员的类型"}},[s._v("#")]),s._v(" 联合枚举与枚举成员的类型")]),s._v(" "),a("p",[s._v("我们假设枚举的所有成员都是字面量类型的值，那么枚举的每个成员和枚举值本身都可以作为类型来使用，")]),s._v(" "),a("ul",[a("li",[s._v("任何字符串字面量,如：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const enum Direction {\n    Up = 'Up',\n    Down = 'Down',\n    Left = 'Left',\n    Right = 'Right'\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("ul",[a("li",[s._v("任何数字字面量,如：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("enum Direction {\n    Up,\n    Down,\n    Left,\n    Right\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("ul",[a("li",[s._v("应用了一元"),a("code",[s._v("-")]),s._v("符号的数字字面量,如:")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("enum Direction {\n    Up = -1,\n    Down = -2,\n    Left = -3,\n    Right = -4,\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h3",{attrs:{id:"枚举成员类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#枚举成员类型"}},[s._v("#")]),s._v(" 枚举成员类型")]),s._v(" "),a("p",[s._v("当所有枚举成员都拥有字面量枚举值时，它就带有了一种特殊的语义，即枚举成员成为了类型。")]),s._v(" "),a("p",[s._v("比如我们声明一个数字类型：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("enum Direction {\n    Up,\n    Down,\n    Left,\n    Right\n}\n\nconst a = 0\n\nconsole.log(a === Direction.Up) // true\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("我们把成员当做值使用，看来是没问题的，因为成员值本身就是0，那么我们再加几行代码：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("type c = 0\n\ndeclare let b: c\n\nb = 1 // 不能将类型“1”分配给类型“0”\nb = Direction.Up // ok\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("我们看到，上面的结果显示这个枚举的成员居然也可以被当做类型使用，这就是枚举成员当做类型使用的情况。")]),s._v(" "),a("h2",{attrs:{id:"联合枚举类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#联合枚举类型"}},[s._v("#")]),s._v(" 联合枚举类型")]),s._v(" "),a("p",[s._v("由于联合联合枚举，类型系统可以知道枚举里的值的集合。")]),s._v(" "),a("blockquote",[a("p",[s._v("联合类型会在后面的章节提到")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("enum Direction {\n    Up,\n    Down,\n    Left,\n    Right\n}\n\ndeclare let a: Direction\n\nenum Animal {\n    Dog,\n    Cat\n}\n\na = Direction.Up // ok\na = Animal.Dog // 不能将类型“Animal.Dog”分配给类型“Direction”\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("p",[s._v("我们把 "),a("code",[s._v("a")]),s._v(" 声明为 "),a("code",[s._v("Direction")]),s._v(" 类型，可以看成我们声明了一个联合类型 "),a("code",[s._v("Direction.Up | Direction.Down | Direction.Left | Direction.Right")]),s._v("，只有这四个类型其中的成员才符合要求。")]),s._v(" "),a("h2",{attrs:{id:"枚举合并"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#枚举合并"}},[s._v("#")]),s._v(" 枚举合并")]),s._v(" "),a("p",[s._v("我们可以分开声明枚举,他们会自动合并")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("enum Direction {\n    Up = 'Up',\n    Down = 'Down',\n    Left = 'Left',\n    Right = 'Right'\n}\n\nenum Direction {\n    Center = 1\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("编译为 JavaScript 后的代码如下:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var Direction;\n(function (Direction) {\n    Direction["Up"] = "Up";\n    Direction["Down"] = "Down";\n    Direction["Left"] = "Left";\n    Direction["Right"] = "Right";\n})(Direction || (Direction = {}));\n(function (Direction) {\n    Direction[Direction["Center"] = 1] = "Center";\n})(Direction || (Direction = {}));\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("因此上面的代码并不冲突。")]),s._v(" "),a("h2",{attrs:{id:"为枚举添加静态方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为枚举添加静态方法"}},[s._v("#")]),s._v(" 为枚举添加静态方法")]),s._v(" "),a("p",[s._v("借助 "),a("code",[s._v("namespace")]),s._v(" 命名空间，我们甚至可以给枚举添加静态方法。")]),s._v(" "),a("p",[s._v("\b我们举个简单的例子，假设有十二个月份:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("enum Month {\n    January,\n    February,\n    March,\n    April,\n    May,\n    June,\n    July,\n    August,\n    September,\n    October,\n    November,\n    December,\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("我们要编写一个静态方法，这个方法可以帮助我们把夏天的月份找出来:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function isSummer(month: Month) {\n    switch (month) {\n        case Month.June:\n        case Month.July:\n        case Month.August:\n            return true;\n        default:\n            return false\n    }\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("想要把两者结合就需要借助命名空间的力量了:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("namespace Month {\n    export function isSummer(month: Month) {\n        switch (month) {\n            case Month.June:\n            case Month.July:\n            case Month.August:\n                return true;\n            default:\n                return false\n        }\n    }\n}\n\nconsole.log(Month.isSummer(Month.January)) // false\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("h2",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[s._v("#")]),s._v(" 小结")]),s._v(" "),a("p",[s._v("我们本节深入理解了枚举类型,通过编译后的 JavaScript 了解到其实本质上是 JavaScript 对象.")])])}),[],!1,null,null,null);n.default=t.exports}}]);