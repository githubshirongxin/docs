(window.webpackJsonp=window.webpackJsonp||[]).push([[153],{636:function(s,n,a){"use strict";a.r(n);var e=a(59),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"装饰器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#装饰器"}},[s._v("#")]),s._v(" 装饰器")]),s._v(" "),a("p",[s._v("装饰器(decorator)最早在 Python 中被引入,它的主要作用是给一个已有的方法或类扩展一些新的行为，而不是去直接修改它本身.")]),s._v(" "),a("p",[s._v("在 ES2015 进入 Class 之后,当我们需要在多个不同的类之间共享或者扩展一些方法或行为的时候，代码会变得错综复杂，极其不优雅，这也就是装饰器被提出的一个很重要的原因.")]),s._v(" "),a("p",[s._v("但是推进比较缓慢,到目前为止也仅仅在 "),a("code",[s._v("stage 2")]),s._v(" 阶段.")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/11/16dbb126ed5c70aa?w=286&h=176&f=png&s=14481",alt:"2019-09-20-23-27-48"}})]),s._v(" "),a("p",[s._v("所以在 JavaScript 中我们需要 Babel 插件 "),a("code",[s._v("babel-plugin-transform-decorators-legacy")]),s._v(" 来支持 decorator,而在 Typescript 中我们需要在 "),a("code",[s._v("tsconfig.json")]),s._v(" 里面开启支持选项 "),a("code",[s._v("experimentalDecorators")]),s._v(".")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// tsconfig.json\n"experimentalDecorators": true\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("我们先明确两个概念:")]),s._v(" "),a("ol",[a("li",[s._v("目前装饰器本质上是一个函数,"),a("code",[s._v("@expression")]),s._v(" 的形式其实是一个语法糖, expression 求值后必须也是一个函数，它会在运行时被调用，被装饰的声明信息做为参数传入.")]),s._v(" "),a("li",[s._v("JavaScript 中的 Class 其实也是一个语法糖,")])]),s._v(" "),a("p",[s._v("比如在 JavaScript 中我们声明一个 Class:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class Person{\n    say() {\n        console.log('hello')\n    }\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("上面这个 Person 类实际上相当于:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function Person() {}\nObject.defineProperty(Cat.prototype, 'say', {\n    value: function() { console.log('hello'); },\n    enumerable: false,\n    configurable: true,\n    writable: true\n});\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h2",{attrs:{id:"类装饰器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类装饰器"}},[s._v("#")]),s._v(" 类装饰器")]),s._v(" "),a("p",[s._v("比如,我们声明一个函数 "),a("code",[s._v("addAge")]),s._v(" 去给 Class 的属性 "),a("code",[s._v("age")]),s._v(" 添加年龄.")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function addAge(constructor: Function) {\n  constructor.prototype.age = 18;\n}\n\n@addAge\nclass Person{\n  name: string;\n  age: number;\n  constructor() {\n    this.name = 'xiaomuzhu';\n  }\n}\n\nlet person = new Person();\n\nconsole.log(person.age); // 18\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("p",[s._v("所以这段代码实际上基本等同于：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Person = addAge(function Person() { ... });\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("当装饰器作为修饰类的时候，会把构造器传递进去。 "),a("code",[s._v("constructor.prototype.age")]),s._v(" 就是在每一个实例化对象上面添加一个 "),a("code",[s._v("age")]),s._v(" 值 这里我们的 "),a("code",[s._v("addAge")]),s._v(" 就添加了一个 "),a("code",[s._v("age")]),s._v(" 值.")]),s._v(" "),a("h2",{attrs:{id:"属性-方法装饰器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性-方法装饰器"}},[s._v("#")]),s._v(" 属性/方法装饰器")]),s._v(" "),a("p",[s._v("实际上一个Class的属性/方法也可以被装饰,我们分别给 "),a("code",[s._v("Person")]),s._v(" 类加上 "),a("code",[s._v("say")]),s._v(" 和 "),a("code",[s._v("run")]),s._v(" 方法.")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 声明装饰器修饰方法/属性\nfunction method(target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n   console.log(target);\n   console.log(\"prop \" + propertyKey);\n   console.log(\"desc \" + JSON.stringify(descriptor) + \"\\n\\n\");\n   descriptor.writable = false;\n};\n\nclass Person{\n  name: string;\n  constructor() {\n    this.name = 'xiaomuzhu';\n  }\n\n  @method\n  say(){\n    return 'instance method';\n  }\n\n  @method\n  static run(){\n    return 'static method';\n  }\n}\n\nconst xmz = new Person();\n\n// 修改实例方法say\nxmz.say = function() {\n  return 'edit'\n}\n\n// 打印结果,检查是否成功修改实例方法\nconsole.log(xmz.say());\n\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br")])]),a("p",[s._v("得到的结果如下:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('Person { say: [Function] }\nprop say\ndesc {"writable":true,"enumerable":true,"configurable":true}\n\n\n[Function: Person] { run: [Function] }\nprop run\ndesc {"writable":true,"enumerable":true,"configurable":true}\n\nxmz.say = function() {\n       ^\nTypeError: Cannot assign to read only property \'say\' of object \'#<Person>\'\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("在属性/方法的装饰器定义过程中,与 class 的装饰器不同,我们的 "),a("code",[s._v("method")]),s._v(" 函数中的参数变为了三个 "),a("code",[s._v("target")]),s._v("、"),a("code",[s._v("propertyKey")]),s._v("、"),a("code",[s._v("descriptor")]),s._v(".")]),s._v(" "),a("p",[s._v("对,这三个参数正是源于"),a("code",[s._v("Object.defineProperty")]),s._v(",也就是上面提到的 Class 本质是语法糖,实际上属性/方法装饰器是借助"),a("code",[s._v("Object.defineProperty")]),s._v("修改类的方法和属性的.")]),s._v(" "),a("p",[s._v("上面的方法装饰器代码相当于下面:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('let descriptor = {\n    value: function() { return \'instance method\'},\n    enumerable: false,\n    configurable: true,\n    writable: true\n};\n\ndescriptor = readonly(Cat.prototype, "say", descriptor) || descriptor;\n\nObject.defineProperty(Cat.prototype, "say", descriptor);\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("blockquote",[a("p",[s._v("访问器属性getter或者setter同样可以用属性装饰器修饰")])]),s._v(" "),a("h2",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[s._v("#")]),s._v(" 小结")]),s._v(" "),a("p",[s._v("虽然装饰器目前依然在 TC39 的草案阶段,但是其实他已经借助 Babel 或者 TypeScript 广泛运用于各种业务开发或者基础库中,这就得益于它强大的抽象与重用特性,比如 Angular 中就大量运用了装饰器,但是仅仅借助装饰器的力量是不够的,我们知道在 Java 中有与装饰器非常像的一种语法叫注解,这就不得不提 Reflect Metadata了.")])])}),[],!1,null,null,null);n.default=t.exports}}]);