(window.webpackJsonp=window.webpackJsonp||[]).push([[155],{639:function(a,e,t){"use strict";t.r(e);var s=t(59),n=Object(s.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"reflect-metadata"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#reflect-metadata"}},[a._v("#")]),a._v(" Reflect Metadata")]),a._v(" "),t("p",[a._v("Reflect Metadata 属于 ES7 的一个提案,它的主要作用就是在声明的时候「添加和读取元数据」，我们上一节用手动的方法在属性上添加元数据，不仅不优雅而且影响开发效率。")]),a._v(" "),t("p",[a._v("Reflect Metadata 目前需要引入 npm 包才能使用:")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("npm i reflect-metadata --save\n\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br")])]),t("p",[a._v("而且需要在 "),t("code",[a._v("tsconfig.json")]),a._v(" 中配置 "),t("code",[a._v("emitDecoratorMetadata")]),a._v(".")]),a._v(" "),t("p",[a._v("之后我们就可以用装饰器来获取、添加元数据了.")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("@Reflect.metadata('name', 'A')\nclass A {\n  @Reflect.metadata('hello', 'world')\n  public hello(): string {\n    return 'hello world'\n  }\n}\n\nReflect.getMetadata('name', A) // 'A'\nReflect.getMetadata('hello', new A()) // 'world'\n\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br")])]),t("p",[a._v("总之:")]),a._v(" "),t("ul",[t("li",[a._v("Relfect Metadata，可以通过装饰器来给类添加一些自定义的信息")]),a._v(" "),t("li",[a._v("然后通过反射将这些信息提取出来")]),a._v(" "),t("li",[a._v("也可以通过反射来添加这些信息")])]),a._v(" "),t("blockquote",[t("p",[a._v("反射, ES6+ 加入的 Relfect 就是用于反射操作的,它允许运行中的 程序对自身进行检查，或者说“自审”，并能直接操作程序的内部属性和方法,反射这个概念其实在 Java/c# 等众多语言中已经广泛运用了.")])]),a._v(" "),t("h2",{attrs:{id:"基础概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基础概念"}},[a._v("#")]),a._v(" 基础概念")]),a._v(" "),t("p",[a._v("我们可以先粗略得扫一下 Relfect Metadata 的 API:")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// define metadata on an object or property\nReflect.defineMetadata(metadataKey, metadataValue, target);\nReflect.defineMetadata(metadataKey, metadataValue, target, propertyKey);\n\n// check for presence of a metadata key on the prototype chain of an object or property\nlet result = Reflect.hasMetadata(metadataKey, target);\nlet result = Reflect.hasMetadata(metadataKey, target, propertyKey);\n\n// check for presence of an own metadata key of an object or property\nlet result = Reflect.hasOwnMetadata(metadataKey, target);\nlet result = Reflect.hasOwnMetadata(metadataKey, target, propertyKey);\n\n// get metadata value of a metadata key on the prototype chain of an object or property\nlet result = Reflect.getMetadata(metadataKey, target);\nlet result = Reflect.getMetadata(metadataKey, target, propertyKey);\n\n// get metadata value of an own metadata key of an object or property\nlet result = Reflect.getOwnMetadata(metadataKey, target);\nlet result = Reflect.getOwnMetadata(metadataKey, target, propertyKey);\n\n// get all metadata keys on the prototype chain of an object or property\nlet result = Reflect.getMetadataKeys(target);\nlet result = Reflect.getMetadataKeys(target, propertyKey);\n\n// get all own metadata keys of an object or property\nlet result = Reflect.getOwnMetadataKeys(target);\nlet result = Reflect.getOwnMetadataKeys(target, propertyKey);\n\n// delete metadata from an object or property\nlet result = Reflect.deleteMetadata(metadataKey, target);\nlet result = Reflect.deleteMetadata(metadataKey, target, propertyKey);\n\n// apply metadata via a decorator to a constructor\n@Reflect.metadata(metadataKey, metadataValue)\nclass C {\n  // apply metadata via a decorator to a method (property)\n  @Reflect.metadata(metadataKey, metadataValue)\n  method() {\n  }\n}\n\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br"),t("span",{staticClass:"line-number"},[a._v("19")]),t("br"),t("span",{staticClass:"line-number"},[a._v("20")]),t("br"),t("span",{staticClass:"line-number"},[a._v("21")]),t("br"),t("span",{staticClass:"line-number"},[a._v("22")]),t("br"),t("span",{staticClass:"line-number"},[a._v("23")]),t("br"),t("span",{staticClass:"line-number"},[a._v("24")]),t("br"),t("span",{staticClass:"line-number"},[a._v("25")]),t("br"),t("span",{staticClass:"line-number"},[a._v("26")]),t("br"),t("span",{staticClass:"line-number"},[a._v("27")]),t("br"),t("span",{staticClass:"line-number"},[a._v("28")]),t("br"),t("span",{staticClass:"line-number"},[a._v("29")]),t("br"),t("span",{staticClass:"line-number"},[a._v("30")]),t("br"),t("span",{staticClass:"line-number"},[a._v("31")]),t("br"),t("span",{staticClass:"line-number"},[a._v("32")]),t("br"),t("span",{staticClass:"line-number"},[a._v("33")]),t("br"),t("span",{staticClass:"line-number"},[a._v("34")]),t("br"),t("span",{staticClass:"line-number"},[a._v("35")]),t("br"),t("span",{staticClass:"line-number"},[a._v("36")]),t("br"),t("span",{staticClass:"line-number"},[a._v("37")]),t("br"),t("span",{staticClass:"line-number"},[a._v("38")]),t("br"),t("span",{staticClass:"line-number"},[a._v("39")]),t("br"),t("span",{staticClass:"line-number"},[a._v("40")]),t("br"),t("span",{staticClass:"line-number"},[a._v("41")]),t("br")])]),t("p",[a._v("看完这些API的命名其实有经验的开发者已经可以猜出来这些API的大概作用了，我们后面会提及，而且这些API接受的参数一共就四种，我们在这里说明一下:")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("Metadata Key")]),a._v(": 元数据的Key，本质上内部实现是一个Map对象，以键值对的形式储存元数据")]),a._v(" "),t("li",[t("code",[a._v("Metadata Value")]),a._v(": 元数据的Value，这个容易理解")]),a._v(" "),t("li",[t("code",[a._v("Target")]),a._v(": 一个对象，表示元数据被添加在的对象上")]),a._v(" "),t("li",[t("code",[a._v("Property")]),a._v(": 对象的属性，元数据不仅仅可以被添加在对象上，也可以作用于属性，这跟装饰器类似")])]),a._v(" "),t("h2",{attrs:{id:"常用方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用方法"}},[a._v("#")]),a._v(" 常用方法")]),a._v(" "),t("h3",{attrs:{id:"设置-获取元数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设置-获取元数据"}},[a._v("#")]),a._v(" 设置/获取元数据")]),a._v(" "),t("p",[a._v("我们首先了解一下如何添加元数据，这个时候需要用到 "),t("code",[a._v("metadata")]),a._v(" API，这个 API 是利用装饰器给目标添加元数据:")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function metadata(\n  metadataKey: any,\n  metadataValue: any\n): {\n  (target: Function): void;\n  (target: Object, propertyKey: string | symbol): void;\n};\n\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br")])]),t("p",[a._v("当然,如果你不想用装饰器这个途径的话，可以用 "),t("code",[a._v("defineMetadata")]),a._v(" 来添加元数据.")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// define metadata on an object or property\nReflect.defineMetadata(metadataKey, metadataValue, target);\nReflect.defineMetadata(metadataKey, metadataValue, target, propertyKey);\n\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("p",[a._v("我们通过装饰器就可以很简单得使用它:")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("import 'reflect-metadata'\n\n@Reflect.metadata('name', 'xiaomuzhu')\nclass Person {\n\n    @Reflect.metadata('time', '2019/10/10')\n    public say(): string {\n        return 'hello'\n    }\n}\n\n\nconsole.log(Reflect.getMetadata('name', Person)) // xiaomuzhu\nconsole.log(Reflect.getMetadata('time', new Person, 'say')) // 2019/10/10\n\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br")])]),t("p",[a._v("可以看见我们在用 "),t("code",[a._v("metadata")]),a._v(" 设置了元数据后，需要用 "),t("code",[a._v("getMetadata")]),a._v(" 将元数据取出，但是为什么在取出方法 "),t("code",[a._v("say")]),a._v(" 上的元数据时需要先把 Class 实例化(即"),t("code",[a._v("new Person")]),a._v(")呢?")]),a._v(" "),t("p",[a._v("原因就在于元数据是被添加在了实例方法上，因此必须实例化才能取出，要想不实例化，则必须加在静态方法上.")]),a._v(" "),t("h3",{attrs:{id:"内置元数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内置元数据"}},[a._v("#")]),a._v(" 内置元数据")]),a._v(" "),t("p",[a._v("上面的例子中，我们的元数据是开发者自己设置的，其实我们也可以获取一些 TypeScript 本身内置的一些元数据。")]),a._v(" "),t("p",[a._v("比如，我们通过 "),t("code",[a._v("design:type")]),a._v(" 作为 key 可以获取目标的类型，比如在上例中，我们获取 "),t("code",[a._v("say")]),a._v(" 方法的类型:")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("...\n// 获取方法的类型\nconst type = Reflect.getMetadata(\"design:type\", new Person, 'say')\n\n[Function: Function]\n\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br")])]),t("p",[a._v("通过 "),t("code",[a._v("design:paramtypes")]),a._v(" 作为 key 可以获取目标参数的类型，比如在上例中，我们获取 "),t("code",[a._v("say")]),a._v(" 方法参数的类型:")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// 获取参数的类型,返回数组\nconst typeParam = Reflect.getMetadata(\"design:paramtypes\", new Person, 'say')\n\n// [Function: String]\n\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("p",[a._v("使用 "),t("code",[a._v("design:returntype")]),a._v(" 元数据键获取有关方法返回类型的信息:")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const typeReturn = Reflect.getMetadata(\"design:returntype\", new Person, 'say')\n// [Function: String]\n\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("h2",{attrs:{id:"实践工作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实践工作"}},[a._v("#")]),a._v(" 实践工作")]),a._v(" "),t("p",[a._v("通过上面的学习我们基本了解了 Reflect Metadata 的使用方法，在实际开发中其实我们会经常用到这个特性。")]),a._v(" "),t("p",[a._v("比如在 Node.js 中有一些框架，比如 Nestjs 会有分散式的装饰器路由，比如 "),t("code",[a._v("@Get")]),a._v(" "),t("code",[a._v("@Post")]),a._v(" 等，正是借助 Reflect Metadata 实现的。")]),a._v(" "),t("p",[a._v("比如一个博客系统的文章路由，可能会是下面的代码:")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("@Controller('/article')\nclass Home {\n    @Get('/content')\n    someGetMethod() {\n      return 'hello world';\n    }\n  \n    @Post('/comment')\n    somePostMethod() {}\n}\n\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br")])]),t("p",[a._v("那么我现在一步步实现一下。")]),a._v(" "),t("p",[a._v("我们先实现一个生产控制器 "),t("code",[a._v("Controller")]),a._v(" 的装饰器工厂函数:")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const METHOD_METADATA = 'method'\nconst PATH_METADATA = 'path'\n// 装饰器工厂函数,接受路由的路径path返回一个装饰器\nconst Controller = (path: string): ClassDecorator => {\n  return target => {\n    Reflect.defineMetadata(PATH_METADATA, path, target);\n  }\n}\n\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br")])]),t("p",[a._v("接着需要实现 "),t("code",[a._v("Get")]),a._v(" "),t("code",[a._v("Post")]),a._v(" 等方法装饰器:")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// 装饰器工厂函数,首先接受一个方法,比如get/post,如何再接受一个路由路径,返回一个携带了上述两个信息的装饰器\nconst createMappingDecorator = (method: string) => (path: string): MethodDecorator => {\n  return (target, key, descriptor) => {\n    Reflect.defineMetadata(PATH_METADATA, path, descriptor.value!);\n    Reflect.defineMetadata(METHOD_METADATA, method, descriptor.value!);\n  }\n}\n\nconst Get = createMappingDecorator('GET');\nconst Post = createMappingDecorator('POST');\n\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br")])]),t("p",[a._v("这里的代码可能理解上有点难度,"),t("code",[a._v("createMappingDecorator")]),a._v(" 是柯里化的，你实际上可以把这个函数看成做了两件事,第一件事，接受一个参数确定 http 的方法，比如是 get 还是 post，然后第二件事，确定路由的路径 path。")]),a._v(" "),t("blockquote",[t("p",[a._v("在计算机科学中，柯里化（英语：Currying），又译为卡瑞化或加里化，是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。")])]),a._v(" "),t("p",[a._v("到这里为止我们已经可以向Class中添加各种必要的元数据了，但是我们还差一步，就是读取元数据。")]),a._v(" "),t("p",[a._v("我们需要一个函数来读取整个Class中的元数据:")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function mapRoute(instance: Object) {\n  const prototype = Object.getPrototypeOf(instance);\n\n  // 筛选出类的 methodName\n  const methodsNames = Object.getOwnPropertyNames(prototype)\n                              .filter(item => !isConstructor(item) && isFunction(prototype[item]))；\n  return methodsNames.map(methodName => {\n    const fn = prototype[methodName];\n\n    // 取出定义的 metadata\n    const route = Reflect.getMetadata(PATH_METADATA, fn);\n    const method = Reflect.getMetadata(METHOD_METADATA, fn)；\n    return {\n      route,\n      method,\n      fn,\n      methodName\n    }\n  })\n};\n\nReflect.getMetadata(PATH_METADATA, Home);\n\nconst info = mapRoute(new Home());\n\nconsole.log(info);\n// [\n//   {\n//     route: '/home',\n//     method: undefined,\n//     fn: [Function: Home],\n//     methodName: 'constructor'\n//   },\n//   {\n//     route: '/article',\n//     method: 'GET',\n//     fn: [Function],\n//     methodName: 'someGetMethod'\n//   },\n//   {\n//     route: '/comment',\n//     method: 'POST',\n//     fn: [Function],\n//     methodName: 'somePostMethod'\n//   }\n// ]\n\n\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br"),t("span",{staticClass:"line-number"},[a._v("19")]),t("br"),t("span",{staticClass:"line-number"},[a._v("20")]),t("br"),t("span",{staticClass:"line-number"},[a._v("21")]),t("br"),t("span",{staticClass:"line-number"},[a._v("22")]),t("br"),t("span",{staticClass:"line-number"},[a._v("23")]),t("br"),t("span",{staticClass:"line-number"},[a._v("24")]),t("br"),t("span",{staticClass:"line-number"},[a._v("25")]),t("br"),t("span",{staticClass:"line-number"},[a._v("26")]),t("br"),t("span",{staticClass:"line-number"},[a._v("27")]),t("br"),t("span",{staticClass:"line-number"},[a._v("28")]),t("br"),t("span",{staticClass:"line-number"},[a._v("29")]),t("br"),t("span",{staticClass:"line-number"},[a._v("30")]),t("br"),t("span",{staticClass:"line-number"},[a._v("31")]),t("br"),t("span",{staticClass:"line-number"},[a._v("32")]),t("br"),t("span",{staticClass:"line-number"},[a._v("33")]),t("br"),t("span",{staticClass:"line-number"},[a._v("34")]),t("br"),t("span",{staticClass:"line-number"},[a._v("35")]),t("br"),t("span",{staticClass:"line-number"},[a._v("36")]),t("br"),t("span",{staticClass:"line-number"},[a._v("37")]),t("br"),t("span",{staticClass:"line-number"},[a._v("38")]),t("br"),t("span",{staticClass:"line-number"},[a._v("39")]),t("br"),t("span",{staticClass:"line-number"},[a._v("40")]),t("br"),t("span",{staticClass:"line-number"},[a._v("41")]),t("br"),t("span",{staticClass:"line-number"},[a._v("42")]),t("br"),t("span",{staticClass:"line-number"},[a._v("43")]),t("br"),t("span",{staticClass:"line-number"},[a._v("44")]),t("br"),t("span",{staticClass:"line-number"},[a._v("45")]),t("br"),t("span",{staticClass:"line-number"},[a._v("46")]),t("br"),t("span",{staticClass:"line-number"},[a._v("47")]),t("br"),t("span",{staticClass:"line-number"},[a._v("48")]),t("br")])]),t("h2",{attrs:{id:"小结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[a._v("#")]),a._v(" 小结")]),a._v(" "),t("p",[a._v("我们通过这一节终于了解了 Reflect Metadata 的基本用法和实践，实际上 Reflect Metadata 的作用就是附加元数据，这一点跟 Java 中的注解非常相似。")]),a._v(" "),t("p",[a._v("Angular 或者 Nestjs 这样的框架就是通过 Decorator + Reflect.metadata 的组合来模拟注解(Annotation)的功能，上面的路由实践环节就是如此。")])])}),[],!1,null,null,null);e.default=n.exports}}]);