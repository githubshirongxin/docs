(window.webpackJsonp=window.webpackJsonp||[]).push([[149],{632:function(s,n,a){"use strict";a.r(n);var e=a(59),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"类型断言与类型守卫"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型断言与类型守卫"}},[s._v("#")]),s._v(" 类型断言与类型守卫")]),s._v(" "),a("h2",{attrs:{id:"类型断言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型断言"}},[s._v("#")]),s._v(" 类型断言")]),s._v(" "),a("p",[s._v("有些情况下 TS 并不能正确或者准确得推断类型,这个时候可能产生不必要的警告或者报错。")]),s._v(" "),a("p",[s._v("比如初学者经常会遇到的一类问题:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const person = {};\n\nperson.name = 'xiaomuzhu'; // Error: 'name' 属性不存在于 ‘{}’\nperson.age = 20; // Error: 'age' 属性不存在于 ‘{}’\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("这个时候该怎么办？由于类型推断，这个时候 "),a("code",[s._v("person")]),s._v(" 的类型就是 "),a("code",[s._v("{}")]),s._v("，根本不存在后添加的那些属性，虽然这个写法在js中完全没问题，但是开发者知道这个 "),a("code",[s._v("person")]),s._v(" 实际是有属性的，只是一开始没有声明而已，但是 typescript 不知道啊，所以就需要类型断言了:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("interface Person {\n  name: string;\n  age: number;\n}\n\nconst person = {} as Person;\n\nperson.name = 'xiaomuzhu';\nperson.age = 20;\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("但是类型断言不要滥用,在万不得已的情况下使用要谨慎,因为你强制把某类型断言会造成 TypeScript 丧失代码提示的能力:")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/11/16dbb11d2c26083a?w=312&h=194&f=png&s=18705",alt:"2019-09-30-01-16-31"}})]),s._v(" "),a("p",[s._v("我们看到虽然我们没有添加 "),a("code",[s._v("age")]),s._v(" 属性,但是IDE并没有提醒我们.")]),s._v(" "),a("p",[s._v("其实上述情况正确的做法是这样的:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("interface Person {\n\tname: string;\n\tage: number;\n}\n\nconst person: Person = {};\n\nperson.name = 'xiaomuzhu';\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("此时 IDE 会马上提向我们遗漏了属性 "),a("code",[s._v("age")]),s._v(".")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/11/16dbb11d2c3510c0?w=733&h=187&f=png&s=33106",alt:"2019-09-30-01-18-14"}})]),s._v(" "),a("h2",{attrs:{id:"双重断言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#双重断言"}},[s._v("#")]),s._v(" 双重断言")]),s._v(" "),a("p",[s._v("虽然类型断言是有强制性的,但并不是万能的,因为一些情况下也会失效:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("interface Person {\n\tname: string;\n\tage: number;\n}\n\nconst person = 'xiaomuzhu' as Person; // Error\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("这个时候会报错,很显然不能把 "),a("code",[s._v("string")]),s._v(" 强制断言为一个接口 "),a("code",[s._v("Person")]),s._v(" ,但是并非没有办法,此时可以使用双重断言:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("interface Person {\n\tname: string;\n\tage: number;\n}\n\nconst person = 'xiaomuzhu' as any as Person; // ok\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("先把类型断言为 "),a("code",[s._v("any")]),s._v(" 再接着断言为你想断言的类型就能实现双重断言，当然上面的例子肯定说不通的，双重断言我们也更不建议滥用，但是在一些少见的场景下也有用武之地，当你遇到事记得有双重断言这个操作即可。")]),s._v(" "),a("h2",{attrs:{id:"类型守卫"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型守卫"}},[s._v("#")]),s._v(" 类型守卫")]),s._v(" "),a("p",[s._v("类型守卫说白了就是缩小类型的范围，我们看几个例子就容易理解了。")]),s._v(" "),a("h3",{attrs:{id:"instanceof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#instanceof"}},[s._v("#")]),s._v(" instanceof")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class Person {\n\tname = 'xiaomuzhu';\n\tage = 20;\n}\n\nclass Animal {\n\tname = 'petty';\n\tcolor = 'pink';\n}\n\nfunction getSometing(arg: Person | Animal) {\n\tif (arg instanceof Animal) {\n\t\tconsole.log(arg.color); // ok\n\t\tconsole.log(arg.age); // Error\n\t}\n\tif (arg instanceof Person) {\n\t\tconsole.log(arg.age); // Error\n\t\tconsole.log(arg.color); // ok\n\t}\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br")])]),a("h3",{attrs:{id:"in"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#in"}},[s._v("#")]),s._v(" in")]),s._v(" "),a("p",[s._v("跟上面的例子类似，"),a("code",[s._v("x in y")]),s._v(" 表示 x 属性在 y 中存在。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class Person {\n\tname = 'xiaomuzhu';\n\tage = 20;\n}\n\nclass Animal {\n\tname = 'petty';\n\tcolor = 'pink';\n}\n\nfunction getSometing(arg: Person | Animal) {\n\tif ('age' in arg) {\n\t\tconsole.log(arg.color); // ok\n\t\tconsole.log(arg.age); // Error\n\t}\n\tif ('color' in arg) {\n\t\tconsole.log(arg.age); // Error\n\t\tconsole.log(arg.color); // ok\n\t}\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br")])]),a("h3",{attrs:{id:"字面量类型守卫"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字面量类型守卫"}},[s._v("#")]),s._v(" 字面量类型守卫")]),s._v(" "),a("p",[s._v("这个功能很重要，在后面的联合辨析类型中会用到此特性，当你在联合类型里使用字面量类型时，它可以帮助检查它们是否有区别:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("type Foo = {\n  kind: 'foo'; // 字面量类型\n  foo: number;\n};\n\ntype Bar = {\n  kind: 'bar'; // 字面量类型\n  bar: number;\n};\n\nfunction doStuff(arg: Foo | Bar) {\n  if (arg.kind === 'foo') {\n    console.log(arg.foo); // ok\n    console.log(arg.bar); // Error\n  } else {\n    console.log(arg.foo); // Error\n    console.log(arg.bar); // ok\n  }\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br")])]),a("h2",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[s._v("#")]),s._v(" 小结")]),s._v(" "),a("p",[s._v("本节的内容不多，基本属于小技巧类，这些小技巧能帮助我们快速解决一下棘手的问题，也能帮助我们编写一些高效的代码。")])])}),[],!1,null,null,null);n.default=t.exports}}]);