(window.webpackJsonp=window.webpackJsonp||[]).push([[163],{646:function(e,n,s){"use strict";s.r(n);var a=s(59),r=Object(a.a)({},(function(){var e=this,n=e.$createElement,s=e._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"高级类型之强大的infer关键字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#高级类型之强大的infer关键字"}},[e._v("#")]),e._v(" 高级类型之强大的infer关键字")]),e._v(" "),s("p",[s("code",[e._v("infer")]),e._v(" 是工具类型和底层库中非常常用的关键字,表示在 extends 条件语句中待推断的类型变量,相对而言也比较难理解,我们不妨从一个 typescript 面试题开始:")]),e._v(" "),s("p",[e._v("我们之前学过 "),s("code",[e._v("ReturnType")]),e._v(" 用于获取函数的返回类型,那么你会如何设计一个 "),s("code",[e._v("ReturnType")]),e._v("?")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("interface User {\n    id: number\n    name: string\n    form?: string\n}\n\ntype Foo = () => User\n\ntype R1 = ReturnType<Foo> // User\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br")])]),s("h2",{attrs:{id:"条件类型与infer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#条件类型与infer"}},[e._v("#")]),e._v(" 条件类型与infer")]),e._v(" "),s("p",[e._v("我们先看一个简单例子:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("type ParamType<T> = T extends (param: infer P) => any ? P : T;\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("上面例子表示,如果 "),s("code",[e._v("T")]),e._v(" 能赋值给 "),s("code",[e._v("(param: infer P) => any")]),e._v("，则结果是"),s("code",[e._v("(param: infer P) => any")]),e._v("类型中的参数 "),s("code",[e._v("P")]),e._v("，否则返回为 "),s("code",[e._v("T")]),e._v(","),s("code",[e._v("infer P")]),e._v("表示待推断的函数参数.")]),e._v(" "),s("p",[e._v("我们再回到开始的面试题,由于接受的函数返回类型是未知的,所以我们需要用"),s("code",[e._v("infer P")]),e._v("代表函数返回类型,如下:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("type ReturnType<T> = T extends (...args: any[]) => infer P ? P : any;\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("其实TypeScript也内置了一个获取构造函数参数的工具类型:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("ConstructorParameters<T>")]),e._v(" – 提取构造函数中参数类型")])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("class TestClass {\n    constructor(public name: string, public age: number) {}\n}\n  \ntype R2 = ConstructorParameters<typeof TestClass> // [string, number]\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br")])]),s("p",[e._v("我们再试着把它实现一下:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("type ConstructorParameters<T extends new (...args: any[]) => any> = T extends new (...args: infer P) => any\n  ? P\n  : never;\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("p",[e._v("我们一步步分析一下这个工具类型:")]),e._v(" "),s("ol",[s("li",[s("code",[e._v("new (...args: any[]")]),e._v("指构造函数,因为构造函数是可以被实例化的.")]),e._v(" "),s("li",[s("code",[e._v("infer P")]),e._v("代表待推断的构造函数参数,如果接受的类型"),s("code",[e._v("T")]),e._v("是一个构造函数,那么返回构造函数的参数类型"),s("code",[e._v("P")]),e._v(",否则什么也不返回,即"),s("code",[e._v("never")]),e._v("类型")])]),e._v(" "),s("h2",{attrs:{id:"infer的应用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#infer的应用"}},[e._v("#")]),e._v(" infer的应用")]),e._v(" "),s("p",[s("code",[e._v("infer")]),e._v("非常强大,由于它的存在我们可以做出非常多的骚操作.")]),e._v(" "),s("ol",[s("li",[s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("tuple转union,比如`[string, number] -> string | number`:\n")])])])])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("type ElementOf<T> = T extends Array<infer E> ? E : never;\n\ntype TTuple = [string, number];\n\ntype ToUnion = ElementOf<ATuple>; // string | number\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br")])]),s("ol",{attrs:{start:"2"}},[s("li",[s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("union 转 intersection，如：`string | number -> string & number`\n")])])])])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends ((k: infer I) => void) ? I : never;\n\ntype Result = UnionToIntersection<string | number>;\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("p",[e._v("union 转 intersection 的操作多用于 mixin 中.")]),e._v(" "),s("h2",{attrs:{id:"小结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[e._v("#")]),e._v(" 小结")]),e._v(" "),s("p",[e._v("本节我们接触了 infer 关键字,简单而言 infer 关键字就是声明一个类型变量,当类型系统给足条件的时候类型就会被推断出来.")]),e._v(" "),s("p",[e._v("至此,我们基本上我们接触完了主要的类型编程内容,接下来我们可以放开身手利用类型编程设计一些非常实用的类型工具.")])])}),[],!1,null,null,null);n.default=r.exports}}]);