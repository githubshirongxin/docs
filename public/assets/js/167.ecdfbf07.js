(window.webpackJsonp=window.webpackJsonp||[]).push([[167],{650:function(s,n,a){"use strict";a.r(n);var e=a(59),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"typescript-的编译原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#typescript-的编译原理"}},[s._v("#")]),s._v(" TypeScript 的编译原理")]),s._v(" "),a("p",[s._v("我们的学习从本节开始进入了新的阶段，之前我们的所有内容只停留在 TypeScript 的使用阶段，而真正的 TypeScript 高手是可以定制 TypeScript 的，笔者也不是这方面的高手，只花两节的内容能粗略介绍下，只当做抛砖引玉。")]),s._v(" "),a("p",[s._v("我们都知道 Babel，他是 JavaScript 的转化工具，比如可以把 ES6+ 的代码转化成 ES5 的代码，我们开发者可以通过 Babel 暴露的接口来编写插件，通过插件我们可以自己定制JavaScript。")]),s._v(" "),a("p",[s._v("而 TypeScript 在 2.3 版本也暴露了相关的接口给开发者，允许开发者控制部分 JavaScript 的代码生产，因此，同样我们也可以通过编写 TypeScript Transformer Plugin 的方式控制最终生成的 js 代码。")]),s._v(" "),a("p",[s._v("在正式编写 TypeScript Transformer Plugin 之前，我们必须了解一些前置知识，那就是TypeScript的一些简单的编译原理知识。")]),s._v(" "),a("h2",{attrs:{id:"编译器的组成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编译器的组成"}},[s._v("#")]),s._v(" 编译器的组成")]),s._v(" "),a("p",[s._v("TypeScript有自己的编译器,这个编译器主要有以下部分组成:")]),s._v(" "),a("ul",[a("li",[s._v("Scanner 扫描器")]),s._v(" "),a("li",[s._v("Parser 解析器")]),s._v(" "),a("li",[s._v("Binder 绑定器")]),s._v(" "),a("li",[s._v("Emitter 发射器")]),s._v(" "),a("li",[s._v("Checker 检查器")])]),s._v(" "),a("h2",{attrs:{id:"编译器的处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编译器的处理"}},[s._v("#")]),s._v(" 编译器的处理")]),s._v(" "),a("p",[s._v("扫描器通过扫描源代码生成token流:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("SourceCode（源码）+ 扫描器 --\x3e Token 流\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("解析器将token流解析为抽象语法树(AST):")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Token 流 + 解析器 --\x3e AST（抽象语法树）\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("绑定器将AST中的声明节点与相同实体的其他声明相连形成符号(Symbols),符号是语义系统的主要构造块:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("AST + 绑定器 --\x3e Symbols（符号）\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("检查器通过符号和AST来验证源代码语义:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("AST + 符号 + 检查器 --\x3e 类型验证\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("最后我们通过发射器生成JavaScript代码:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("AST + 检查器 + 发射器 --\x3e JavaScript 代码\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h2",{attrs:{id:"编译器处理流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编译器处理流程"}},[s._v("#")]),s._v(" 编译器处理流程")]),s._v(" "),a("p",[s._v("TypeScript 的编译流程也可以粗略得分为三步:")]),s._v(" "),a("ul",[a("li",[s._v("解析")]),s._v(" "),a("li",[s._v("转换")]),s._v(" "),a("li",[s._v("生成")])]),s._v(" "),a("p",[s._v("结合上部分的编译器各个组成部分,流程如下图:")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/11/16dbb1514537bc3b?w=2248&h=564&f=png&s=136417",alt:"编译器处理流程"}})]),s._v(" "),a("p",[s._v("我们主要控制的要编写的 transformer Plugin 作用于 Emitter 阶段.")]),s._v(" "),a("h2",{attrs:{id:"抽象语法树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#抽象语法树"}},[s._v("#")]),s._v(" 抽象语法树")]),s._v(" "),a("p",[s._v("我们先了解一下抽象语法树是怎么来的,举个简单的例子,比如我们写一段变量声明的代码"),a("code",[s._v("var a = ...")]),s._v(",它要经历这样几个步骤:")]),s._v(" "),a("ul",[a("li",[s._v("字符流转化为被定义过的tokenliu")]),s._v(" "),a("li",[s._v("线性token流被转化为抽象语法树")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/11/16dbb15145b54b09?w=498&h=530&f=png&s=107385",alt:"AST转换"}})]),s._v(" "),a("p",[s._v("AST是一棵树,这棵树的节点代表了语法信息,这棵树的边代表了节点之间的组成关系。")]),s._v(" "),a("p",[s._v("一个例子:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const a = 3 + 4;\nconsole.log(a);\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("它的AST以"),a("code",[s._v("ES Tree")]),s._v("规范来以JSON形式输出:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('{\n  "type": "Program",\n  "body": [\n    {\n      "type": "VariableDeclaration",\n      "kind": "const",\n      "declarations": [\n        {\n          "type": "VariableDeclarator",\n          "id": {\n            "type": "Identifier",\n            "name": "a"\n          },\n          "init": {\n            "type": "BinaryExpression",\n            "operator": "+",\n            "left": {\n              "type": "Literal",\n              "value": 3,\n            },\n            "right": {\n              "type": "Literal",\n              "value": 4,\n            }\n          }\n        }\n      ]\n    },\n    {\n      "type": "ExpressionStatement",\n      "expression": {\n        "type": "CallExpression",\n        "callee": {\n          "type": "MemberExpression",\n          "computed": false,\n          "object": {\n            "type": "Identifier",\n            "name": "console"\n          },\n          "property": {\n            "type": "Identifier",\n            "name": "log"\n          }\n        },\n        "arguments": [\n          {\n            "type": "Identifier",\n            "name": "a"\n          }\n        ]\n      }\n    }\n  ]\n}\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br")])]),a("p",[s._v("从解析源代码到生成AST之间的步骤是typescript控制的,我们无法干涉,我们能做的是访问AST的节点并修改其携带的信息和节点与节点之间的关系,最终生成新的AST,再根据新AST生成代码,这样我们就达到了控制代码转换的目的。")]),s._v(" "),a("h2",{attrs:{id:"修改节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修改节点"}},[s._v("#")]),s._v(" 修改节点")]),s._v(" "),a("p",[s._v("接着上面的例子,我们想要修改节点就必须对节点进行访问,这就涉及到了"),a("strong",[s._v("访问者模式")]),s._v(",这种模式使我们可以遍历一棵树，而不必实现or知道树中的所有信息。")]),s._v(" "),a("p",[s._v("例如,下面的代码将所有需要改变相关的每个标识符"),a("code",[s._v("a")]),s._v("为"),a("code",[s._v("b")]),s._v("：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("tree.visit({\n  Identifier(node) {\n    if (node.name === 'a') {\n      node.name = 'b';\n    }\n  },\n})\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("在TypeScript的具体使用模板是这样的:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import * as ts from ‘typescript’\nexport default function(/*opts?: Opts*/) {\n  function visitor(ctx: ts.TransformationContext, sf: ts.SourceFile) {\n    const visitor: ts.Visitor = (node: ts.Node): ts.VisitResult => {\n      // here we can check each node and potentially return \n      // new nodes if we want to leave the node as is, and \n      // continue searching through child nodes:\n      return ts.visitEachChild(node, visitor, ctx)\n    }\n    return visitor\n  }\n  return (ctx: ts.TransformationContext): ts.Transformer => {\n    return (sf: ts.SourceFile) => ts.visitNode(sf, visitor(ctx, sf))\n  }\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("p",[s._v("给TypeScript Transformer指定AST，然后通常一个转换将使用 "),a("code",[s._v("visitor")]),s._v(" 来遍历 AST,访问者可以检查AST中的每个节点并在这些节点上执行操作,例如代码验证、分析然后确定是否以及如何修改代码。")]),s._v(" "),a("h2",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[s._v("#")]),s._v(" 小结")]),s._v(" "),a("p",[s._v("我们在本节很简略地讲解了 TypeScript 的编译过程,其实我们的目的不是搞清楚每一个细节,而是对大概的流程有一个粗略的认知,这有助于我们接下来的实战。")])])}),[],!1,null,null,null);n.default=t.exports}}]);