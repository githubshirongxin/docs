(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{518:function(t,s,n){"use strict";n.r(s);var e=n(55),a=Object(e.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("p",[n("img",{attrs:{src:"/images/2020-07-30-14-53-36.png",alt:""}})]),t._v(" "),n("h2",{attrs:{id:"二、举例说明"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、举例说明"}},[t._v("#")]),t._v(" 二、举例说明")]),t._v(" "),n("h3",{attrs:{id:"step-1-：-创建项目，搭建源仓库"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#step-1-：-创建项目，搭建源仓库"}},[t._v("#")]),t._v(" Step 1 ： 创建项目，搭建源仓库")]),t._v(" "),n("p",[t._v("团队开发，属于 Group级项目，Namespace使用Group name，Visibility 默认Internal。")]),t._v(" "),n("h3",{attrs:{id:"step-2：开发者fork源仓库"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#step-2：开发者fork源仓库"}},[t._v("#")]),t._v(" Step 2：开发者Fork源仓库")]),t._v(" "),n("p",[t._v("源仓库建立以后，每个开发就可以去克隆一份源仓库到自己的Gitlab账号中，然后作为自己开发所用的仓库。")]),t._v(" "),n("h3",{attrs:{id:"step-3：把自己的项目仓库clone到本地"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#step-3：把自己的项目仓库clone到本地"}},[t._v("#")]),t._v(" Step 3：把自己的项目仓库clone到本地")]),t._v(" "),n("p",[n("code",[t._v("$ git clone git@git@123.159.2.190:junting.liu/BizAdmin.git")])]),t._v(" "),n("h3",{attrs:{id:"step-4：本地自己构建功能分支进行开发"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#step-4：本地自己构建功能分支进行开发"}},[t._v("#")]),t._v(" Step 4：本地自己构建功能分支进行开发")]),t._v(" "),n("p",[t._v("假设我们要开发一个Vue 表单组件的功能:")]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('# 查看当前分支\n$ git branch\n# 切换`develop`分支\n$ git checkout develop\n# 切换到一个功能性分支\n$ git checkout -b feature-formComponent\n# 开发完毕，先进行当前状态监测\n$ git status\n# 将开发好的功能添加到Git暂存区，并没有提交，这个时候文件是处于工作区\n$ git add .\n# 这个时候你可以使用 git status 监测下这个时候的状态\n# 将暂存区的文件提交下\n$ git commit -m "修饰当前你进行了什么操作"\n# 再次使用git status 监测下git的状态，会提示 当前work clean 工作区很干净\n# 切回develo分支，合并功能分支\n$ git checkout develop\n$ git merge feature-formComponent\n# 合并后，监测状态、冲突\n$ git diff\n# 删除功能性分支\n$ git branch -d feature-formComponent\n# 拉取自己的远程中的develop分支,本地解决冲突\n$ git pull origin junting   <remote> <branch>\n#推送到自己远程的仓库develop分支\n$ git push origin develop\n# 功能开发完毕，就要向源仓库推送自的develop分支\n# 先还是要拉取下源仓库develp分支，本地合并解决冲突\n# 这几步也是跟上两步一样的\n')])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br"),n("span",{staticClass:"line-number"},[t._v("25")]),n("br"),n("span",{staticClass:"line-number"},[t._v("26")]),n("br"),n("span",{staticClass:"line-number"},[t._v("27")]),n("br"),n("span",{staticClass:"line-number"},[t._v("28")]),n("br")])]),n("h2",{attrs:{id:"三、协同合作中最常用的git命令"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三、协同合作中最常用的git命令"}},[t._v("#")]),t._v(" 三、协同合作中最常用的Git命令")]),t._v(" "),n("p",[t._v('本地使用Git，都需要先配置下自己仓库的邮箱和用户名，基本只使用一次\ngit config --global user.email "you@example.com"\ngit config --global user.name "Your Name"\n常用命令\ngit clone '),n("url",[t._v(" #克隆远程版本库\ngit init #初始化本地仓库\ngit status #查看下仓库的当前的状态\ngit add "),n("file",[t._v(' / . #跟踪指定文件或所有改动过的文件\ngit commit -m "commit message" # 提交所有更新过的文件\ngit log #查看提交历史日志\ngit relog #查看所有操作记录日志，回退穿越很有用\ngit reset --hard HEAD # 回退\ngit pull '),n("remote",[n("branch",[t._v(" # 拉取代码并快速合并\ngit push "),n("remote",[n("branch",[t._v(" # 推送代码及快速合并\ngit fetch "),n("remote",[t._v(" / --all # 获取指定远程仓库或所有远程仓库代码\ngit merge "),n("branch",[t._v(" # 合并指定分支到当前分支")])],1)],1)],1)],1)],1)],1)],1)],1),t._v(" "),n("p",[t._v("作者：Junting\n链接：https://www.jianshu.com/p/f57f08918a8b\n来源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。")])])}),[],!1,null,null,null);s.default=a.exports}}]);