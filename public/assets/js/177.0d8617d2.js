(window.webpackJsonp=window.webpackJsonp||[]).push([[177],{660:function(s,n,e){"use strict";e.r(n);var a=e(59),t=Object(a.a)({},(function(){var s=this,n=s.$createElement,e=s._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"typescript-企业级服务器开发：理论篇"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#typescript-企业级服务器开发：理论篇"}},[s._v("#")]),s._v(" typescript 企业级服务器开发：理论篇")]),s._v(" "),e("p",[s._v("通常小打小闹的 Node.js 服务器开发基本用面条代码就可以了，但是一般用 typescript 开发 Node.js 后端项目，这个要求通常是企业级的，面条代码显然是不能写了，要有基本的分层、逻辑与配置分离等等，这个时候最好的方法是选择一个企业级框架，比如 Nest.js，或者在 egg.js、koa 这种低级别框架、库基础上封装一个企业级框架。")]),s._v(" "),e("p",[s._v("我们在 koa 的基础上封装一个框架的内容之多显然可以写一本书了，而且除非有特殊需求，最好的方式还是选择社区内已经比较成熟的框架进行开发，我们就学习一下 Node.js 生态中为数不多的企业级开发框架 Nest.js。")]),s._v(" "),e("p",[s._v("Nest.js 是 Node 渐进式框架，底层默认使用 express（可以通过 Adapter 转换到 fastify），可以使用 express 或者 fastify 所有中间件，完美支持 TypeScript，它大量借鉴了 Spring 和 Angular 中的设计思想。")]),s._v(" "),e("p",[s._v("我们先学习一下 Nest.js 中几个重要的概念。")]),s._v(" "),e("h2",{attrs:{id:"依赖注入"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#依赖注入"}},[s._v("#")]),s._v(" 依赖注入")]),s._v(" "),e("p",[s._v("如果你用过 Spring 或者 Angular，这个概念其实已经听过无数次了。")]),s._v(" "),e("p",[s._v("依赖注入（Dependency Injection，简称DI）是面向对象中控制反转（Inversion of Control，简称 IoC）最常见的实现方式，主要用来降低代码的耦合度。")]),s._v(" "),e("p",[s._v("假设你要造一辆车，你需要引擎和轮子：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("import { Engine } from './engine'\nimport { Tire } from './tire'\n\nclass Car {\n  private engine;\n  private wheel;\n  \n  constructor() {\n    this.engine = new Engine();\n    this.tire = new Tire();\n  }\n}\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br")])]),e("p",[s._v("这时候 "),e("code",[s._v("Car")]),s._v(" 这个类依赖于 "),e("code",[s._v("Engine")]),s._v(" 和 "),e("code",[s._v("Tire")]),s._v("，构造器不仅需要把依赖赋值到当前类内部属性上还需要把依赖实例化。假设，有很多种类的 "),e("code",[s._v("Car")]),s._v(" 都用了 "),e("code",[s._v("Engine")]),s._v("，这时候需要把 "),e("code",[s._v("Engine")]),s._v(" 替换为 "),e("code",[s._v("ElectricEngine")]),s._v("。")]),s._v(" "),e("p",[s._v("以上这种牵一发而动全身的后果，就是代码耦合度过高造成的，因此我们得想办法降低耦合度，这个时候我们就需要用到 IoC。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("import { Engine } from './engine'\nimport { Tire } from './tire'\n\nclass Container {\n  private constructorPool;\n\n  constructor() {\n    this.constructorPool = new Map();\n  }\n\n  register(name, constructor) {\n    this.constructorPool.set(name, constructor);\n  }\n\n  get(name) {\n    const target = this.constructorPool.get(name);\n    return new target();\n  }\n}\n\nconst container = new Container();\ncontainer.bind('engine', Engine);\ncontainer.bind('tire', Tire);\n\nclass Car {\n  private engine;\n  private tire;\n  \n  constructor() {\n    this.engine = container.get('engine');\n    this.tire = container.get('tire');\n  }\n}\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br")])]),e("p",[s._v("此时，"),e("code",[s._v("container")]),s._v("相当于"),e("code",[s._v("Car")]),s._v("和"),e("code",[s._v("Engine")]),s._v("、"),e("code",[s._v("Tire")]),s._v("之间的中转站，"),e("code",[s._v("Car")]),s._v("不需要自己去实例化一个"),e("code",[s._v("Engine")]),s._v("或者"),e("code",[s._v("Tire")]),s._v("，"),e("code",[s._v("Car")]),s._v("和"),e("code",[s._v("Engine")]),s._v("、"),e("code",[s._v("Tire")]),s._v("之间也就没有了强耦合的关系。")]),s._v(" "),e("p",[s._v("从上面例子看出，在使用 IoC 之前，"),e("code",[s._v("Car")]),s._v("需要"),e("code",[s._v("Engine")]),s._v("或者"),e("code",[s._v("Tire")]),s._v("时需要自己主动去创建"),e("code",[s._v("Engine")]),s._v("或者"),e("code",[s._v("Tire")]),s._v("，此时对"),e("code",[s._v("Engine")]),s._v("或者"),e("code",[s._v("Tire")]),s._v("的创建和使用的控制权都在"),e("code",[s._v("Car")]),s._v("手上。")]),s._v(" "),e("p",[s._v("在使用 IoC 之后，"),e("code",[s._v("Car")]),s._v("和"),e("code",[s._v("Engine")]),s._v("或者"),e("code",[s._v("Tire")]),s._v("之间的联系就切断了，当"),e("code",[s._v("Car")]),s._v("需要"),e("code",[s._v("Engine")]),s._v("或者"),e("code",[s._v("Tire")]),s._v("时，"),e("code",[s._v("IoC Container")]),s._v("会主动创建这个对象给"),e("code",[s._v("Car")]),s._v("使用，此时"),e("code",[s._v("Car")]),s._v("获取"),e("code",[s._v("Engine")]),s._v("或者"),e("code",[s._v("Tire")]),s._v("的行为由主动获取变成了被动获取，控制权就颠倒过来。当"),e("code",[s._v("Engine")]),s._v("或者"),e("code",[s._v("Tire")]),s._v("有任何变动，"),e("code",[s._v("Car")]),s._v("不会受到影响，它们之间就完成了解耦。")]),s._v(" "),e("p",[s._v("当我们需要测试"),e("code",[s._v("Car")]),s._v("时，我们不需要把"),e("code",[s._v("Engine")]),s._v("或者"),e("code",[s._v("Tire")]),s._v("全部"),e("code",[s._v("new")]),s._v("一遍来构造"),e("code",[s._v("Car")]),s._v("，只需要把 mock 的"),e("code",[s._v("Engine")]),s._v("或者"),e("code",[s._v("Tire")]),s._v("， 注入到 IoC 容器中就行。")]),s._v(" "),e("p",[s._v("在 Nestjs 中，通过"),e("code",[s._v("@Injectable")]),s._v("装饰器向 IoC 容器注册：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("import { Injectable } from '@nestjs/common';\nimport { Cat } from './interfaces/cat.interface';\n\n@Injectable()\nexport class CatsService {\n  private readonly cats: Cat[] = [];\n\n  create(cat: Cat) {\n    this.cats.push(cat);\n  }\n\n  findAll(): Cat[] {\n    return this.cats;\n  }\n}\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br")])]),e("p",[s._v("在构造函数中注入"),e("code",[s._v("CatsService")]),s._v("的实例：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("import { Controller, Get, Post, Body } from '@nestjs/common';\nimport { CreateCatDto } from './dto/create-cat.dto';\nimport { CatsService } from './cats.service';\nimport { Cat } from './interfaces/cat.interface';\n\n@Controller('cats')\nexport class CatsController {\n  constructor(private readonly catsService: CatsService) {}\n\n  @Post()\n  async create(@Body() createCatDto: CreateCatDto) {\n    this.catsService.create(createCatDto);\n  }\n\n  @Get()\n  async findAll(): Promise<Cat[]> {\n    return this.catsService.findAll();\n  }\n}\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br")])]),e("p",[e("code",[s._v("CatsService")]),s._v("作为一个"),e("code",[s._v("privider")]),s._v("，需要在"),e("code",[s._v("module")]),s._v("中注册，这样在该"),e("code",[s._v("module")]),s._v("启动时，会解析"),e("code",[s._v("module")]),s._v("中所有的依赖，当"),e("code",[s._v("module")]),s._v("销毁时，"),e("code",[s._v("provider")]),s._v("也会一起销毁。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("import { Module } from '@nestjs/common';\nimport { CatsController } from './cats/cats.controller';\nimport { CatsService } from './cats/cats.service';\n\n@Module({\n  controllers: [CatsController],\n  providers: [CatsService],\n})\nexport class ApplicationModule {}\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])]),e("h2",{attrs:{id:"dto"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dto"}},[s._v("#")]),s._v(" DTO")]),s._v(" "),e("p",[s._v("数据访问对象简称DTO（Data Transfer Object）， 是一组需要跨进程或网络边界传输的聚合数据的简单容器。它不应该包含业务逻辑，并将其行为限制为诸如内部一致性检查和基本验证之类的活动。")]),s._v(" "),e("p",[s._v("在 Nestjs 中，可以使用 TypeScript 接口或简单的类来完成。配合 "),e("code",[s._v("class-validator")]),s._v("和"),e("code",[s._v("class-transformer")]),s._v(" 可以很方便地验证前端传过来的参数：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('import { IsString, IsInt, MinLength, MaxLength } from "class-validator";\nimport { ApiModelProperty } from \'@nestjs/swagger\'\n\nexport class CreateCatDto {\n  @ApiModelProperty()\n  @IsString()\n  @MinLength(10, {\n    message: "Name is too short"\n  })\n  @MaxLength(50, {\n    message: "Name is too long"\n  })\n  readonly name: string;\n  \n  @ApiModelProperty()\n  @IsInt()\n  readonly age: number;\n  \n  @ApiModelProperty()\n  @IsString()\n  readonly breed: string;\n}\n\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br")])]),e("h2",{attrs:{id:"orm"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#orm"}},[s._v("#")]),s._v(" ORM")]),s._v(" "),e("p",[s._v("ORM 是”对象-关系映射”（Object/Relational Mapping） 的缩写，通过实例对象的语法，完成关系型数据库的操作。通过 ORM 就可以用面向对象编程的方式去操作关系型数据库。")]),s._v(" "),e("p",[s._v("在 Java 中，通常会有 DAO（Data Access Object， 数据访问对象）层，DAO 中包含了各种数据库的操作方法。通过它的方法，对数据库进行相关的操作。DAO 主要作用是分离业务层与数据层，避免业务层与数据层耦合。")]),s._v(" "),e("p",[s._v("在 Nestjs 中，可以用 TypeORM 作为你的 DAO 层，它支持 MySQL / MariaDB / Postgres / CockroachDB / SQLite / Microsoft SQL Server / Oracle / MongoDB / NoSQL。")]),s._v(" "),e("p",[s._v("在 typeORM 中数据库的表对应的就是一个类，通过定义一个类来创建实体。实体（Entity）是一个映射到数据库表（或使用 MongoDB 时的集合）的类，通过"),e("code",[s._v("@Entity()")]),s._v("来标记。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('import {Entity, PrimaryGeneratedColumn, Column} from "typeorm";\n\n@Entity()\nexport class User {\n\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column()\n    firstName: string;\n\n    @Column()\n    lastName: string;\n\n    @Column()\n    age: number;\n\n}\n\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br")])]),e("p",[s._v("上面代码将创建以下数据库表：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("+-------------+--------------+----------------------------+\n|                          user                           |\n+-------------+--------------+----------------------------+\n| id          | int(11)      | PRIMARY KEY AUTO_INCREMENT |\n| firstName   | varchar(255) |                            |\n| lastName    | varchar(255) |                            |\n| isActive    | boolean      |                            |\n+-------------+--------------+----------------------------+\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[s._v("使用 "),e("code",[s._v("@InjectRepository()")]),s._v(" 修饰器注入 对应的"),e("code",[s._v("Repository")]),s._v("，就可以在这个 "),e("code",[s._v("Repository")]),s._v(" 对象上进行数据库的一些操作。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from './user.entity';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRepository(User)\n    private readonly userRepository: Repository<User>,\n  ) {}\n\n  async findAll(): Promise<User[]> {\n    return await this.userRepository.find();\n  }\n}\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br")])]),e("h2",{attrs:{id:"面向切面编程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#面向切面编程"}},[s._v("#")]),s._v(" 面向切面编程")]),s._v(" "),e("p",[s._v("面向切面编程（Aspect Oriented Programming，简称AOP）主要是针对业务处理过程中的切面进行提取，在某个步骤和阶段进行一些操作，从而达到 DRY（Don’t Repeat Yourself） 的目的。AOP 对 OOP 来说，是一种补充，比如可以在某一切面中对全局的 Log、错误进行处理，这种一刀切的方式，也就意味着，AOP 的处理方式相对比较粗粒度。")]),s._v(" "),e("p",[s._v("在 Nestjs 中，AOP 分为下面几个部分（按顺序排列）：")]),s._v(" "),e("ul",[e("li",[s._v("Middlewares")]),s._v(" "),e("li",[s._v("Guards")]),s._v(" "),e("li",[s._v("Interceptors (在流被操纵之前)")]),s._v(" "),e("li",[s._v("Pipes")]),s._v(" "),e("li",[s._v("Interceptors (在流被操纵之后)")]),s._v(" "),e("li",[s._v("Exception filters (如果发现任何异常)")])]),s._v(" "),e("p",[s._v("在 Nest.js 中分层处理的过程是这样的：")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/21/16ded06ce1ba3219?w=963&h=295&f=png&s=26699",alt:"2019-10-21-00-53-00"}})]),s._v(" "),e("ul",[e("li",[s._v("Pipes 一般用户验证请求中参数是否符合要求，起到一个校验参数的功能")]),s._v(" "),e("li",[s._v("middleware 中间件就是 express 的中间件，我们甚至可以复用 express 中的中间件，我们可以在中间件中接受 response 和 request 作为参数，并且可以修改请求对象 request 和结果返回对象 response")]),s._v(" "),e("li",[s._v("Guards 守卫：作用就是决定一个请求是否应该被处理函数接受并处理，当然我们也可以在 middleware 中间件中来做请求的接受与否的处理，与 middleware 相比，Guards 可以获得更加详细的关于请求的执行上下文信息")]),s._v(" "),e("li",[s._v("interceptors拦截器：interceptors 拦截器在函数执行前或者执行后可以运行，如果在执行后运行，可以拦截函数执行的返回结果，修改参数等，比如超时处理器就可以用 interceptors 拦截器实现。")]),s._v(" "),e("li",[s._v("Exception filters异常过滤器：Exception filters异常过滤器可以捕获在后端接受处理任何阶段所跑出的异常，捕获到异常后，然后返回处理过的异常结果给客户端（比如返回错误码，错误提示信息等等）")])]),s._v(" "),e("h2",{attrs:{id:"小结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[s._v("#")]),s._v(" 小结")]),s._v(" "),e("p",[s._v("我们学习了 Nest.js 的几个重要概念，对于没有 Spring 、 Angular 经验的人理解起来可能有一些吃了，我们接下来会进行一个小实战来帮助我们理解。")]),s._v(" "),e("hr"),s._v(" "),e("p",[s._v("参考：")]),s._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://github.com/forthealllight/blog/issues/35",target:"_blank",rel:"noopener noreferrer"}},[s._v("从Express到Nestjs，谈谈Nestjs的设计思想和使用方法"),e("OutboundLink")],1)]),s._v(" "),e("li",[e("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/60995312",target:"_blank",rel:"noopener noreferrer"}},[s._v("浅析控制反转"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);n.default=t.exports}}]);