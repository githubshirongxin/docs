(window.webpackJsonp=window.webpackJsonp||[]).push([[168],{651:function(s,n,e){"use strict";e.r(n);var t=e(59),a=Object(t.a)({},(function(){var s=this,n=s.$createElement,e=s._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"编写typescript-transformer-plugin"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#编写typescript-transformer-plugin"}},[s._v("#")]),s._v(" 编写TypeScript Transformer Plugin")]),s._v(" "),e("p",[s._v("我们已经了解了,TypeScript的转化原理与Babel其实是近似的:")]),s._v(" "),e("ol",[e("li",[s._v("先把源代码解析为token流,然后生成AST")]),s._v(" "),e("li",[s._v("通过访问者模式访问AST节点并修改生成新的AST")]),s._v(" "),e("li",[s._v("通过新的AST生成js代码")])]),s._v(" "),e("h2",{attrs:{id:"ast遍历"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ast遍历"}},[s._v("#")]),s._v(" AST遍历")]),s._v(" "),e("p",[s._v("我们现在就简单地进行一个小的操作,先看下面的代码:")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// index.ts\n\nconst a = 1\nconst b = 2\n\nfunction add(x: number, y: number): number {\n    return x + y\n}\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[s._v("我们先做一个简单的工作,就是遍历"),e("code",[s._v("index.ts")]),s._v("文件中的各个AST节点.")]),s._v(" "),e("p",[s._v("我们新建一个文件"),e("code",[s._v("transformer.ts")]),s._v(",在这里我们将进行对AST的一系列操作.")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('// transformer.ts\n\nimport ts from "typescript";\n\n// 引入目标文件\nconst filePath = "./index.ts";\n\n// 创建一个 program 实例\nconst program = ts.createProgram([filePath], {});\n\n// 为我们的 program 做一个类型检查器\nconst checker = program.getTypeChecker();\n\n// 获取 index.ts 源代码的AST\nconst source = program.getSourceFile(filePath);\n\n// 创建 printer实例为我们打印最后的ast\nconst printer = ts.createPrinter();\n\n// 我们提供给定类型的节点字符串的小助手\nconst syntaxToKind = (kind: ts.Node["kind"]) => {\n  return ts.SyntaxKind[kind];\n};\n// 从根节点开始遍历并打印\nts.forEachChild(source!, node => {\n  console.log(syntaxToKind(node.kind));\n});\n\n\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br")])]),e("p",[s._v("结果如下:")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/11/16dbb1537911d335?w=512&h=153&f=png&s=21200",alt:"结果"}})]),s._v(" "),e("p",[s._v("我们看到通过遍历我们获得了AST上的节点,首先是两个变量声明(VariableStatement):")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const a = 1\nconst b = 2\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("接着是一个函数声明(FunctionDeclaration):")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function add(x: number, y: number): number {\n    return x + y\n}\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("最后的"),e("code",[s._v("EndOfFileToken")]),s._v("相当于结束标志.")]),s._v(" "),e("h2",{attrs:{id:"选择转换方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#选择转换方式"}},[s._v("#")]),s._v(" 选择转换方式")]),s._v(" "),e("p",[s._v("我们刚才直接利用了TypeScript提供的API进行了AST的遍历操作,但是如果涉及到转换操作,依然用TypeScript的API进行裸操作会很麻烦,有没有更方便的方法?")]),s._v(" "),e("p",[s._v("目前TS转换有以下三种主流的方式:")]),s._v(" "),e("ul",[e("li",[s._v("适用于Webpack生态系统的"),e("a",{attrs:{href:"https://github.com/TypeStrong/ts-loader",target:"_blank",rel:"noopener noreferrer"}},[s._v("ts-loader"),e("OutboundLink")],1)]),s._v(" "),e("li",[s._v("使用"),e("a",{attrs:{href:"https://github.com/cevek/ttypescript",target:"_blank",rel:"noopener noreferrer"}},[s._v("ttypescript"),e("OutboundLink")],1),s._v("代替tsc")]),s._v(" "),e("li",[s._v("编写自己的编译器包装器")])]),s._v(" "),e("p",[s._v("其中应用最广泛、生态最完善的当属"),e("code",[s._v("ts-loader")]),s._v("+ "),e("code",[s._v("webpack")]),s._v(".")]),s._v(" "),e("p",[s._v("其实还有一个重要原因就是我们目前的前端开发主要借助的就是webpack打包器,选择这种方式更加贴近实际开发.")]),s._v(" "),e("p",[s._v("它的使用方式很简单,给 ts-loader 配置 "),e("code",[s._v("getCustomTransformers")]),s._v("的选项:")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("{\n  test: /\\.tsx?$/,\n  loader: 'ts-loader',\n  options: {\n    ... // other loader's options\n    getCustomTransformers: () => ({ before: [yourImportedTransformer] })\n  }\n}\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("blockquote",[e("p",[s._v("详见"),e("a",{attrs:{href:"https://github.com/TypeStrong/ts-loader",target:"_blank",rel:"noopener noreferrer"}},[s._v("ts-loader"),e("OutboundLink")],1)])]),s._v(" "),e("h2",{attrs:{id:"编写-transformer-plugin"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#编写-transformer-plugin"}},[s._v("#")]),s._v(" 编写 transformer Plugin")]),s._v(" "),e("h3",{attrs:{id:"目标"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#目标"}},[s._v("#")]),s._v(" 目标")]),s._v(" "),e("p",[s._v("我们要实现如下转换：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// before\nimport { Button } from 'antd'\n// after\nimport Button from 'antd/lib/button'\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("h3",{attrs:{id:"了解需要改什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#了解需要改什么"}},[s._v("#")]),s._v(" 了解需要改什么")]),s._v(" "),e("p",[s._v("Custom Transformer 操作是 AST，所以我们需要了解代码转换前后的 AST 区别在哪里.")]),s._v(" "),e("p",[s._v("转换前：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("import { Button } from 'antd'\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("代码的 AST 如下：")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/11/16dbb153794c07ff?w=720&h=633&f=jpeg&s=23346",alt:""}})]),s._v(" "),e("p",[s._v("转换后:")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("import Button from 'antd/lib/button'\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("代码的 AST 如下：")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/11/16dbb15379ccae52?w=720&h=381&f=jpeg&s=13467",alt:""}})]),s._v(" "),e("p",[s._v("可以看出，我们需要做的转换有两处：")]),s._v(" "),e("ul",[e("li",[s._v("替换 ImportClause 的子节点，但保留其中的 Identifier")]),s._v(" "),e("li",[s._v("替换 StringLiteral 为原来的值加上上面的 Identifier")])]),s._v(" "),e("p",[s._v("那么，该如何找到并替换对应的节点呢？")]),s._v(" "),e("h3",{attrs:{id:"如何遍历并替换节点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何遍历并替换节点"}},[s._v("#")]),s._v(" 如何遍历并替换节点")]),s._v(" "),e("p",[s._v("TS 提供了两个方法遍历 AST：")]),s._v(" "),e("ul",[e("li",[s._v("ts.forEachChild")]),s._v(" "),e("li",[s._v("ts.visitEachChild")])]),s._v(" "),e("p",[s._v("两个方法的区别是:")]),s._v(" "),e("p",[e("code",[s._v("forEachChild")]),s._v(" 只能遍历 AST，"),e("code",[s._v("visitEachChild")]),s._v(" 在遍历的同时，提供给此方法的 "),e("code",[s._v("visitor")]),s._v(" 回调的返回节点，会被用来替换当前遍历的节点，因此我们可以利用 "),e("code",[s._v("visitEachChild")]),s._v(" 来遍历并替换节点.")]),s._v(" "),e("p",[s._v("先看一下这个方法的签名：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("/**\n * Visits each child of a Node using the supplied visitor, possibly returning a new Node of the same kind in its place.\n *\n * @param node The Node whose children will be visited.\n * @param visitor The callback used to visit each child.\n * @param context A lexical environment context for the visitor.\n */\nfunction visitEachChild<T extends Node>(node: T, visitor: Visitor, context: TransformationContext): T\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[s._v("假设我们已经拿到了 AST 的根节点 SourceFile 和 "),e("code",[s._v("TransformationContext")]),s._v("，我们就可以用以下代码遍历 AST：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("ts.visitEachChild(SourceFile, visitor, ctx)\nfunction visitor(node) {\n  if(node.getChildCount()) {\n    return ts.visitEachChild(node, visitor, ctx)\n  }\n  return node\n}\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[s._v("注意：visitor 的返回节点会被用来替换 visitor 正在访问的节点.")]),s._v(" "),e("h3",{attrs:{id:"如何创建节点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何创建节点"}},[s._v("#")]),s._v(" 如何创建节点")]),s._v(" "),e("p",[s._v("TS 中 AST 节点的工厂函数全都以 create 开头，在编辑器里敲下：ts.create，代码补全列表里就能看到很多很多和节点创建有关的方法：")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/11/16dbb15379d493ca?w=720&h=369&f=jpeg&s=24359",alt:""}})]),s._v(" "),e("p",[s._v("比如，创建一个 1+2 的节点:")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("ts.createAdd(ts.createNumericLiteral('1'), ts.createNumericLiteral('2'))\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("h3",{attrs:{id:"如何判断节点类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何判断节点类型"}},[s._v("#")]),s._v(" 如何判断节点类型")]),s._v(" "),e("p",[s._v("前面说过，ts.SyntaxKind里存储了所有的节点类型。同时，每个节点中都有一个 kind 字段标明它的类型。我们可以用以下代码判断节点类型:")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("if(node.kind === ts.SyntaxKind.ImportDeclaration) {\n  // Get it!\n}\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("也可以用 ts-is-kind 模块简化判断：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("import * as kind from 'ts-is-kind'\nif(kind.isImportDeclaration(node)) {\n  // Get it!\n}\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("那么，我们之前的 visitor 就可以继续补充下去：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("import * as kind from 'ts-is-kind'\nfunction visitor(node) {\n  if(kind.isImportDeclaration(node)) {\n    const updatedNode = updateImportNode(node, ctx)\n    return updateNode\n  }\n  return node\n}\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[s._v("因为 Import 语句不能嵌套在其他语句下面，所以 ImportDeclaration 只会出现在 SourceFile 的下一级子节点上，因此上面的代码并没有对 node 做深层递归遍历。")]),s._v(" "),e("p",[s._v("只要 updateImportNode 函数完成了之前图中表现出的 AST 转换，我们的工作就完成了。")]),s._v(" "),e("h3",{attrs:{id:"如何更新-importdeclaration-节点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何更新-importdeclaration-节点"}},[s._v("#")]),s._v(" 如何更新 ImportDeclaration 节点")]),s._v(" "),e("p",[s._v("下面关注 updateImportNode 怎么实现.")]),s._v(" "),e("p",[s._v("我们已经拿到了 ImportDeclaration 节点，还记得到底要干什么吗？")]),s._v(" "),e("ul",[e("li",[s._v("用 Identifier 替换 NamedImports 的子节点")]),s._v(" "),e("li",[s._v("修改 StringLiteral 的值")])]),s._v(" "),e("p",[s._v("为了方便找到需要的节点，我们对 ImportDeclaration 做递归遍历，只对 NamedImports 和 StringLiteral 做特殊处理：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function updateImportNode(node: ts.Node, ctx: ts.TransformationContext) {\n  const visitor: ts.Visitor = node => {\n    if (kind.isNamedImports(node)) {\n      // ...\n    }\n    if (kind.isStringLiteral(node)) {\n      // ...\n    }\n    if (node.getChildCount()) {\n      return ts.visitEachChild(node, visitor, ctx)\n    }\n    return node\n  }\n}\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br")])]),e("p",[s._v("首先处理 "),e("code",[s._v("NamedImports")]),s._v(":在 AST explorer 的帮助下，可以发现 "),e("code",[s._v("NamedImports")]),s._v(" 包含了三部分，两个大括号和一个叫 "),e("code",[s._v("Button")]),s._v(" 的 "),e("code",[s._v("Identifier")]),s._v("，我们在 "),e("code",[s._v("isNamedImports")]),s._v(" 的判断下，直接返回这个 "),e("code",[s._v("Identifier")]),s._v("，就可以取代原先的 "),e("code",[s._v("NamedImports")]),s._v("：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("if (kind.isNamedImports(node)) {\n   const identifierName = node.getChildAt(1).getText()\n  // 返回的节点会被用于取代原节点\n  return ts.createIdentifier(identifierName)\n}\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("p",[s._v("再处理 "),e("code",[s._v("StringLiteral")]),s._v(":")]),s._v(" "),e("p",[s._v("发现要返回新的 "),e("code",[s._v("StringLiteral")]),s._v("，要用到 isNamedImports 判断里提取出来的 "),e("code",[s._v("identifierName")]),s._v(".")]),s._v(" "),e("p",[s._v("因此我们先把 identifierName 提取到外层定义，作为 updateImportNode 的内部状态.")]),s._v(" "),e("p",[s._v("同时，"),e("code",[s._v("antd/lib")]),s._v(" 目录下的文件名没有大写字母，因此要把 identifierName 中首字母大写去掉：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("if (kind.isStringLiteral(node)) {\n  const libName = node.getText().replace(/[\\\"\\']/g, '')\n  if (identifierName) {\n    const fileName = camel2Dash(identifierName)\n    return ts.createLiteral(`${libName}/lib/${fileName}`)\n  }\n}\n// from: https://github.com/ant-design/babel-plugin-import\nfunction camel2Dash(_str: string) {\n  const str = _str[0].toLowerCase() + _str.substr(1)\n  return str.replace(/([A-Z])/g, ($1) => `-${$1.toLowerCase()}`)\n}\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br")])]),e("p",[s._v("完整的 updateImportNode 实现如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function updateImportNode(node: ts.Node, ctx: ts.TransformationContext) {\n  const visitor: ts.Visitor = node => {\n  if (kind.isNamedImports(node)) {\n    const identifierName = node.getChildAt(1).getText()\n      return ts.createIdentifier(identifierName)\n  }\n    if (kind.isStringLiteral(node)) {\n    const libName = node.getText().replace(/[\\\"\\']/g, '')\n    if (identifierName) {\n      const fileName = camel2Dash(identifierName)\n      return ts.createLiteral(`${libName}/lib/${fileName}`)\n    }\n  }\n    if (node.getChildCount()) {\n      return ts.visitEachChild(node, visitor, ctx)\n    }\n    return node\n  }\n}\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br")])]),e("p",[s._v("以上，我们就成功实现了如下代码转换：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// before\nimport { Button } from 'antd'\n// after\nimport Button from 'antd/lib/button'\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("以上代码整合起来，就是一个完整的 Transformer Plugin，完整代码请见："),e("a",{attrs:{href:"https://github.com/newraina/learning-ts-transfomer-plugin/blob/master/src/transformer.ts",target:"_blank",rel:"noopener noreferrer"}},[s._v("newraina/learning-ts-transfomer-plugin"),e("OutboundLink")],1)]),s._v(" "),e("h3",{attrs:{id:"改进"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#改进"}},[s._v("#")]),s._v(" 改进")]),s._v(" "),e("p",[s._v("刚才实现的只是一个最最精简的版本，距离 babel-plugin-import 的完整功能还有很远，比如：")]),s._v(" "),e("ul",[e("li",[s._v("同时 Import 多个组件怎么办，如"),e("code",[s._v("import { Button, Alert } from 'antd'")])]),s._v(" "),e("li",[s._v("Import 时用 as 重命名了怎么办，如"),e("code",[s._v("import { Button as Btn } from 'antd'")])]),s._v(" "),e("li",[s._v("如果 CSS 也要按需引入怎么办")]),s._v(" "),e("li",[s._v("…")])]),s._v(" "),e("p",[s._v("以上都可以在 AST explorer 的帮助下找到 AST 转换前后的区别，然后按照本文介绍的流程实现。")]),s._v(" "),e("h2",{attrs:{id:"小结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[s._v("#")]),s._v(" 小结")]),s._v(" "),e("p",[s._v("本文我们主要介绍了TypeScript Transformer Plugin的编写方法,我们可以从一个简单的TypeScript Transformer Plugin入手学习,就比如"),e("a",{attrs:{href:"https://github.com/Brooooooklyn/ts-import-plugin",target:"_blank",rel:"noopener noreferrer"}},[s._v("ts-import-plugin"),e("OutboundLink")],1),s._v("。")]),s._v(" "),e("p",[s._v("本文的后半部分来源于"),e("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/30360931",target:"_blank",rel:"noopener noreferrer"}},[s._v("写一个TypeScript Transformer Plugin"),e("OutboundLink")],1),s._v(",原因在于我想写一个TS版的 "),e("code",[s._v("babel-plugin-import")]),s._v(" 作为案例,然后发现已经有文章写过了而且写得不错。")])])}),[],!1,null,null,null);n.default=a.exports}}]);