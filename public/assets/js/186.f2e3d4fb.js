(window.webpackJsonp=window.webpackJsonp||[]).push([[186],{669:function(n,s,e){"use strict";e.r(s);var a=e(59),t=Object(a.a)({},(function(){var n=this,s=n.$createElement,e=n._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"typescript-中其他常见类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#typescript-中其他常见类型"}},[n._v("#")]),n._v(" Typescript 中其他常见类型")]),n._v(" "),e("p",[n._v("我们上一节了解了 TypeScript 中的原始类型,其实还有一些常见的类型没有涉及。")]),n._v(" "),e("p",[n._v("比如计算机类型系统理论中的"),e("a",{attrs:{href:"https://en.wikipedia.org/wiki/Top_type",target:"_blank",rel:"noopener noreferrer"}},[n._v("顶级类型"),e("OutboundLink")],1),n._v(":")]),n._v(" "),e("ul",[e("li",[n._v("any")]),n._v(" "),e("li",[n._v("unknown")])]),n._v(" "),e("p",[n._v("比如类型系统中的"),e("a",{attrs:{href:"https://en.wikipedia.org/wiki/Bottom_type",target:"_blank",rel:"noopener noreferrer"}},[n._v("底部类型"),e("OutboundLink")],1),n._v(":")]),n._v(" "),e("ul",[e("li",[n._v("never")])]),n._v(" "),e("p",[n._v("再比如非原始类型(non-primitive type):")]),n._v(" "),e("ul",[e("li",[n._v("object")])]),n._v(" "),e("p",[n._v("当然还有比较常见的数组、元组等等。")]),n._v(" "),e("h2",{attrs:{id:"any"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#any"}},[n._v("#")]),n._v(" any")]),n._v(" "),e("p",[n._v("有时候，我们会想要为那些在编程阶段还不清楚类型的变量指定一个类型。")]),n._v(" "),e("p",[n._v("这些值可能来自于动态的内容，比如来自用户输入或第三方代码库。")]),n._v(" "),e("p",[n._v("这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。 那么我们可以使用any类型来标记这些变量：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('let notSure: any = 4;\nnotSure = "maybe a string instead";\n\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br")])]),e("p",[e("code",[n._v("any")]),n._v("类型是多人协作项目的大忌，很可能把Typescript变成AnyScript，通常在不得已的情况下，不应该首先考虑使用此类型。")]),n._v(" "),e("h2",{attrs:{id:"unknown"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#unknown"}},[n._v("#")]),n._v(" unknown")]),n._v(" "),e("p",[e("code",[n._v("unknown")]),n._v(" 是 TypeScript 3.0 引入了新类型,是 "),e("code",[n._v("any")]),n._v(" 类型对应的安全类型。")]),n._v(" "),e("p",[e("code",[n._v("unknown")]),n._v(" 和 "),e("code",[n._v("any")]),n._v(" 的主要区别是 "),e("code",[n._v("unknown")]),n._v(" 类型会更加严格:在对"),e("code",[n._v("unknown")]),n._v("类型的值执行大多数操作之前,我们必须进行某种形式的检查,而在对 "),e("code",[n._v("any")]),n._v(" 类型的值执行操作之前,我们不必进行任何检查。")]),n._v(" "),e("p",[n._v("我们先看一下他跟 "),e("code",[n._v("any")]),n._v(" 的共同点,它跟 "),e("code",[n._v("any")]),n._v(" 一样,可以是任何类型:")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('let value: any;\n\nvalue = true;             // OK\nvalue = 1;                // OK\nvalue = "Hello World";    // OK\nvalue = Symbol("type");   // OK\nvalue = {}                // OK\nvalue = []                // OK\n\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br")])]),e("p",[n._v("如果我们换成 "),e("code",[n._v("unknown")]),n._v(",结果一样")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('let value: unknown;\n\nvalue = true;             // OK\nvalue = 1;                // OK\nvalue = "Hello World";    // OK\nvalue = Symbol("type");   // OK\nvalue = {}                // OK\nvalue = []                // OK\n\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br")])]),e("p",[n._v("那我们看看它们的区别在哪里:")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("let value: any;\n\nvalue.foo.bar;  // OK\nvalue();        // OK\nnew value();    // OK\nvalue[0][1];    // OK\n\n\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br")])]),e("p",[n._v("如果是 "),e("code",[n._v("unknown")]),n._v(" 类型,那么结果大不相同:")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("let value: unknown;\n\nvalue.foo.bar;  // ERROR\nvalue();        // ERROR\nnew value();    // ERROR\nvalue[0][1];    // ERROR\n\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br")])]),e("p",[n._v("我们看到,这就是 "),e("code",[n._v("unknown")]),n._v(" 与 "),e("code",[n._v("any")]),n._v(" 的不同之处,虽然它们都可以是任何类型,但是当 "),e("code",[n._v("unknown")]),n._v(" 类型被确定是某个类型之前,它不能被进行任何操作比如实例化、getter、函数执行等等。")]),n._v(" "),e("p",[n._v("而 "),e("code",[n._v("any")]),n._v(" 是可以的,这也是为什么说 "),e("code",[n._v("unknown")]),n._v(" 是更安全的 "),e("code",[n._v("any")]),n._v(", "),e("code",[n._v("any")]),n._v(" 由于过于灵活的设定,导致它与 JavaScript 没有太多区别,很容易产生低级错误,很多场景下我们可以选择 "),e("code",[n._v("unknown")]),n._v(" 作为更好的替代品.")]),n._v(" "),e("p",[n._v("那么上面情况下我们可以执行 "),e("code",[n._v("unknown")]),n._v(" 呢?那就是缩小其类型范围,我们在后面的章节会涉及「类型保护」的内容,它就可以缩小类型范围,比如:")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function getValue(value: unknown): string {\n  if (value instanceof Date) { // 这里由于把value的类型缩小为Date实例的范围内,所以`value.toISOString()`\n    return value.toISOString();\n  }\n\n  return String(value);\n}\n\n\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br")])]),e("h2",{attrs:{id:"never"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#never"}},[n._v("#")]),n._v(" never")]),n._v(" "),e("p",[n._v("never 类型表示的是那些永不存在的值的类型，never 类型是任何类型的子类型，也可以赋值给任何类型；然而，没有类型是 never 的子类型或可以赋值给 never 类型（除了never本身之外）。")]),n._v(" "),e("blockquote",[e("p",[n._v("即使any也不可以赋值给never。")])]),n._v(" "),e("p",[n._v("两个场景中 never 比较常见:")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 抛出异常的函数永远不会有返回值\nfunction error(message: string): never {\n    throw new Error(message);\n}\n\n// 空数组，而且永远是空的\nconst empty: never[] = []\n\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br")])]),e("h2",{attrs:{id:"数组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[n._v("#")]),n._v(" 数组")]),n._v(" "),e("p",[n._v("数组有两种类型定义方式，一种是使用泛型:")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("const list: Array<number> = [1, 2, 3]\n\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br")])]),e("p",[n._v("另一种使用更加广泛那就是在元素类型后面接上 "),e("code",[n._v("[]")]),n._v(":")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("const list: number[] = [1, 2, 3]\n\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br")])]),e("h2",{attrs:{id:"元组（tuple）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#元组（tuple）"}},[n._v("#")]),n._v(" 元组（Tuple）")]),n._v(" "),e("p",[n._v("元组类型与数组类型非常相似，表示一个已知元素数量和类型的数组，各元素的类型不必相同。")]),n._v(" "),e("p",[n._v("比如，你可以定义一对值分别为"),e("code",[n._v("string")]),n._v("和"),e("code",[n._v("number")]),n._v("类型的元组。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("let x: [string, number];\nx = ['hello', 10, false] // Error\nx = ['hello'] // Error\n\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br")])]),e("p",[n._v("我们看到，这就是元组与数组的不同之处，元组的类型如果多出或者少于规定的类型是会报错的，必须严格跟事先声明的类型一致才不会报错。")]),n._v(" "),e("p",[n._v("那么有人会问，我们的类型完全一致，只是顺序错了有没有问题，比如上个例子中我们把 "),e("code",[n._v("string")]),n._v("、"),e("code",[n._v("number")]),n._v(" 调换位置：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("let x: [string, number];\nx = ['hello', 10]; // OK\nx = [10, 'hello']; // Error\n\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br")])]),e("p",[n._v("我们看到，元组非常严格，即使类型的顺序不一样也会报错。")]),n._v(" "),e("p",[n._v("元组中包含的元素，必须与声明的类型一致，而且不能多、不能少，甚至顺序不能不符。")]),n._v(" "),e("p",[n._v("我们可以把元组看成严格版的数组，比如"),e("code",[n._v("[string, number]")]),n._v("我们可以看成是:")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("interface Tuple extends Array<string | number> {\n  0: string;\n  1: number;\n  length: 2;\n}\n\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br")])]),e("p",[n._v("元组继承于数组，但是比数组拥有更严格的类型检查。")]),n._v(" "),e("h2",{attrs:{id:"object"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#object"}},[n._v("#")]),n._v(" Object")]),n._v(" "),e("p",[n._v("object 表示非原始类型，也就是除 number，string，boolean，symbol，null 或 undefined 之外的类型。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("\n// 这是下一节会提到的枚举类型\nenum Direction {\n    Center = 1\n}\n\nlet value: object\n\nvalue = Direction\nvalue = [1]\nvalue = [1, 'hello']\nvalue = {}\n\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br")])]),e("p",[n._v("我们看到,普通对象、枚举、数组、元组通通都是 "),e("code",[n._v("object")]),n._v(" 类型。")]),n._v(" "),e("h2",{attrs:{id:"小结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[n._v("#")]),n._v(" 小结")]),n._v(" "),e("p",[n._v("我们继续学习了 TypeScript 中常见的类型,以上这些类型多多少少在 JavaScript 中有一些对应,我们下一节会讲一个全新的类型,那就是枚举类型(enum type).")])])}),[],!1,null,null,null);s.default=t.exports}}]);