(window.webpackJsonp=window.webpackJsonp||[]).push([[152],{635:function(s,n,a){"use strict";a.r(n);var e=a(59),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"可辨识联合类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可辨识联合类型"}},[s._v("#")]),s._v(" 可辨识联合类型")]),s._v(" "),a("p",[s._v("在开始「可辨识联合类型」的学习之前我们要先搞清楚两个概念「类型字面量」与「字面量类型」,因为会在可辨识联合类型的学习中用到类型字面量的特性.")]),s._v(" "),a("p",[s._v("这看起来非常绕,但是「类型字面量」与「字面量类型」的关系就如同雷锋和雷峰塔一样,它们只是名字有些像,所以容易造成混淆,所以我们专门把两者放在同一节,主要聊一下两者的不同.")]),s._v(" "),a("h2",{attrs:{id:"字面量类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字面量类型"}},[s._v("#")]),s._v(" 字面量类型")]),s._v(" "),a("p",[s._v("字面量（Literal Type）主要分为 真值字面量类型（boolean literal types）,数字字面量类型（numeric literal types）,枚举字面量类型（enum literal types）,大整数字面量类型（bigInt literal types）和字符串字面量类型（string literal types）。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const a: 2333 = 2333 // ok\nconst ab : 0b10 = 2 // ok\nconst ao : 0o114 = 0b1001100 // ok\nconst ax : 0x514 = 0x514 // ok\nconst b : 0x1919n = 6425n // ok\nconst c : 'xiaomuzhu' = 'xiaomuzhu' // ok\nconst d : false = false // ok\n\nconst g: 'github' = 'pronhub' // 不能将类型“\"pronhub\"”分配给类型“\"github\"”\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("字面量类型的要和实际的值的字面量一一对应,如果不一致就会报错,比如最后一个例子中字面量类型是 "),a("code",[s._v("github")]),s._v(",但是值却是 "),a("code",[s._v("pronhub")]),s._v(",这就会产生报错.")]),s._v(" "),a("p",[s._v("你可能会问这种只有单个类型的字面量类型有什么用处呢?")]),s._v(" "),a("p",[s._v("当字面量类型与联合类型结合的时候,用处就显现出来了,它可以模拟一个类似于枚举的效果:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("type Direction = 'North' | 'East' | 'South' | 'West';\n\nfunction move(distance: number, direction: Direction) {\n    // ...\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("效果如下:")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/11/16dbb124607d2898?w=560&h=219&f=png&s=27687",alt:"2019-10-08-13-54-45"}})]),s._v(" "),a("h2",{attrs:{id:"类型字面量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型字面量"}},[s._v("#")]),s._v(" 类型字面量")]),s._v(" "),a("p",[s._v("类型字面量(Type Literal)不同于字面量类型（Literal Type),它跟 JavaScript 中的对象字面量的语法很相似:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("type Foo = {\n  baz: [\n    number,\n    'xiaomuzhu'\n  ];\n  toString(): string;\n  readonly [Symbol.iterator]: 'github';\n  0x1: 'foo';\n  \"bar\": 12n;\n};\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("你会发现这个结构跟 "),a("code",[s._v("interface")]),s._v(" 也有点相似,我们在类型别名那一节讲过,在一定程度上类型字面量可以代替接口.")]),s._v(" "),a("h2",{attrs:{id:"可辨识联合类型-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可辨识联合类型-2"}},[s._v("#")]),s._v(" 可辨识联合类型")]),s._v(" "),a("p",[s._v("我们先假设一个场景,现在又两个功能,一个是创建用户即 "),a("code",[s._v("create")]),s._v(",一个是删除用户即 "),a("code",[s._v("delete")]),s._v(".")]),s._v(" "),a("p",[s._v("我们先定义一下这个接口,由于创建用户不需要id,是系统随机生成的,而删除用户是必须用到 id 的,那么代码如下:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("interface Info {\n    username: string\n}\n\ninterface UserAction {\n    id?: number\n    action: 'create' | 'delete'\n    info: Info\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("上面的接口是不是有什么问题?")]),s._v(" "),a("p",[s._v("是的,当我们创建用户时是不需要 id 的,但是根据上面接口产生的情况,以下代码是合法的:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const action:UserAction = {\n    action:'create',\n    id: 111,\n    info: {\n        username: 'xiaomuzhu'\n    }\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("但是我们明明不需要 id 这个字段,因此我们得用另外的方法,这就用到了上面提到的「类型字面量」了:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("type UserAction = | {\n    id: number\n    action: 'delete'\n    info: Info\n} |\n{\n    action: 'create'\n    info: Info\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("这似乎完美解决了,那么我们创建一个函数分别处理 "),a("code",[s._v("create")]),s._v(" 和 "),a("code",[s._v("delete")]),s._v(" 两者情况,两者的不同之处就在于一个有 id 另一个没 id 这个字段:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const UserReducer = (userAction: UserAction) => {\n    console.log(userAction.id)\n    ...\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("我们发现在编写过程中 IDE 就报错了:")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/11/16dbb124613e3b1e?w=861&h=130&f=png&s=35810",alt:"2019-10-08-14-35-26"}})]),s._v(" "),a("p",[s._v("类型别名 "),a("code",[s._v("UserAction")]),s._v(" 是有两个类型字面量联合而成的,我们不知道其中传入的是有没有 "),a("code",[s._v("id")]),s._v(" 字段的那个类型字面量,因此我们需要找到方法区分出到底是哪个类型字面量.")]),s._v(" "),a("p",[s._v("大家有没有想到最开始提到的「字面量类型」,它的特性不就是唯一性吗?这就是区分两者的钥匙:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const UserReducer = (userAction: UserAction) => {\n    switch (userAction.action) {\n        case 'delete':\n            console.log(userAction.id);\n            break;\n        default:\n            break;\n    }\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("效果如下:")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/11/16dbb1246146cc76?w=778&h=202&f=png&s=35829",alt:"2019-10-08-14-38-11"}})]),s._v(" "),a("p",[s._v("我们上面提到了 "),a("code",[s._v("userAction.action")]),s._v(" 就是辨识的关键,被称为"),a("strong",[s._v("可辨识的标签")]),s._v(",我们发现上面这种模式要想实现必须要三个要素:")]),s._v(" "),a("ul",[a("li",[s._v("具有普通的单例类型属性—可辨识的特征,上文中就是 "),a("code",[s._v("delete")]),s._v(" 与 "),a("code",[s._v("create")]),s._v(" 两个有唯一性的字符串字面量")]),s._v(" "),a("li",[s._v("一个类型别名包含"),a("strong",[s._v("联合类型")])]),s._v(" "),a("li",[s._v("类型守卫的特性,比如我们必须用 "),a("code",[s._v("if")]),s._v(" "),a("code",[s._v("switch")]),s._v(" 来判断 "),a("code",[s._v("userAction.action")]),s._v(" 是属于哪个类型作用域即 "),a("code",[s._v("delete")]),s._v(" 与 "),a("code",[s._v("create")])])]),s._v(" "),a("h2",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[s._v("#")]),s._v(" 小结")]),s._v(" "),a("p",[s._v("熟悉 Redux 的同学看完本节应该似曾相识,我们可辨识联合类型的使用场景非常适用于 Redux 的那些样板代码,在之后的 Redux 实战环节,我们会大量运用可辨识联合这个高级类型.")])])}),[],!1,null,null,null);n.default=t.exports}}]);