(window.webpackJsonp=window.webpackJsonp||[]).push([[150],{633:function(s,n,a){"use strict";a.r(n);var e=a(59),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"类型兼容性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型兼容性"}},[s._v("#")]),s._v(" 类型兼容性")]),s._v(" "),a("p",[s._v("类型兼容性用于确定一个类型是否能赋值给其他类型，这看起来并没有什么太大用处，而实际上当我们了解了兼容性之后才会规避之后实际编程中的很多低级错误，笔者也是后来才意识到这一点的。")]),s._v(" "),a("h2",{attrs:{id:"结构类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结构类型"}},[s._v("#")]),s._v(" 结构类型")]),s._v(" "),a("p",[s._v("TypeScript 里的类型兼容性是基于「结构类型」的，结构类型是一种只使用其成员来描述类型的方式，其基本规则是，如果 x 要兼容 y，那么 y 至少具有与 x 相同的属性。")]),s._v(" "),a("p",[s._v("我们做一个简单的实验，我们构建一个类 "),a("code",[s._v("Person")]),s._v(",然后声明一个接口 "),a("code",[s._v("Dog")]),s._v("，"),a("code",[s._v("Dog")]),s._v(" 的属性 "),a("code",[s._v("Person")]),s._v(" 都拥有，而且还多了其他属性，这种情况下 "),a("code",[s._v("Dog")]),s._v(" 兼容了 "),a("code",[s._v("Person")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class Person {\n    constructor(public weight: number, public name: string, public born: string) {\n\n    }\n}\n\ninterface Dog {\n    name: string\n    weight: number\n}\n\nlet x: Dog\n\nx = new Person(120, 'cxk', '1996-12-12') // OK\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("但如果反过来，"),a("code",[s._v("Person")]),s._v(" 并没有兼容 "),a("code",[s._v("Dog")]),s._v("，因为 "),a("code",[s._v("Dog")]),s._v(" 的属性比 "),a("code",[s._v("Person")]),s._v(" 要少了一个。")]),s._v(" "),a("h2",{attrs:{id:"函数的类型兼容性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数的类型兼容性"}},[s._v("#")]),s._v(" 函数的类型兼容性")]),s._v(" "),a("h3",{attrs:{id:"函数参数兼容性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数参数兼容性"}},[s._v("#")]),s._v(" 函数参数兼容性")]),s._v(" "),a("p",[s._v("函数类型的兼容性判断，要查看 x 是否能赋值给 y，首先看它们的参数列表。")]),s._v(" "),a("p",[s._v("x 的每个参数必须能在 y 里找到对应类型的参数,注意的是参数的名字相同与否无所谓，只看它们的类型。")]),s._v(" "),a("p",[s._v("这里，x 的每个参数在 y 中都能找到对应的参数，所以允许赋值:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let x = (a: number) => 0;\nlet y = (b: number, s: string) => 0;\n\ny = x; // OK\nx = y; // Error 不能将类型“(b: number, s: string) => number”分配给类型“(a: number) => number”。\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("那么当函数的参数中出现了可选参数或者 rest 参数时会怎么样呢？")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let foo = (x: number, y: number) => {};\nlet bar = (x?: number, y?: number) => {};\nlet bas = (...args: number[]) => {};\n\nfoo = bar = bas;\nbas = bar = foo;\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("如果你在 "),a("code",[s._v("tsconfig.json")]),s._v(" 默认配置下上面的兼容性都是没问题的，但是在我们严格检测的环境下还是会报错的:")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/11/16dbb11f033a581a?w=494&h=209&f=png&s=46734",alt:"2019-06-25-15-58-11"}})]),s._v(" "),a("p",[s._v("原因就是可选类型的参数可能为 "),a("code",[s._v("undefined")]),s._v("，在这种情况下不能与 "),a("code",[s._v("number")]),s._v(" 兼容。")]),s._v(" "),a("blockquote",[a("p",[s._v("当我们把 strictNullChecks 设置为 false 时上述代码是兼容的。")])]),s._v(" "),a("p",[s._v("那么甚至他们的参数数量都不一致呢?")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\nlet foo = (x: number, y: number) => {};\nlet bar = (x?: number) => {};\n\nfoo = bar // ok\nbar = foo //报错\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("我们看到参数较多的 foo 兼容了 bar。")]),s._v(" "),a("h2",{attrs:{id:"枚举的类型兼容性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#枚举的类型兼容性"}},[s._v("#")]),s._v(" 枚举的类型兼容性")]),s._v(" "),a("p",[s._v("枚举与数字类型相互兼容:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("enum Status {\n  Ready,\n  Waiting\n}\n\nlet status = Status.Ready;\nlet num = 0;\n\nstatus = num;\nnum = status;\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("h2",{attrs:{id:"类的类型兼容性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类的类型兼容性"}},[s._v("#")]),s._v(" 类的类型兼容性")]),s._v(" "),a("p",[s._v("仅仅只有实例成员和方法会相比较，构造函数和静态成员不会被检查:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class Animal {\n  feet: number;\n  constructor(name: string, numFeet: number) {}\n}\n\nclass Size {\n  feet: number;\n  constructor(meters: number) {}\n}\n\nlet a: Animal;\nlet s: Size;\n\na = s; // OK\ns = a; // OK\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("p",[s._v("私有的和受保护的成员必须来自于相同的类:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class Animal {\n  protected feet: number;\n}\nclass Cat extends Animal {}\n\nlet animal: Animal;\nlet cat: Cat;\n\nanimal = cat; // ok\ncat = animal; // ok\n\nclass Size {\n  protected feet: number;\n}\n\nlet size: Size;\n\nanimal = size; // ERROR\nsize = animal; // ERROR\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br")])]),a("h2",{attrs:{id:"泛型的类型兼容性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#泛型的类型兼容性"}},[s._v("#")]),s._v(" 泛型的类型兼容性")]),s._v(" "),a("p",[s._v("泛型本身就是不确定的类型,它的表现根据是否被成员使用而不同.")]),s._v(" "),a("p",[s._v("就比如下面代码:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\ninterface Person<T> {\n\n}\n\nlet x : Person<string>\nlet y : Person<number>\n\nx = y // ok\ny = x // ok\n\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("由于没有被成员使用泛型,所以这里是没问题的。")]),s._v(" "),a("p",[s._v("那么我们再看下面:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("interface Person<T> {\n    name: T\n}\n\nlet x : Person<string>\nlet y : Person<number>\n\nx = y // 不能将类型“Person<number>”分配给类型“Person<string>”。\ny = x // 不能将类型“Person<string>”分配给类型“Person<number>”。\n\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("这里由于泛型 "),a("code",[s._v("T")]),s._v(" 被成员 "),a("code",[s._v("name")]),s._v(" 使用了,所以类型不再兼容。")]),s._v(" "),a("h2",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[s._v("#")]),s._v(" 小结")]),s._v(" "),a("p",[s._v("了解各个类型的兼容性有助于我们更高效地编写代码,也避免了众多低级错误,最后留一个思考题:")]),s._v(" "),a("p",[s._v("如下代码,"),a("code",[s._v("Person")]),s._v(" 和 "),a("code",[s._v("Animal")]),s._v(" 的形状是一样的,这就代表两者互相兼容,那么我们的 "),a("code",[s._v("getPersonName")]),s._v(" 函数是要获取 "),a("code",[s._v("Person")]),s._v(" 类的某些属性,但是由于 "),a("code",[s._v("Person")]),s._v(" 和 "),a("code",[s._v("Animal")]),s._v(" 兼容,此时传入 "),a("code",[s._v("Animal")]),s._v(" 类型也是不会报错的,这很烦人,如何在这种情况下让他们不兼容?")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("interface Person {\n\tname: string;\n\tage: number;\n\tweight: number;\n}\n\ninterface Animal {\n\tname: string;\n\tage: number;\n\tweight: number;\n}\n\nfunction getPersonName(p: Person) {\n\t...\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);