(window.webpackJsonp=window.webpackJsonp||[]).push([[165],{648:function(s,e,a){"use strict";a.r(e);var t=a(59),n=Object(t.a)({},(function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"typescript几个实用技巧"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#typescript几个实用技巧"}},[s._v("#")]),s._v(" TypeScript几个实用技巧")]),s._v(" "),a("h2",{attrs:{id:"注释的妙用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注释的妙用"}},[s._v("#")]),s._v(" 注释的妙用")]),s._v(" "),a("p",[s._v("我们可以通过"),a("code",[s._v("/** */")]),s._v("来注释 TypeScript 的类型，当我们在使用相关类型的时候就会有注释的提示，这个技巧在多人协作开发的时候十分有用，我们绝大部分情况下不用去花时间翻文档或者跳页去看注释。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/11/16dbb148376ae827?w=763&h=401&f=png&s=43941",alt:"2019-06-26-14-47-37"}})]),s._v(" "),a("h2",{attrs:{id:"巧用类型推导"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#巧用类型推导"}},[s._v("#")]),s._v(" 巧用类型推导")]),s._v(" "),a("p",[s._v("TypeScript 能根据一些简单的规则推断（检查）变量的类型。")]),s._v(" "),a("p",[s._v("比如一个简单的 add 函数")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function add(a: number, b: number) {\n    return a + b\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("TypeScript 就可以通过参数与 return 的运算符推导出函数的返回值")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/11/16dbb14837abf150?w=511&h=119&f=png&s=19774",alt:"2019-06-26-15-21-14"}})]),s._v(" "),a("p",[s._v("如果想获取函数整体的类型那么可以借助 "),a("code",[s._v("typeof")])]),s._v(" "),a("blockquote",[a("p",[s._v("注意与 JavaScript 中的 typeof 区分开")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("type AddFn = typeof add\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("当然上述情况算是比较简单的情况，有时候我们的返回值类型其实比较复杂，这个时候借助类型推导和 "),a("code",[s._v("ReturnType")]),s._v(" 就可以很轻松地获取返回值类型。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("type returnType = ReturnType<typeof add> // number\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("上述技巧在对 redux 进行编码的时候非常适用，这样可以省略我们大量的重复代码，毕竟 redux 的编码工作是非常繁琐的。")]),s._v(" "),a("h2",{attrs:{id:"巧用元组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#巧用元组"}},[s._v("#")]),s._v(" 巧用元组")]),s._v(" "),a("p",[s._v("有时候我们可能需要批量的来获取参数，并且每一个参数的类型还不一样，我们可以声明一个元组如：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function query(...args:[string, number, boolean]){\n  const d: string = args[0];\n  const n: number = args[1];\n  const b: boolean = args[2];\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h2",{attrs:{id:"巧用omit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#巧用omit"}},[s._v("#")]),s._v(" 巧用Omit")]),s._v(" "),a("p",[s._v("有时候我们需要复用一个类型，但是又不需要此类型内的全部属性，因此需要剔除某些属性，这个时候 "),a("code",[s._v("Omit")]),s._v(" 就派上用场了。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("interface User {\n    username: string\n    id: number\n    token: string\n    avatar: string\n    role: string\n}\ntype UserWithoutToken = Omit<User, 'token'>\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("这个方法在 React 中经常用到，当父组件通过 props 向下传递数据的时候，通常需要复用父组件的 props 类型，但是又需要剔除一些无用的类型。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/11/16dbb14837a31a2a?w=427&h=172&f=png&s=28733",alt:"2019-06-26-16-00-56"}})]),s._v(" "),a("h2",{attrs:{id:"运用record"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运用record"}},[s._v("#")]),s._v(" 运用Record")]),s._v(" "),a("p",[a("code",[s._v("Record")]),s._v(" 是 TypeScript 的一个高级类型，但是相关的文档并不多，所以经常被人忽略，但是是一个非常强大的高级类型。")]),s._v(" "),a("p",[s._v("Record 允许从 Union 类型中创建新类型，Union 类型中的值用作新类型的属性。")]),s._v(" "),a("p",[s._v("举个简单的例子，比如我们要实现一个简单的汽车品牌年龄表，一下写法貌似没有问题。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("type Car = 'Audi' | 'BMW' | 'MercedesBenz'\n\nconst cars = {\n    Audi: { age: 119 },\n    BMW: { age: 113 },\n    MercedesBenz: { age: 133 },\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("虽然这个写法没问题，但是有没有考虑过类型安全的问题？")]),s._v(" "),a("p",[s._v("比如：")]),s._v(" "),a("ul",[a("li",[s._v("我们忘记写了一个汽车品牌，他会报错吗？")]),s._v(" "),a("li",[s._v("我们拼写属性名错误了，它会报错吗？")]),s._v(" "),a("li",[s._v("我们添加了一个非上述三个品牌的品牌进去，他会报错吗？")]),s._v(" "),a("li",[s._v("我们更改了其中一个品牌的名字，他会有报错提醒吗？")])]),s._v(" "),a("p",[s._v("上述这种写法统统不会，这就需要 Record 的帮助。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("type Car = 'Audi' | 'BMW' | 'MercedesBenz'\ntype CarList = Record<Car, {age: number}>\n\nconst cars: CarList = {\n    Audi: { age: 119 },\n    BMW: { age: 113 },\n    MercedesBenz: { age: 133 },\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("当我们拼写错误:")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/11/16dbb14837d333b3?w=555&h=207&f=png&s=47459",alt:"2019-06-26-17-21-45"}})]),s._v(" "),a("p",[s._v("当我们少些一个品牌:")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/11/16dbb148380cc7e6?w=569&h=292&f=png&s=54755",alt:"2019-06-26-17-22-18"}})]),s._v(" "),a("p",[s._v("当我们添加了一个非约定好的品牌进去:")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/11/16dbb14838368006?w=552&h=264&f=png&s=48437",alt:"2019-06-26-17-23-47"}})]),s._v(" "),a("p",[s._v("在实战项目中尽量多用 Record，它会帮助你规避很多错误，在 vue 或者 react 中有很多场景选择 Record 是更优解。")]),s._v(" "),a("h2",{attrs:{id:"巧用类型约束"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#巧用类型约束"}},[s._v("#")]),s._v(" 巧用类型约束")]),s._v(" "),a("p",[s._v("在 .tsx 文件里，泛型可能会被当做 jsx 标签")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const toArray = <T>(element: T) => [element]; // Error in .tsx file.\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("加 extends 可破")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const toArray = <T extends {}>(element: T) => [element]; // No errors.\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h2",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[s._v("#")]),s._v(" 小结")]),s._v(" "),a("p",[s._v("本节介绍了几个在实战中实用的技巧，当然我们的技巧不止上面这些，TypeScript 的技巧很多，我们只是介绍了最常用的几种，包括上一节的类型映射、条件类型、索引类型和几个类型操作符都是非常常用的手段，在了解了这些技巧之后，我们就可以在实战中小试牛刀了。")])])}),[],!1,null,null,null);e.default=n.exports}}]);