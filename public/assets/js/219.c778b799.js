(window.webpackJsonp=window.webpackJsonp||[]).push([[219],{699:function(n,s,a){"use strict";a.r(s);var t=a(59),i=Object(t.a)({},(function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"java方法重载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java方法重载"}},[n._v("#")]),n._v(" Java方法重载")]),n._v(" "),a("h3",{attrs:{id:"方法重载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法重载"}},[n._v("#")]),n._v(" 方法重载")]),n._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#_61"}},[n._v("重载的不同方法")])]),n._v(" "),a("li",[a("ul",[a("li",[a("a",{attrs:{href:"#_63"}},[n._v("通过改变参数的数量")])]),n._v(" "),a("li",[a("a",{attrs:{href:"#_71"}},[n._v("通过改变参数类型")])]),n._v(" "),a("li",[a("a",{attrs:{href:"#_90"}},[n._v("重载与返回类型无关")])])])]),n._v(" "),a("li",[a("a",{attrs:{href:"#_144"}},[n._v("方法重载和类型提升")])])]),n._v(" "),a("p",[n._v("如果一个类中有多个具有相同名称但参数不同的方法，则称为方法重载。如果只需要执行一个操作，具有相同的方法名称将增加程序的可读性。"),a("br"),n._v("\n假设必须执行给定数值的添加操作(求和)，但是参数的数量不固定，如果为两个参数编写add1(int，int)方法，为三个参数编写add2(int，int，int)方法.可以用重载："),a("br"),n._v(" "),a("strong",[n._v("两个参数相加：")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("int add(int num1，int num2){\n\treturn num1 + num2;\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br")])]),a("p",[a("strong",[n._v("三个参数相加")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("int add(int num1,int num2 ,int num3){\n\treturn num1 + num2 + num3;\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br")])]),a("p",[a("strong",[n._v("无数个参数相加")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("static int add(int... args) {\n\t\tint result = 0;\n\t\tfor(int i = 0;i < args.length;i ++) {\n\t\t\tresult += args[i];\n\t\t}\n\t\treturn result;\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br")])]),a("p",[n._v("eg:"),a("br"),n._v("\npublic class VariableLengthParameter {")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("public static void main(String[] args) {\n\tSystem.out.println(add(465465,465465,31,36465,41,31,465,41,3,1654,654,1,32,165,465,4,3213,246,54,65,465454654));\n\tSystem.out.println(add(1,2));\n\tSystem.out.println(add(1,2,3));\n}\n\nstatic int add(int... nums) {\n\tint result = 0;\n\tfor(int i = 0;i < nums.length;i ++) {\n\t\tresult += nums[i];\n\t}\n\treturn result;\n}\n\nstatic int add(int num1,int num2) {\n\treturn num1 + num2;\n}\n\nstatic int add(int num1,int num2,int num3) {\n\treturn num1 +num2 + num3;\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br")])]),a("p",[n._v("}"),a("br"),n._v("\n输出结果")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("466429214\n3\n6\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br")])]),a("p",[a("strong",[n._v("q) 为什么要方法重载")]),a("br"),n._v("\na) 方法重载可以提高可读性。如果没有重载，两个参数的add(int num1,int num2)存在后，就不能存在三个参数的add(int num1,int num2,int num3),或者说三个参数的add方法必须改名，也就是add1(int num1,int num2,int num3);而重载可以解决以上问题。")]),n._v(" "),a("h1",{attrs:{id:"重载的不同方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重载的不同方法"}},[n._v("#")]),n._v(" 重载的不同方法")]),n._v(" "),a("p",[n._v("两种不同方式")]),n._v(" "),a("h2",{attrs:{id:"通过改变参数的数量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通过改变参数的数量"}},[n._v("#")]),n._v(" 通过改变参数的数量")]),n._v(" "),a("p",[n._v("三个方法,参数数目不同构成重载")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("add(int num1,int num2){}\nadd(int num1,int num2,int num3){}\nadd(int... args){}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br")])]),a("h2",{attrs:{id:"通过改变参数类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通过改变参数类型"}},[n._v("#")]),n._v(" 通过改变参数类型")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("class Add{\n\tint add(int num1,int num2){\n\t\treturn num1 + num2;\n\t}\n\n\tdouble add(double num1,double num2){\n\t\treturn num1 + num2;\n\t}\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br")])]),a("p",[n._v("两个参数add参数类型不同，可以称为重载")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("add(int num1,int num2){}\nadd( num1,double num2){}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br")])]),a("h2",{attrs:{id:"重载与返回类型无关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重载与返回类型无关"}},[n._v("#")]),n._v(" 重载与返回类型无关")]),n._v(" "),a("p",[n._v("Java通过返回类型来实现重载，不太现实")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("class Add(){\n\tstatic int add(int num1,int num2){\n\t\treturn num1 + num2;\n\t}\n\tstatic double add(int num1,int num2){\n\t\treturn num1 + num2;\n\t}\n\n\tpublic static void main(String args){\n\t\tadd(1,2);\n\t}\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br")])]),a("p",[n._v("以上函数当点用add的时候，该找哪个函数呢？是int add(){} 还是double add(){}?所以根据返回数据类型来重载，是很容易造成混淆，因为不知道调用哪个返回类型的add方法。")]),n._v(" "),a("blockquote",[a("p",[n._v("在这里，编译时错误优于运行时错误。 所以，如果你声明相同的方法具有相同的参数，java编译器就不知道执行哪个方法，造成不确定的错误。")])]),n._v(" "),a("p",[n._v("Q)Java main() 方法可以重载吗？"),a("br"),n._v("\nA)main()方法也是普通方法，可以重载，只不过虚拟机只调用带字符串公共类型的方法，public static void main（String[] args）{},但是你可以自定义你用的main()方法，main（int a）;main(String a);")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('class TestOverloading{  \n    public static void main(String[] args){System.out.println("main with String[]");}  \n    public static void main(String args){System.out.println("main with String");}  \n    public static void main(){System.out.println("main without args");}  \n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br")])]),a("p",[n._v("输出结果")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("main with String[]\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br")])]),a("p",[n._v("虚拟机只执行一个main方法。"),a("br"),n._v("\n如果你在虚拟机执行的main方法中调用其他方法")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('class TestOverloading{  \n    public static void main(String[] args){System.out.println("main with String[]");main("234");main()}  \n    public static void main(String args){System.out.println("main with String");}  \n    public static void main(){System.out.println("main without args");}  \n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br")])]),a("p",[n._v("输出结果")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("main with String[]；\nmain with String；\nmain without args；\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br")])]),a("h1",{attrs:{id:"方法重载和类型提升"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法重载和类型提升"}},[n._v("#")]),n._v(" 方法重载和类型提升")]),n._v(" "),a("p",[n._v("如果没有找到匹配的数据类型，那么会隐式地将一个类型提升到另一个类型。 让我们通过下面的图示来理解这个概念："),a("br"),n._v(" "),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/2018120510192187.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzEwMTE0NA==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),n._v(" "),a("blockquote",[a("p",[n._v("其中8字节的long可以自动整型提升为4字节的float，且4字节的float的最大值大于long的最大值，float的最小值小于long的最小值；")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('public class LongToFloat {\n\n\tpublic static Logger log = Logger.getLogger(LongToFloat.class.getName());\n\t\n\tpublic static void main(String[] args) {\n\t\tfinal long MAX_VALUE_TO_LONG = Long.MAX_VALUE;\n\t\tfinal long MIN_VALUE_TO_LONG = Long.MIN_VALUE;\n\t\tfinal float MAX_VALUE_TO_FLOAT = Float.MAX_VALUE;\n\t\tfinal float MIN_VALUE_TO_FLOAT = Float.MIN_VALUE;                       //正数的最小值\n\t\tfloat NEGATIVE_MIN_VALUE_TO_FLOAT = -1 * MAX_VALUE_TO_FLOAT - 1.01E31f;\n\t\tlog.info("\\n" + MAX_VALUE_TO_FLOAT\n\t\t\t\t+ "\\n" + MIN_VALUE_TO_FLOAT + "(float正数的最小值)"\n\t\t\t\t+ "\\n" + MAX_VALUE_TO_LONG\n\t\t\t\t+ "\\n" + MIN_VALUE_TO_LONG\n\t\t\t\t+ "\\nfloat最大的数 - long最大的数：" + (MAX_VALUE_TO_FLOAT - MAX_VALUE_TO_LONG)\n\t\t\t\t+ "\\n" + NEGATIVE_MIN_VALUE_TO_FLOAT);\n\t\tfloat longToFloatMax = MAX_VALUE_TO_LONG;                                                   //long最大值可以自动整型提升转换成float\n\t\tlog.info("\\n把long最大值转换成float"\n\t\t\t\t+ "\\n\\t转换前:" \n\t\t\t\t+ MAX_VALUE_TO_LONG\n\t\t\t\t+ "\\n\\t转换后"\n\t\t\t\t+ longToFloatMax);\n//\t\tlong floatToLongMax = MAX_VALUE_TO_FLOAT;      编译报错，float不能转换long            \n//\t\tlong floatToLongMin = MIN_VALUE_TO_FLOAT;      编译报错，float不能转换long\n\t}\n\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br")])]),a("p",[n._v("输出结果为")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("3.4028235E38                                                                        //float正数最大值\n1.4E-45(float正数的最小值)                                                    //float正数最小值\n9223372036854775807                                                         //long最大值\n-9223372036854775808                                                       //long最小值\nfloat最大的数 - long最大的数：3.4028235E38                     //float最大值比long最大值大的多\n-3.4028235E38                                                                      //大约计算后的float的最小值\n\n把long最大值转换成float\n\t转换前:9223372036854775807\n\t转换后9.223372E18                                                   //long可以不丢失原因精确转换成float;\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br")])]),a("p",[n._v("具体原因请移步"),a("a",{attrs:{href:"https://blog.csdn.net/zq602316498/article/details/41148063",target:"_blank",rel:"noopener noreferrer"}},[n._v("float和double类型的范围和精度。"),a("OutboundLink")],1),a("br"),n._v("\n关于整型提升的三个案例"),a("br"),n._v("\neg1:")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("class OverloadingCalculation1 {\n    void sum(int a, long b) {\n        System.out.println(a + b);\n    }\n\n    void sum(int a, int b, int c) {\n        System.out.println(a + b + c);\n    }\n\n    public static void main(String args[]) {\n        OverloadingCalculation1 obj = new OverloadingCalculation1();\n        obj.sum(20, 20);                                                // now second int literal will be promoted to long\n        obj.sum(20, 20, 20);\n\n    }\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br")])]),a("p",[n._v("输出结果")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("40\n60\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br")])]),a("p",[n._v("这里的方法sum(20,20)，第一给参数是int,第二个是long,这里吧默认的参数20自动整形提升为20L。"),a("br"),n._v("\n第二个例子")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('lass OverloadingCalculation2 {\n    void sum(int a, int b) {\n        System.out.println("int arg method invoked");\n    }\n\n\tvoid sum(long a, long b) {\n    \tSystem.out.println("long arg method invoked");\n }\n\n\tpublic static void main(String args[]) {\n   \t \tOverloadingCalculation2 obj = new OverloadingCalculation2();\n   \t \tobj.sum(20, 20);                                                     // now int arg sum() method gets invoked\n }\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br")])]),a("p",[n._v("}")]),n._v(" "),a("p",[n._v("输出")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("int arg method invoked\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br")])]),a("p",[n._v("这里因为能找到与自己相匹配的类型所以不会整形提升"),a("br"),n._v("\neg3:")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('class OverloadingCalculation3 {\n    void sum(int a, long b) {\n        System.out.println("a method invoked");\n    }\n    void sum(long a, int b) {\n        System.out.println("b method invoked");\n    }\n    public static void main(String args[]) {\n        OverloadingCalculation3 obj = new OverloadingCalculation3();\n        obj.sum(20, 20);                                                                            // now ambiguity\n    }\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br")])]),a("p",[n._v("这里会报编译错误，sum(20,20)无论执行那个方法都需要整形提升，但同时整型提升后，两个方法都可以执行，所以产生混淆。")]),n._v(" "),a("blockquote",[a("p",[n._v("总之，当你传入参数后，虚拟机不知道该执行哪个方法，则会在编译的时候就会报错。"),a("br"),n._v("\nJava中double不会整形提升，因为在8种基本变量类型中，它是老大。")])])])}),[],!1,null,null,null);s.default=i.exports}}]);