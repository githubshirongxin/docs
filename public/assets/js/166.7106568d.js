(window.webpackJsonp=window.webpackJsonp||[]).push([[166],{649:function(e,n,s){"use strict";s.r(n);var t=s(59),a=Object(t.a)({},(function(){var e=this,n=e.$createElement,s=e._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"解一道-leetcode-中国招聘面试题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解一道-leetcode-中国招聘面试题"}},[e._v("#")]),e._v(" 解一道 LeetCode 中国招聘面试题")]),e._v(" "),s("p",[e._v("LeetCode 在其 github 上几道面试题,将代码发送 review 后可能获得免一轮面试的机会,其中就有一道 TypeScript 题目,主要考察如何编写复杂的 TypeScript 类型.")]),e._v(" "),s("p",[e._v("这个面试题目很有水平,如果能在几分钟内就整理好思路,那么候选人的TS水平大概率是没问题的,是有写有一定复杂度的TS底层库的能力.")]),e._v(" "),s("p",[e._v("一路从第一节读到现在的小伙伴,如果认真把前面的内容搞清楚的话,这道题也并不难,我们现在就利用之前的知识整合在一起,解一下这个面试题.")]),e._v(" "),s("blockquote",[s("p",[s("a",{attrs:{href:"https://github.com/LeetCode-OpenSource/hire/blob/master/typescript_zh.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("题目地址"),s("OutboundLink")],1)])]),e._v(" "),s("h2",{attrs:{id:"题目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#题目"}},[e._v("#")]),e._v(" 题目")]),e._v(" "),s("h3",{attrs:{id:"问题定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#问题定义"}},[e._v("#")]),e._v(" 问题定义")]),e._v(" "),s("p",[e._v("假设有一个叫 "),s("code",[e._v("EffectModule")]),e._v(" 的类")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("class EffectModule {}\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("这个对象上的方法"),s("strong",[e._v("只可能")]),e._v("有两种类型签名:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("interface Action<T> {\n  payload?: T\n  type: string\n}\n\nasyncMethod<T, U>(input: Promise<T>): Promise<Action<U>>\n\nsyncMethod<T, U>(action: Action<T>): Action<U>\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br")])]),s("p",[e._v("这个对象上还可能有一些任意的"),s("strong",[e._v("非函数属性")]),e._v("：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('interface Action<T> {\n  payload?: T;\n  type: string;\n}\n\nclass EffectModule {\n  count = 1;\n  message = "hello!";\n\n  delay(input: Promise<number>) {\n    return input.then(i => ({\n      payload: `hello ${i}!`,\n      type: \'delay\'\n    });\n  }\n\n  setMessage(action: Action<Date>) {\n    return {\n      payload: action.payload!.getMilliseconds(),\n      type: "set-message"\n    };\n  }\n}\n\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br")])]),s("p",[e._v("现在有一个叫 "),s("code",[e._v("connect")]),e._v(" 的函数，它接受 EffectModule 实例，将它变成另一个一个对象，这个对象上只有"),s("strong",[e._v("EffectModule 的同名方法")]),e._v("，但是方法的类型签名被改变了:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("asyncMethod<T, U>(input: Promise<T>): Promise<Action<U>>  变成了\nasyncMethod<T, U>(input: T): Action<U> \n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("syncMethod<T, U>(action: Action<T>): Action<U>  变成了\nsyncMethod<T, U>(action: T): Action<U>\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("p",[e._v("例子:")]),e._v(" "),s("p",[e._v("EffectModule 定义如下:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('interface Action<T> {\n  payload?: T;\n  type: string;\n}\n\nclass EffectModule {\n  count = 1;\n  message = "hello!";\n\n  delay(input: Promise<number>) {\n    return input.then(i => ({\n      payload: `hello ${i}!`,\n      type: \'delay\'\n    });\n  }\n\n  setMessage(action: Action<Date>) {\n    return {\n      payload: action.payload!.getMilliseconds(),\n      type: "set-message"\n    };\n  }\n}\n\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br")])]),s("p",[e._v("connect 之后:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("type Connected = {\n  delay(input: number): Action<string>\n  setMessage(action: Date): Action<number>\n}\nconst effectModule = new EffectModule()\nconst connected: Connected = connect(effectModule)\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br")])]),s("h3",{attrs:{id:"要求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#要求"}},[e._v("#")]),e._v(" 要求")]),e._v(" "),s("p",[e._v("在 "),s("a",{attrs:{href:"https://codesandbox.io/s/o4wwpzyzkq",target:"_blank",rel:"noopener noreferrer"}},[e._v("题目链接"),s("OutboundLink")],1),e._v(" 里面的 "),s("code",[e._v("index.ts")]),e._v(" 文件中，有一个 "),s("code",[e._v("type Connect = (module: EffectModule) => any")]),e._v("，将 "),s("code",[e._v("any")]),e._v(" 替换成题目的解答，让编译能够顺利通过，并且 "),s("code",[e._v("index.ts")]),e._v(" 中 "),s("code",[e._v("connected")]),e._v(" 的类型与:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("type Connected = {\n  delay(input: number): Action<string>;\n  setMessage(action: Date): Action<number>;\n}\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[s("strong",[e._v("完全匹配")]),e._v("。")]),e._v(" "),s("h2",{attrs:{id:"分析题目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分析题目"}},[e._v("#")]),e._v(" 分析题目")]),e._v(" "),s("p",[e._v("这道题的题目非常长,但是如果你写过类 Redux 数据流解决方案（DVA就是此类方案）的话，应该会知道这就是一个类 Redux 数据流解决方案的 TypeScript 版.")]),e._v(" "),s("p",[e._v("但是本题目的重点并不在于这个数据流框架如何设计，而是如何设计类型，笔者曾经写过TS版的数据流解决方案，这个解决方案其实难点之一就是设计类型，让框架的使用者可以非常友好地获得类型提示与完整的类型定义。")]),e._v(" "),s("p",[e._v("如果你用过 Dva 的话就知道，虽然它有"),s("code",[e._v("d.ts")]),e._v("文件定义类型，但是根本不会有太多提示，其实跟写 JS 区别不大，在 TS 环境下的开发体验并不好。")]),e._v(" "),s("p",[e._v("好了，我们回到题目中，题目的要求很简单，就是我们设计类型把 "),s("code",[e._v("type Connect")]),e._v(" 中的 "),s("code",[e._v("any")]),e._v(" 替换掉,并符合:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("type Connected = {\n  delay(input: number): Action<string>;\n  setMessage(action: Date): Action<number>;\n}\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[e._v("并编译通过。")]),e._v(" "),s("p",[e._v("我们再把问题简化一下，就是设计一个工具类型，让题目中的 "),s("code",[e._v("EffectModule")]),e._v(" 的实例转化为符合要求的 "),s("code",[e._v("Connected")]),e._v("。")]),e._v(" "),s("p",[e._v("即:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("type Connect = (module: EffectModule) => xxx ---\x3e type Connected = {\n  delay(input: number): Action<string>;\n  setMessage(action: Date): Action<number>;\n}\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[e._v("仔细观察上面的伪代码实例,"),s("code",[e._v("Connected")]),e._v(" 其实是一个对象类型，其中包含的 "),s("code",[e._v("key-value")]),e._v(" 就是 "),s("code",[e._v("EffectModule")]),e._v(" 中的方法转化而来的，所以我们的入手处就是想办法将 "),s("code",[e._v("EffectModule")]),e._v(" 中的方法转化为对应的 "),s("code",[e._v("Connected")]),e._v(" 中的 "),s("code",[e._v("key-value")]),e._v("。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("type Connect = (module: EffectModule) => {\n  ...\n}\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("p",[e._v("再观察 "),s("code",[e._v("Connected")]),e._v(" 的属性与 "),s("code",[e._v("EffectModule")]),e._v(" 的方法是不是有共同之处?他们的名字是一样的，所以我们得先设计一个工具类型把 "),s("code",[e._v("EffectModule")]),e._v(" 中的方法名取出来。")]),e._v(" "),s("p",[e._v('这就用到我们之前学的知识了，我们先得"遍历"(in关键字)属性，而且 '),s("code",[e._v("EffectModule")]),e._v(" 包含非方法的「属性」，所以得做个判断，如果是属性值类型是函数那么取出，否则不要取出，这种条件判断很容易让人联想到这里需要运用「条件类型」，即：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("type methodsPick<T> = { [K in keyof T]: T[K] extends Function ? K : never }[keyof T]\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("解决了取 "),s("code",[e._v("key")]),e._v(" 的问题，我们要解决一个更难的问题就是取 "),s("code",[e._v("value")]),e._v(" 类型+转换，我们已经注意到了，虽然 "),s("code",[e._v("Connected")]),e._v(" 的属性与 "),s("code",[e._v("EffectModule")]),e._v(" 的方法的 "),s("code",[e._v("key")]),e._v(" 一样，但是其 "),s("code",[e._v("value")]),e._v(" 类型是不同的，比如在 "),s("code",[e._v("EffectModule")]),e._v(" 中异步方法的类型是 "),s("code",[e._v("asyncMethod<T, U>(input: Promise<T>): Promise<Action<U>>")]),e._v(" 我们需要转化为 "),s("code",[e._v("asyncMethod<T, U>(input: T): Action<U>")]),e._v("。")]),e._v(" "),s("p",[e._v("我们先把转换前的方法类型与转换后的先定义出来:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("type asyncMethod<T, U> = (input: Promise<T>) => Promise<Action<U>> // 转换前\ntype asyncMethodConnect<T, U> = (input: T) => Action<U> // 转换后\ntype syncMethod<T, U> = (action: Action<T>) => Action<U> // 转换前\ntype syncMethodConnect<T, U> = (action: T) => Action<U> // 转换后\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[e._v("接下来我们开始着手转化工作,这里用到了「条件类型」+「推断类型」。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("type EffectModuleMethodsConnect<T> = T extends asyncMethod<infer U, infer V>\n  ? asyncMethodConnect<U, V>\n  : T extends syncMethod<infer U, infer V>\n  ? syncMethodConnect<U, V>\n  : never\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br")])]),s("p",[e._v("这是本题目的关键部分,我们简略分析一下:")]),e._v(" "),s("ol",[s("li",[s("code",[e._v("EffectModuleMethodsConnect<T>")]),e._v(" 中泛型 "),s("code",[e._v("T")]),e._v(" 接受的是 "),s("code",[e._v("EffectModule")]),e._v(" 的方法类型")]),e._v(" "),s("li",[e._v("接下来进行一个判断,如果是可分配给 "),s("code",[e._v("asyncMethod<infer U, infer V>")]),e._v(" 的话,说明是异步方法,那么把它转化为 "),s("code",[e._v("asyncMethodConnect<U, V>")])]),e._v(" "),s("li",[e._v("如果可分配给 "),s("code",[e._v("syncMethod<infer U, infer V>")]),e._v(" 那么是同步方法,转化为 "),s("code",[e._v("syncMethodConnect<U, V>")])]),e._v(" "),s("li",[e._v("上面的条件全部不符,那么就返回 "),s("code",[e._v("never")])])]),e._v(" "),s("p",[e._v("接下来我们做收尾工作，目前我们有两个主要的工具类型 "),s("code",[e._v("EffectModuleMethodsConnect")]),e._v(" 负责类型的转化,"),s("code",[e._v("methodsPick")]),e._v(" 负责取出方法名,现在我们先把方法名取出:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("type EffectModuleMethods = methodsPick<EffectModule>\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("最后,我们用「映射类型」把转化后的字段写入,其中 "),s("code",[e._v("[M in EffectModuleMethods]")]),e._v(" 中 "),s("code",[e._v("M")]),e._v(" 就是方法名,"),s("code",[e._v("EffectModule[M]")]),e._v(" 是方法类型,"),s("code",[e._v("EffectModuleMethodsConnect<EffectModule[M]>")]),e._v(" 则是将方法类型转化为题目中规定的目标类型:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("type Connect = (module: EffectModule) => {\n  [M in EffectModuleMethods]: EffectModuleMethodsConnect<EffectModule[M]>\n}\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("p",[e._v("至此我们的类型设计就完成了.")]),e._v(" "),s("h2",{attrs:{id:"小结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[e._v("#")]),e._v(" 小结")]),e._v(" "),s("p",[e._v("之所以在这里探讨一个面试题就是想把之前的知识做一个总结,恰好这个题目非常符合我们的标准,我们涉及的高级类型这里都有运用,所以这确实是一个能考察出候选人水平的题目.")]),e._v(" "),s("p",[e._v("目前我已经把答案分享在"),s("a",{attrs:{href:"https://codesandbox.io/embed/typescript-problem-5lzyp",target:"_blank",rel:"noopener noreferrer"}},[e._v("链接"),s("OutboundLink")],1),e._v("中了.")])])}),[],!1,null,null,null);n.default=a.exports}}]);