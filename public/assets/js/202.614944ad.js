(window.webpackJsonp=window.webpackJsonp||[]).push([[202],{754:function(v,_,o){"use strict";o.r(_);var e=o(59),c=Object(e.a)({},(function(){var v=this,_=v.$createElement,o=v._self._c||_;return o("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[o("h3",{attrs:{id:"前言"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[v._v("#")]),v._v(" 前言")]),v._v(" "),o("p",[v._v("有试过样式覆盖导致排版出问题或布局时不知使用什么长度单位声明属性吗？这些问题应该都是比较常见的问题，笔者有位同事遇到样式覆盖的问题时一言不合使用"),o("code",[v._v("!important")]),v._v("暴力解决，这样真的好吗？")]),v._v(" "),o("h3",{attrs:{id:"优先级别"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#优先级别"}},[v._v("#")]),v._v(" 优先级别")]),v._v(" "),o("p",[v._v("样式覆盖的根本原因是未处理好规则间的优先级别，虽然使用"),o("code",[v._v("!important")]),v._v("能解决问题，但是不能什么情况都由"),o("code",[v._v("!important")]),v._v("暴力解决。")]),v._v(" "),o("p",[v._v("为何样式需优先级别呢？当创建的样式越来越复杂时，一个节点的样式将会受到越来越多的影响，这种影响可能来自周围节点也可能来自自身。通过相关规范分配给规则一个权重，那么样式可按照权重计算，呈现页面最终的效果。")]),v._v(" "),o("p",[v._v("从以下几方面了解优先级别，相信能更好把握优先级别的使用场景。")]),v._v(" "),o("h5",{attrs:{id:"特点"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[v._v("#")]),v._v(" 特点")]),v._v(" "),o("ul",[o("li",[v._v("使用"),o("code",[v._v("就近原则")])]),v._v(" "),o("li",[o("code",[v._v("继承样式")]),v._v("的优先级别最低")]),v._v(" "),o("li",[o("code",[v._v("!important样式")]),v._v("的优先级别最高，若冲突则重新计算")])]),v._v(" "),o("h5",{attrs:{id:"权重"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#权重"}},[v._v("#")]),v._v(" 权重")]),v._v(" "),o("blockquote",[o("p",[v._v("直观权重")])]),v._v(" "),o("ul",[o("li",[o("strong",[v._v("10000")]),v._v("："),o("code",[v._v("!important")])]),v._v(" "),o("li",[o("strong",[v._v("1000")]),v._v("："),o("code",[v._v("内联样式")]),v._v("、"),o("code",[v._v("外联样式")])]),v._v(" "),o("li",[o("strong",[v._v("100")]),v._v("："),o("code",[v._v("ID选择器")])]),v._v(" "),o("li",[o("strong",[v._v("10")]),v._v("："),o("code",[v._v("类选择器")]),v._v("、"),o("code",[v._v("伪类选择器")]),v._v("、"),o("code",[v._v("属性选择器")])]),v._v(" "),o("li",[o("strong",[v._v("1")]),v._v("："),o("code",[v._v("元素选择器")]),v._v("、"),o("code",[v._v("伪元素选择器")])]),v._v(" "),o("li",[o("strong",[v._v("0")]),v._v("："),o("code",[v._v("通配选择器")]),v._v("、"),o("code",[v._v("后代选择器")]),v._v("、"),o("code",[v._v("兄弟选择器")])])]),v._v(" "),o("blockquote",[o("p",[v._v("微观权重")])]),v._v(" "),o("ul",[o("li",[o("strong",[v._v("1,0,0,0,0")]),v._v("："),o("code",[v._v("!important")])]),v._v(" "),o("li",[o("strong",[v._v("0,1,0,0,0")]),v._v("："),o("code",[v._v("内联样式")]),v._v("、"),o("code",[v._v("外联样式")])]),v._v(" "),o("li",[o("strong",[v._v("0,0,1,0,0")]),v._v("："),o("code",[v._v("ID选择器")])]),v._v(" "),o("li",[o("strong",[v._v("0,0,0,1,0")]),v._v("："),o("code",[v._v("类选择器")]),v._v("、"),o("code",[v._v("伪类选择器")]),v._v("、"),o("code",[v._v("属性选择器")])]),v._v(" "),o("li",[o("strong",[v._v("0,0,0,0,1")]),v._v("："),o("code",[v._v("元素选择器")]),v._v("、"),o("code",[v._v("伪元素选择器")])]),v._v(" "),o("li",[o("strong",[v._v("0,0,0,0,0")]),v._v("："),o("code",[v._v("通配选择器")]),v._v("、"),o("code",[v._v("后代选择器")]),v._v("、"),o("code",[v._v("兄弟选择器")])])]),v._v(" "),o("p",[v._v("总体来说，直观权重和微观权重只是表达方式不同，实际意义还是一致的，使用公式可表达成这样。")]),v._v(" "),o("p",[o("code",[v._v("!important > 内联样式 = 外联样式 > ID选择器 > 类选择器 = 伪类选择器 = 属性选择器 > 元素选择器 = 伪元素选择器 > 通配选择器 = 后代选择器 = 兄弟选择器")])]),v._v(" "),o("h5",{attrs:{id:"计算"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#计算"}},[v._v("#")]),v._v(" 计算")]),v._v(" "),o("blockquote",[o("p",[v._v("优先级别相同的规则使用最后出现的规则")])]),v._v(" "),o("p",[o("code",[v._v(".input-box { color: #f66; } :focus { color: #66f; } [type=text] { color: #f90; }")])]),v._v(" "),o("p",[v._v("虽然"),o("code",[v._v("类选择器")]),v._v("、"),o("code",[v._v("伪类选择器")]),v._v("和"),o("code",[v._v("属性选择器")]),v._v("三者的优先级别相同，但是最后出现的规则其优先级别最高，所以"),o("code",[v._v("<input>")]),v._v("最终会显示"),o("code",[v._v("#f90")]),v._v("。")]),v._v(" "),o("blockquote",[o("p",[v._v("优先级别无视节点在DOM树中的距离")])]),v._v(" "),o("p",[o("code",[v._v("html h1 { color: #f66; } body h1 { color: #66f; }")])]),v._v(" "),o("p",[v._v("虽然"),o("code",[v._v("<html>")]),v._v("包含着"),o("code",[v._v("<body>")]),v._v("，但是依据就近原则，所以"),o("code",[v._v("<h1>")]),v._v("最终会显示"),o("code",[v._v("#66f")]),v._v("。")]),v._v(" "),o("blockquote",[o("p",[v._v("不同规则作用于相同节点使用优先级别最高的规则")])]),v._v(" "),o("p",[o("code",[v._v("#bruce { color: #f66; } [id=bruce] { color: #66f; }")])]),v._v(" "),o("p",[v._v("虽然两者规则都作用于ID为bruce的"),o("code",[v._v("<div>")]),v._v("，但是"),o("code",[v._v("ID选择器")]),v._v("的优先级比"),o("code",[v._v("属性选择器")]),v._v("高，所以"),o("code",[v._v("<div>")]),v._v("最终会显示"),o("code",[v._v("#f66")]),v._v("。")]),v._v(" "),o("blockquote",[o("p",[v._v(":not()不参与优先级别的计算")])]),v._v(" "),o("p",[o("code",[v._v(":not()")]),v._v("在优先级别计算中不会被看成"),o("code",[v._v("伪类")]),v._v("，但是会把"),o("code",[v._v(":not()")]),v._v("里的选择器当作普通选择器计数。简单来说就是忽略"),o("code",[v._v(":not()")]),v._v("，其他伪类照常参与优先级别计算。")]),v._v(" "),o("h5",{attrs:{id:"规则"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#规则"}},[v._v("#")]),v._v(" 规则")]),v._v(" "),o("ul",[o("li",[v._v("规则的权值不同时，权值高的规则优先")]),v._v(" "),o("li",[v._v("规则的权值相同时，后定义的规则优先")]),v._v(" "),o("li",[v._v("属性后面追加"),o("code",[v._v("!important")]),v._v("时，规则无条件绝对优先")])]),v._v(" "),o("h3",{attrs:{id:"长度单位"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#长度单位"}},[v._v("#")]),v._v(" 长度单位")]),v._v(" "),o("p",[v._v("粗糙的干活可能只需"),o("code",[v._v("px")]),v._v("和"),o("code",[v._v("%")]),v._v("两个长度单位即可，随着终端设备分辨率的多样性，CSS衍生出越来越多的长度单位，灵活结合这些长度单位能为页面的布局方案提供更多可能性。")]),v._v(" "),o("p",[v._v("单位")]),v._v(" "),o("p",[v._v("定义")]),v._v(" "),o("p",[v._v("类型")]),v._v(" "),o("p",[v._v("描述")]),v._v(" "),o("p",[o("strong",[v._v("px")])]),v._v(" "),o("p",[v._v("像素")]),v._v(" "),o("p",[o("code",[v._v("绝对单位")])]),v._v(" "),o("p",[v._v("-")]),v._v(" "),o("p",[o("strong",[v._v("pt")])]),v._v(" "),o("p",[v._v("点")]),v._v(" "),o("p",[o("code",[v._v("绝对单位")])]),v._v(" "),o("p",[o("code",[v._v("1pt = 1/72in")])]),v._v(" "),o("p",[o("strong",[v._v("pc")])]),v._v(" "),o("p",[v._v("派")]),v._v(" "),o("p",[o("code",[v._v("绝对单位")])]),v._v(" "),o("p",[o("code",[v._v("1pc = 12pt")])]),v._v(" "),o("p",[o("strong",[v._v("mm")])]),v._v(" "),o("p",[v._v("毫米")]),v._v(" "),o("p",[o("code",[v._v("绝对单位")])]),v._v(" "),o("p",[v._v("-")]),v._v(" "),o("p",[o("strong",[v._v("cm")])]),v._v(" "),o("p",[v._v("厘米")]),v._v(" "),o("p",[o("code",[v._v("绝对单位")])]),v._v(" "),o("p",[v._v("-")]),v._v(" "),o("p",[o("strong",[v._v("in")])]),v._v(" "),o("p",[v._v("英寸")]),v._v(" "),o("p",[o("code",[v._v("绝对单位")])]),v._v(" "),o("p",[o("code",[v._v("1in = 96px = 2.54cm")])]),v._v(" "),o("p",[o("strong",[v._v("%")])]),v._v(" "),o("p",[v._v("百分比")]),v._v(" "),o("p",[o("code",[v._v("相对单位")])]),v._v(" "),o("p",[v._v("相对父节点，宽度对应，高度不一定对应")]),v._v(" "),o("p",[o("strong",[v._v("em")])]),v._v(" "),o("p",[v._v("M的宽度")]),v._v(" "),o("p",[o("code",[v._v("相对单位")])]),v._v(" "),o("p",[v._v("相对当前节点字体")]),v._v(" "),o("p",[o("strong",[v._v("rem")])]),v._v(" "),o("p",[v._v("M的宽度")]),v._v(" "),o("p",[o("code",[v._v("相对单位")])]),v._v(" "),o("p",[v._v("相对根结点字体")]),v._v(" "),o("p",[o("strong",[v._v("ch")])]),v._v(" "),o("p",[v._v("0的宽度")]),v._v(" "),o("p",[o("code",[v._v("相对单位")])]),v._v(" "),o("p",[v._v("相对当前节点字体")]),v._v(" "),o("p",[o("strong",[v._v("ex")])]),v._v(" "),o("p",[v._v("x的宽度")]),v._v(" "),o("p",[o("code",[v._v("相对单位")])]),v._v(" "),o("p",[v._v("相对当前节点字体")]),v._v(" "),o("p",[o("strong",[v._v("vw")])]),v._v(" "),o("p",[v._v("1%视窗宽度")]),v._v(" "),o("p",[o("code",[v._v("相对单位")])]),v._v(" "),o("p",[v._v("相对视窗")]),v._v(" "),o("p",[o("strong",[v._v("vh")])]),v._v(" "),o("p",[v._v("1%视窗高度")]),v._v(" "),o("p",[o("code",[v._v("相对单位")])]),v._v(" "),o("p",[v._v("相对视窗")]),v._v(" "),o("p",[o("strong",[v._v("vmin")])]),v._v(" "),o("p",[v._v("vw/vh最小者")]),v._v(" "),o("p",[o("code",[v._v("相对单位")])]),v._v(" "),o("p",[v._v("相对视窗")]),v._v(" "),o("p",[o("strong",[v._v("vmax")])]),v._v(" "),o("p",[v._v("vw/vh最大者")]),v._v(" "),o("p",[o("code",[v._v("相对单位")])]),v._v(" "),o("p",[v._v("相对视窗")]),v._v(" "),o("p",[v._v("这么多单位，到底如何区别呢？首先要明确一点，那就是"),o("strong",[v._v("屏幕分辨率")]),v._v("。")]),v._v(" "),o("p",[o("strong",[v._v("屏幕分辨率")]),v._v("指横纵向上的像素点数，单位是"),o("code",[v._v("px")]),v._v("。"),o("code",[v._v("屏幕分辨率")]),v._v("确定计算机屏幕上能显示多少信息的，以水平和垂直像素衡量。屏幕尺寸一致的情况下，"),o("code",[v._v("屏幕分辨率")]),v._v("越低在屏幕上显示的像素就越少，单个像素尺寸也比较大，"),o("code",[v._v("屏幕分辨率")]),v._v("越高在屏幕上显示的像素越多，单个像素尺寸也比较小。")]),v._v(" "),o("p",[o("code",[v._v("屏幕分辨率")]),v._v("就是屏幕上显示的像素个数，分辨率"),o("code",[v._v("1920×1080")]),v._v("意味着水平方向含有"),o("code",[v._v("1920")]),v._v("个像素数，垂直方向含有"),o("code",[v._v("1080")]),v._v("个像素数。屏幕尺寸一致的情况下，"),o("code",[v._v("屏幕分辨率")]),v._v("越高，显示效果就越细腻。这也是为何"),o("code",[v._v("iPhone")]),v._v("经常亮瞎眼睛的原因。")]),v._v(" "),o("p",[v._v("所以在同一个网页里，以"),o("code",[v._v("px")]),v._v("作为长度单位时，在不同"),o("code",[v._v("屏幕分辨率")]),v._v("下显示的大小是不同的。在低"),o("code",[v._v("屏幕分辨率")]),v._v("下像素比较大，显示的页面元素也偏大偏模糊。实际上，所有单位无论是"),o("code",[v._v("绝对单位")]),v._v("还是"),o("code",[v._v("相对单位")]),v._v("，最终都是转化为"),o("code",[v._v("px")]),v._v("在屏幕上显示。因此在设计和开发过程中都以"),o("code",[v._v("px")]),v._v("为准。")]),v._v(" "),o("blockquote",[o("p",[v._v("em/rem区别")])]),v._v(" "),o("p",[o("code",[v._v("em")]),v._v("和"),o("code",[v._v("rem")]),v._v("是移动端布局上常用的长度单位，两者的后缀都一致。"),o("code",[v._v("rem")]),v._v("全称是"),o("code",[v._v("root em")]),v._v("，意思是相对根节点作为参考的长度单位。")]),v._v(" "),o("ul",[o("li",[o("strong",[v._v("em")]),v._v("：当前节点字体宽度，准确来说是一个M的宽度")]),v._v(" "),o("li",[o("strong",[v._v("rem")]),v._v("：默认字体宽度，准确来说是一个M的宽度")])]),v._v(" "),o("p",[v._v("两者区别在于："),o("strong",[v._v("em相对父节点，rem相对根节点")]),v._v("。"),o("code",[v._v("em")]),v._v("以当前节点字体宽度作为参考，"),o("code",[v._v("rem")]),v._v("以根节点"),o("code",[v._v("<html>")]),v._v("字体宽度作为参考，默认是"),o("code",[v._v("16px")]),v._v("。很多同学错误地以为"),o("code",[v._v("em")]),v._v("是根据父节点作为参考的，实际上是当前节点继承了父节点的属性后产生的错觉。")]),v._v(" "),o("p",[o("code",[v._v("em")]),v._v("和"),o("code",[v._v("rem")]),v._v("都是很灵活且可扩展的长度单位，由浏览器转换为"),o("code",[v._v("px")]),v._v("，具体取决于设计图中的字体大小。")]),v._v(" "),o("p",[v._v("针对移动端，笔者通常会结合JS依据屏幕宽度与设计图宽度的比例动态声明"),o("code",[v._v("<html>")]),v._v("的"),o("code",[v._v("font-size")]),v._v("，以"),o("code",[v._v("rem")]),v._v("为长度单位声明所有节点的几何属性，这样就能做到大部分移动设备的页面兼容，兼容出入比较大的地方再通过"),o("code",[v._v("媒体查询")]),v._v("做特别处理。")]),v._v(" "),o("p",[v._v('`function AutoResponse(width = 750) {\nconst target = document.documentElement;\nif (target.clientWidth >= 600) {\ntarget.style.fontSize = "80px";\n} else {\ntarget.style.fontSize = target.clientWidth / width * 100 + "px";\n}\n}')]),v._v(" "),o("p",[v._v("AutoResponse();`")]),v._v(" "),o("p",[v._v("前提还需在"),o("code",[v._v("<html>")]),v._v("中声明以下代码，阻止用户缩放屏幕。")]),v._v(" "),o("p",[o("code",[v._v('<meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1, minimum-scale=1, maximum-scale=1">')])]),v._v(" "),o("blockquote",[o("p",[v._v("视窗比例单位")])]),v._v(" "),o("p",[v._v("在CSS3中增加了与"),o("code",[v._v("viewport")]),v._v("相关的四个长度单位，随着时间推移，目前大部分浏览器对这四个长度单位都有比较好的兼容，这也是未来最建议在伸缩方案中使用的长度单位。")]),v._v(" "),o("ul",[o("li",[o("code",[v._v("1vw")]),v._v("表示"),o("code",[v._v("1%")]),v._v("视窗宽度")]),v._v(" "),o("li",[o("code",[v._v("1vh")]),v._v("表示"),o("code",[v._v("1%")]),v._v("视窗高度")]),v._v(" "),o("li",[o("code",[v._v("1vmin")]),v._v("表示"),o("code",[v._v("1%")]),v._v("视窗宽度和"),o("code",[v._v("1%")]),v._v("视窗高度中最小者")]),v._v(" "),o("li",[o("code",[v._v("1vmax")]),v._v("表示"),o("code",[v._v("1%")]),v._v("视窗宽度和"),o("code",[v._v("1%")]),v._v("视窗高度中最大者")])]),v._v(" "),o("p",[v._v("视窗宽高在JS中分别对应"),o("code",[v._v("window.innerWdith")]),v._v("和"),o("code",[v._v("window.innerHeight")]),v._v("。若不考虑低版本浏览器的兼容，完全可用一行CSS代码秒杀所有移动端的伸缩方案。")]),v._v(" "),o("p",[o("code",[v._v("/* 基于UI width=750px DPR=2的页面 */ html { font-size: calc(100vw / 7.5); }")])]),v._v(" "),o("p",[v._v("这是"),o("code",[v._v("calc()")]),v._v("的一个神操作，在第7章"),o("strong",[v._v("函数计算")]),v._v("会详细讲解"),o("code",[v._v("calc()")]),v._v("怎么玩。这行CSS代码就留个给位同学思考，为何这样处理能，细心的同学可能发现这段代码可代替上述那段JS代码。")])])}),[],!1,null,null,null);_.default=c.exports}}]);