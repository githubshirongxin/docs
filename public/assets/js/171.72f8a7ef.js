(window.webpackJsonp=window.webpackJsonp||[]).push([[171],{654:function(e,s,a){"use strict";a.r(s);var t=a(59),n=Object(t.a)({},(function(){var e=this,s=e.$createElement,a=e._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"理论-如何为编写声明文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#理论-如何为编写声明文件"}},[e._v("#")]),e._v(" 理论:如何为编写声明文件")]),e._v(" "),a("p",[e._v("虽然 TypeScript 已经逐渐进入主流,但是市面上大部分库还是以 JavaScript 编写的，这个时候由于库没有像 TS 一样定义类型，因此需要一个声明文件来帮助库的使用者来获取库的类型提示，比如 JQuery 虽然是 js 编写的但是如果引入 "),a("code",[e._v("@types/jquery")]),e._v(" 就可以获得以下效果:")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/11/16dbb1571bdf71b4?w=594&h=359&f=png&s=66865",alt:"JQuery代码提示"}})]),e._v(" "),a("h2",{attrs:{id:"使用第三方-d-ts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用第三方-d-ts"}},[e._v("#")]),e._v(" 使用第三方 d.ts")]),e._v(" "),a("p",[e._v("Github 上有一个库 "),a("a",{attrs:{href:"https://github.com/DefinitelyTyped/DefinitelyTyped",target:"_blank",rel:"noopener noreferrer"}},[e._v("DefinitelyTyped"),a("OutboundLink")],1),e._v(" 它定义了市面上主流的JavaScript 库的 d.ts ,而且我们可以很方便地用 npm 引入这些 d.ts。")]),e._v(" "),a("p",[e._v("比如我们要安装 JQuery 的 d.ts:")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("npm install @types/jquery -save\n\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("p",[e._v("在日常开发中我们建议直接使用 DefinitelyTyped 定义的 d.ts,但是依然有些情况下我们需要给自己的库编写 d.ts,或者没有第三方的 d.ts 提供,这个时候就需要什么自己编写 d.ts 文件了.")]),e._v(" "),a("h2",{attrs:{id:"编写-d-ts-文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编写-d-ts-文件"}},[e._v("#")]),e._v(" 编写 d.ts 文件")]),e._v(" "),a("p",[e._v("关键字 "),a("code",[e._v("declare")]),e._v(" 表示声明的意思,我们可以用它来做出各种声明:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("declare var")]),e._v(" 声明全局变量")]),e._v(" "),a("li",[a("code",[e._v("declare function")]),e._v(" 声明全局方法")]),e._v(" "),a("li",[a("code",[e._v("declare class")]),e._v(" 声明全局类")]),e._v(" "),a("li",[a("code",[e._v("declare enum")]),e._v(" 声明全局枚举类型")]),e._v(" "),a("li",[a("code",[e._v("declare namespace")]),e._v(" 声明（含有子属性的）全局对象")]),e._v(" "),a("li",[a("code",[e._v("interface")]),e._v(" 和 "),a("code",[e._v("type")]),e._v(" 声明全局类型")])]),e._v(" "),a("h3",{attrs:{id:"声明变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#声明变量"}},[e._v("#")]),e._v(" 声明变量")]),e._v(" "),a("p",[a("code",[e._v("declare var/let/const")]),e._v(",全局变量的声明可以说是最简单的了,虽然 "),a("code",[e._v("var/let/const")]),e._v(" 都可以使用的,但是通常情况下全局变量是不允许改动的,大多数情况下还是以 "),a("code",[e._v("const")]),e._v(" 为主:")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// src/jQuery.d.ts\n\ndeclare const jQuery: (selector: string) => any;\n\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("h3",{attrs:{id:"声明函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#声明函数"}},[e._v("#")]),e._v(" 声明函数")]),e._v(" "),a("p",[a("code",[e._v("declare function")]),e._v(" 用来声明全局函数:")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// src/jQuery.d.ts\n\ndeclare function jQuery(selector: string): any;\n\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("h3",{attrs:{id:"声明类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#声明类"}},[e._v("#")]),e._v(" 声明类")]),e._v(" "),a("p",[a("code",[e._v("declare class")]),e._v(" 用于声明全局类")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// src/Person.d.ts\n\ndeclare class Person {\n    name: string;\n    constructor(name: string);\n    say(): string;\n}\n\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br")])]),a("h3",{attrs:{id:"声明枚举"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#声明枚举"}},[e._v("#")]),e._v(" 声明枚举")]),e._v(" "),a("p",[a("code",[e._v("declare enum")]),e._v(" 是于声明全局枚举类型")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// src/Directions.d.ts\n\ndeclare enum Directions {\n    Up,\n    Down,\n    Left,\n    Right\n}\n\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br")])]),a("h3",{attrs:{id:"声明命名空间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#声明命名空间"}},[e._v("#")]),e._v(" 声明命名空间")]),e._v(" "),a("p",[a("code",[e._v("declare namespace")]),e._v("，命名空间虽然在日常开发中已经不常见了，但是在 d.ts 文件编写时还是很常见的，它用来表示全局变量是一个对象，包含很多子属性。")]),e._v(" "),a("p",[e._v("比如 "),a("code",[e._v("jQuery")]),e._v(" 是全局对象，而其包含一个 "),a("code",[e._v("jQuery.ajax")]),e._v(" 用于处理 ajax 请求，这个时候命名空间就派上用场了:")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// src/jQuery.d.ts\n\ndeclare namespace jQuery {\n    function ajax(url: string, settings?: any): void;\n}\n\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br")])]),a("h3",{attrs:{id:"声明interface-和-type"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#声明interface-和-type"}},[e._v("#")]),e._v(" 声明interface 和 type")]),e._v(" "),a("p",[e._v("除了全局变量之外，可能有一些类型我们也希望能暴露出来。")]),e._v(" "),a("p",[e._v("在类型声明文件中，我们可以直接使用 interface 或 type 来声明一个全局的接口或类型:")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// src/jQuery.d.ts\n\ninterface AjaxSettings {\n    method?: 'GET' | 'POST'\n    data?: any;\n}\ndeclare namespace jQuery {\n    function ajax(url: string, settings?: AjaxSettings): void;\n}\n\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br")])]),a("h3",{attrs:{id:"声明合并"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#声明合并"}},[e._v("#")]),e._v(" 声明合并")]),e._v(" "),a("p",[e._v("假如 jQuery 既是一个函数，可以直接被调用 "),a("code",[e._v("jQuery('#foo')")]),e._v("，又是一个对象，拥有子属性 "),a("code",[e._v("jQuery.ajax()")]),e._v("（事实确实如此），那么我们可以组合多个声明语句，它们会不冲突的合并起来:")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// src/jQuery.d.ts\n\ndeclare function jQuery(selector: string): any;\ndeclare namespace jQuery {\n    function ajax(url: string, settings?: any): void;\n}\n\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// src/index.ts\n\njQuery('#foo');\njQuery.ajax('/api/get_something');\n\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br")])]),a("h3",{attrs:{id:"自动生成声明文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自动生成声明文件"}},[e._v("#")]),e._v(" 自动生成声明文件")]),e._v(" "),a("p",[e._v("如果库的源码本身就是由 ts 写的，那么在使用 "),a("code",[e._v("tsc")]),e._v(" 脚本将 ts 编译为 js 的时候，添加 "),a("code",[e._v("declaration")]),e._v(" 选项，就可以同时也生成 "),a("code",[e._v(".d.ts")]),e._v(" 声明文件了.")]),e._v(" "),a("p",[e._v("我们可以在命令行中添加 "),a("code",[e._v("--declaration")]),e._v("（简写 "),a("code",[e._v("-d")]),e._v("），或者在 "),a("code",[e._v("tsconfig.json")]),e._v(" 中添加 "),a("code",[e._v("declaration")]),e._v(" 选项.")]),e._v(" "),a("p",[e._v("这里以 "),a("code",[e._v("tsconfig.json")]),e._v(" 为例:")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('{\n    "compilerOptions": {\n        "module": "commonjs",\n        "outDir": "lib",\n        "declaration": true,\n    }\n}\n\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br")])]),a("p",[e._v("上例中我们添加了 outDir 选项，将 ts 文件的编译结果输出到 lib 目录下，然后添加了 declaration 选项，设置为 true，表示将会由 ts 文件自动生成 .d.ts 声明文件，也会输出到 lib 目录下.")]),e._v(" "),a("h2",{attrs:{id:"发布声明文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#发布声明文件"}},[e._v("#")]),e._v(" 发布声明文件")]),e._v(" "),a("p",[e._v("我们为一个开源库编写了声明文件后应该如何发布?")]),e._v(" "),a("p",[e._v("目前有两个选择:")]),e._v(" "),a("ul",[a("li",[e._v("将什么文件向开源库提 PR,声明文件与源码放在一起,作为第一方声明")]),e._v(" "),a("li",[e._v("发布到 DefinitelyTyped,作为第三方声明文件")])]),e._v(" "),a("h3",{attrs:{id:"第一方声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第一方声明"}},[e._v("#")]),e._v(" 第一方声明")]),e._v(" "),a("p",[e._v("如果是手动写的声明文件，那么需要满足以下条件之一，才能被正确的识别：")]),e._v(" "),a("ul",[a("li",[e._v("给 "),a("code",[e._v("package.json")]),e._v(" 中的 "),a("code",[e._v("types")]),e._v(" 或 "),a("code",[e._v("typings")]),e._v(" 字段指定一个类型声明文件地址")]),e._v(" "),a("li",[e._v("在项目根目录下，编写一个 "),a("code",[e._v("index.d.ts")]),e._v(" 文件")]),e._v(" "),a("li",[e._v("针对入口文件（"),a("code",[e._v("package.json")]),e._v(" 中的 "),a("code",[e._v("main")]),e._v(" 字段指定的入口文件），编写一个同名不同后缀的 "),a("code",[e._v(".d.ts")]),e._v(" 文件")])]),e._v(" "),a("p",[e._v("第一种方式是给 "),a("code",[e._v("package.json")]),e._v(" 中的 "),a("code",[e._v("types")]),e._v(" 或 "),a("code",[e._v("typings")]),e._v(" 字段指定一个类型声明文件地址。比如：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('{\n    "name": "foo",\n    "version": "1.0.0",\n    "main": "lib/index.js",\n    "types": "foo.d.ts",\n}\n\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br")])]),a("p",[e._v("指定了 "),a("code",[e._v("types")]),e._v(" 为 "),a("code",[e._v("foo.d.ts")]),e._v(" 之后，导入此库的时候，就会去找 "),a("code",[e._v("foo.d.ts")]),e._v(" 作为此库的类型声明文件了。")]),e._v(" "),a("p",[a("code",[e._v("typings")]),e._v(" 与 "),a("code",[e._v("types")]),e._v(" 一样，只是另一种写法。")]),e._v(" "),a("p",[e._v("如果没有指定 "),a("code",[e._v("types")]),e._v(" 或 "),a("code",[e._v("typings")]),e._v("，那么就会在根目录下寻找 "),a("code",[e._v("index.d.ts")]),e._v(" 文件，将它视为此库的类型声明文件。")]),e._v(" "),a("p",[e._v("如果没有找到 "),a("code",[e._v("index.d.ts")]),e._v(" 文件，那么就会寻找入口文件（"),a("code",[e._v("package.json")]),e._v(" 中的 "),a("code",[e._v("main")]),e._v(" 字段指定的入口文件）是否存在对应同名不同后缀的 "),a("code",[e._v(".d.ts")]),e._v(" 文件。")]),e._v(" "),a("p",[e._v("比如 "),a("code",[e._v("package.json")]),e._v(" 是这样时：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('{\n    "name": "foo",\n    "version": "1.0.0",\n    "main": "lib/index.js",\n    "types": "foo.d.ts",\n}\n\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br")])]),a("p",[e._v("就会先识别 "),a("code",[e._v("package.json")]),e._v(" 中是否存在 "),a("code",[e._v("types")]),e._v(" 或 "),a("code",[e._v("typings")]),e._v(" 字段。发现不存在，那么就会寻找是否存在 "),a("code",[e._v("index.d.ts")]),e._v(" 文件。如果还是不存在，那么就会寻找是否存在 "),a("code",[e._v("lib/index.d.ts")]),e._v(" 文件。假如说连 "),a("code",[e._v("lib/index.d.ts")]),e._v(" 都不存在的话，就会被认为是一个没有提供类型声明文件的库了。")]),e._v(" "),a("p",[e._v("有的库为了支持导入子模块，比如 "),a("code",[e._v("import bar from 'foo/lib/bar'")]),e._v("，就需要额外再编写一个类型声明文件 "),a("code",[e._v("lib/bar.d.ts")]),e._v(" 或者 "),a("code",[e._v("lib/bar/index.d.ts")]),e._v("，这与自动生成声明文件类似，一个库中同时包含了多个类型声明文件。")]),e._v(" "),a("h3",{attrs:{id:"将声明文件发布到definitelytyped"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#将声明文件发布到definitelytyped"}},[e._v("#")]),e._v(" 将声明文件发布到DefinitelyTyped")]),e._v(" "),a("p",[e._v("如果我们是在给别人的仓库添加类型声明文件，但原作者不愿意合并 pull request，那么就需要将声明文件发布到 "),a("code",[e._v("@types")]),e._v(" 下。")]),e._v(" "),a("p",[e._v("与普通的 npm 模块不同，"),a("code",[e._v("@types")]),e._v(" 是统一由 "),a("a",{attrs:{href:"https://github.com/DefinitelyTyped/DefinitelyTyped/",target:"_blank",rel:"noopener noreferrer"}},[e._v("DefinitelyTyped"),a("OutboundLink")],1),e._v(" 管理的。要将声明文件发布到 "),a("code",[e._v("@types")]),e._v(" 下，就需要给 "),a("a",{attrs:{href:"https://github.com/DefinitelyTyped/DefinitelyTyped/",target:"_blank",rel:"noopener noreferrer"}},[e._v("DefinitelyTyped"),a("OutboundLink")],1),e._v(" 创建一个 pull-request，其中包含了类型声明文件，测试代码，以及 "),a("code",[e._v("tsconfig.json")]),e._v(" 等。")]),e._v(" "),a("p",[e._v("pull-request 需要符合它们的规范，并且通过测试，才能被合并，稍后就会被自动发布到 "),a("code",[e._v("@types")]),e._v(" 下。")]),e._v(" "),a("p",[e._v("在 "),a("a",{attrs:{href:"https://github.com/DefinitelyTyped/DefinitelyTyped/",target:"_blank",rel:"noopener noreferrer"}},[e._v("DefinitelyTyped"),a("OutboundLink")],1),e._v(" 中创建一个新的类型声明，需要用到一些工具，"),a("a",{attrs:{href:"https://github.com/DefinitelyTyped/DefinitelyTyped/",target:"_blank",rel:"noopener noreferrer"}},[e._v("DefinitelyTyped"),a("OutboundLink")],1),e._v(" 的文档中已经有了"),a("a",{attrs:{href:"https://github.com/DefinitelyTyped/DefinitelyTyped#create-a-new-package",target:"_blank",rel:"noopener noreferrer"}},[e._v("详细的介绍"),a("OutboundLink")],1),e._v("，这里就不赘述了，以官方文档为准。")]),e._v(" "),a("h2",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[e._v("#")]),e._v(" 小结")]),e._v(" "),a("p",[e._v("本节我们学习了声明文件基本的编写技巧,接下来我们需要进行一次实战,为一个纯 JavaScript 编写的开源库编写 d.ts.")])])}),[],!1,null,null,null);s.default=n.exports}}]);