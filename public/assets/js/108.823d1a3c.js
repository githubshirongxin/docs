(window.webpackJsonp=window.webpackJsonp||[]).push([[108],{592:function(t,r,e){"use strict";e.r(r);var s=e(59),a=Object(s.a)({},(function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"使用kube-proxy让外部网络访问k8s-service的clusterip"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用kube-proxy让外部网络访问k8s-service的clusterip"}},[t._v("#")]),t._v(" 使用kube-proxy让外部网络访问K8S service的ClusterIP")]),t._v(" "),e("h1",{attrs:{id:"配置方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置方式"}},[t._v("#")]),t._v(" 配置方式")]),t._v(" "),e("p",[t._v("kubernetes版本大于或者等于1.2时，外部网络（即非K8S集群内的网络）访问cluster IP的办法是："),e("br"),t._v("\n修改master的/etc/kubernetes/proxy，把KUBE_PROXY_ARGS=”“改为KUBE_PROXY_ARGS=”–proxy-mode=userspace”"),e("br"),t._v("\n启动kube-proxy服务"),e("br"),t._v("\n在核心路由设备或者源主机上添加一条路由，访问cluster IP段的路由指向到master上。")]),t._v(" "),e("p",[t._v("kubernetes版本小于1.2时，直接添加路由")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://img-blog.csdn.net/20170810175855001?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGl5aW5na2UxMTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast",alt:"这里写图片描述"}})]),t._v(" "),e("h1",{attrs:{id:"kube-proxy转发的两种模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#kube-proxy转发的两种模式"}},[t._v("#")]),t._v(" kube-proxy转发的两种模式")]),t._v(" "),e("p",[t._v("kube-proxy在转发时主要有两种模式Userspace和Iptables。如下图，左侧是Userspace模式，也是kube-proxy默认的方式，所有的转发都是通过kube-proxy软件实现的；右侧是Iptables模式，所有转发都是通过Iptables内核模块实现，而kube-proxy只负责生成相应的Iptables规则。"),e("br"),t._v(" "),e("img",{attrs:{src:"https://img-blog.csdn.net/20170724160810623?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGl5aW5na2UxMTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast",alt:"kube-proxy"}}),e("br"),t._v("\n使用Userspace模式（k8s版本为1.2之前默认模式），外部网络可以直接访问cluster IP。"),e("br"),t._v("\n使用Iptables模式（k8s版本为1.2之后默认模式），外部网络不能直接访问cluster IP。"),e("br"),t._v("\n从效率上看，Iptables会更高一些，但是需要Iptables version >=1.4.11，Iptables模式在k8s1.2版本放出。")]),t._v(" "),e("h1",{attrs:{id:"service转发后端服务的四种类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#service转发后端服务的四种类型"}},[t._v("#")]),t._v(" service转发后端服务的四种类型")]),t._v(" "),e("h2",{attrs:{id:"clusterip"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#clusterip"}},[t._v("#")]),t._v(" ClusterIP")]),t._v(" "),e("p",[t._v("此类型会提供一个集群内部的虚拟IP（与Pod不在同一网段)，以供集群内部的pod之间通信使用。ClusterIP也是Kubernetes service的默认类型。"),e("br"),t._v(" "),e("img",{attrs:{src:"https://img-blog.csdn.net/20170724161410421?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGl5aW5na2UxMTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast",alt:"ClusterIP"}}),e("br"),t._v("\n为了实现图上的功能主要需要以下几个组件的协同工作："),e("br"),t._v("\napiserver：在创建service时，apiserver接收到请求以后将数据存储到etcd中。"),e("br"),t._v("\nkube-proxy：k8s的每个节点中都有该进程，负责实现service功能，这个进程负责感知service，pod的变化，并将变化的信息写入本地的iptables中。"),e("br"),t._v("\niptables：使用NAT等技术将virtualIP的流量转至endpoint中。")]),t._v(" "),e("h2",{attrs:{id:"nodeport"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nodeport"}},[t._v("#")]),t._v(" NodePort")]),t._v(" "),e("p",[t._v("NodePort模式除了使用cluster ip外，也将service的port映射到每个node的一个指定内部port上，映射的每个node的内部port都一样。"),e("br"),t._v("\n为每个节点暴露一个端口，通过nodeip + nodeport可以访问这个服务，同时服务依然会有cluster类型的ip+port。内部通过clusterip方式访问，外部通过nodeport方式访问。"),e("br"),t._v(" "),e("img",{attrs:{src:"https://img-blog.csdn.net/20170810175932838?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGl5aW5na2UxMTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast",alt:"这里写图片描述"}})]),t._v(" "),e("h2",{attrs:{id:"loadbalance"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#loadbalance"}},[t._v("#")]),t._v(" loadbalance")]),t._v(" "),e("p",[t._v("LoadBalancer在NodePort基础上，K8S可以请求底层云平台创建一个负载均衡器，将每个Node作为后端，进行服务分发。该模式需要底层云平台（例如GCE）支持。")]),t._v(" "),e("h2",{attrs:{id:"ingress"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ingress"}},[t._v("#")]),t._v(" Ingress")]),t._v(" "),e("p",[t._v("Ingress，是一种HTTP方式的路由转发机制，由Ingress Controller和HTTP代理服务器组合而成。Ingress Controller实时监控Kubernetes API，实时更新HTTP代理服务器的转发规则。HTTP代理服务器有GCE Load-Balancer、HaProxy、Nginx等开源方案。"),e("br"),t._v(" "),e("a",{attrs:{href:"http://blog.csdn.net/liyingke112/article/details/77066814",target:"_blank",rel:"noopener noreferrer"}},[t._v("详细说明请见http://blog.csdn.net/liyingke112/article/details/77066814"),e("OutboundLink")],1),e("br"),t._v(" "),e("img",{attrs:{src:"https://img-blog.csdn.net/20170810175951852?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGl5aW5na2UxMTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast",alt:"这里写图片描述"}})]),t._v(" "),e("h1",{attrs:{id:"service的三种端口"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#service的三种端口"}},[t._v("#")]),t._v(" service的三种端口")]),t._v(" "),e("h2",{attrs:{id:"port"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#port"}},[t._v("#")]),t._v(" port")]),t._v(" "),e("p",[t._v("service暴露在cluster ip上的端口，:port 是提供给集群内部客户访问service的入口。")]),t._v(" "),e("h2",{attrs:{id:"nodeport-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nodeport-2"}},[t._v("#")]),t._v(" nodePort")]),t._v(" "),e("p",[t._v("nodePort是k8s提供给集群外部客户访问service入口的一种方式，:nodePort 是提供给集群外部客户访问service的入口。")]),t._v(" "),e("h2",{attrs:{id:"targetport"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#targetport"}},[t._v("#")]),t._v(" targetPort")]),t._v(" "),e("p",[t._v("targetPort是pod上的端口，从port和nodePort上到来的数据最终经过kube-proxy流入到后端pod的targetPort上进入容器。")]),t._v(" "),e("h2",{attrs:{id:"port、nodeport总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#port、nodeport总结"}},[t._v("#")]),t._v(" port、nodePort总结")]),t._v(" "),e("p",[t._v("总的来说，port和nodePort都是service的端口，前者暴露给集群内客户访问服务，后者暴露给集群外客户访问服务。从这两个端口到来的数据都需要经过反向代理kube-proxy流入后端pod的targetPod，从而到达pod上的容器内。")])])}),[],!1,null,null,null);r.default=a.exports}}]);